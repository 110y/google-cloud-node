{"id":"file","metadata":{"name":null,"description":null},"methods":[{"metadata":{"constructor":false,"name":"File","source":"/lib/storage/file.js#Lundefined","description":"<p>A File object is created from your Bucket object using <a data-custom-type=\"storage/bucket#file\"></a>.</p>","examples":[],"resources":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"copy","source":"/lib/storage/file.js#Lundefined","description":"<p>Copy this file to another file. By default, this will copy the file to the same bucket, but you can choose to copy it to another Bucket by providing either a Bucket or File object.</p>","examples":[{"caption":"<p>You can pass in a variety of types for the destination. \nFor all of the below examples, assume we are working with the following \nBucket and File objects.</p>","code":"var bucket = storage.bucket('my-bucket');\nvar file = bucket.file('my-image.png');"},{"caption":"<p>If you pass in a string for the destination, the file is copied to its \ncurrent bucket, under the new name provided.</p>","code":"file.copy('my-image-copy.png', function(err, copiedFile) {\n  // `my-bucket` now contains:\n  // - \"my-image.png\"\n  // - \"my-image-copy.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a Bucket object, the file will be copied to that bucket \nusing the same name.</p>","code":"var anotherBucket = storage.bucket('another-bucket');\nfile.copy(anotherBucket, function(err, copiedFile) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-image.png\"\n\n  // `copiedFile` is an instance of a File object that refers to your new\n  // file.\n});"},{"caption":"<p>If you pass in a File object, you have complete control over the new \nbucket and filename.</p>","code":"var anotherFile = anotherBucket.file('my-awesome-image.png');\nfile.copy(anotherFile, function(err, copiedFile) {\n  // `my-bucket` still contains:\n  // - \"my-image.png\"\n  //\n  // `another-bucket` now contains:\n  // - \"my-awesome-image.png\"\n\n  // Note:\n  // The `copiedFile` parameter is equal to `anotherFile`.\n});"}],"resources":[]},"params":[{"name":"destination","description":"- Destination file.","types":["string","<a data-custom-type=\"storage\"></a>","bucket","<a data-custom-type=\"storage\"></a>","file"]},{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[{"type":"Error","description":"If the destination file is not provided. "}],"returns":[]},{"metadata":{"constructor":false,"name":"createReadStream","source":"/lib/storage/file.js#Lundefined","description":"<p>Create a readable stream to read the contents of the remote file. It can be piped to a writable stream or listened to for &#39;data&#39; events to read a file&#39;s contents.</p>","examples":[{"caption":"<p><h4>Downloading a File</h4> \nThe example below demonstrates how we can reference a remote file, then \npipe its contents to a local file. This is effectively creating a local \nbackup of your remote data.</p>","code":"var fs = require('fs');\nvar image = myBucket.file('image.png');\n\nimage.createReadStream()\n  .pipe(fs.createWriteStream('/Users/stephen/Photos/image.png'))\n  .on('error', function(err) {});"}],"resources":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"createWriteStream","source":"/lib/storage/file.js#L260","description":"<p>Create a writable stream to overwrite the contents of the file in your bucket.</p><p>A File object can also be used to create files for the first time.</p>","examples":[{"caption":"<p><h4>Uploading a File</h4> \nNow, consider a case where we want to upload a file to your bucket. You \nhave the option of using <a data-custom-type=\"storage/bucket#upload\"></a>, but that is just \na convenience method which will do the following.</p>","code":"var fs = require('fs');\nvar image = myBucket.file('image.png');\n\nfs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n  .pipe(image.createWriteStream())\n  .on('error', function(err) {});"},{"caption":"<p><h4>Uploading a File with Metadata</h4> \nOne last case you may run into is when you want to upload a file to your \nbucket and set its metadata at the same time. Like above, you can use \n<a data-custom-type=\"storage/bucket#upload\"></a> to do this, which is just a wrapper around \nthe following.</p>","code":"var fs = require('fs');\nvar image = myBucket.file('image.png');\n\nfs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n  .pipe(image.createWriteStream({ contentType: 'image/jpeg' }))\n  .on('error', function(err) {});"}],"resources":[]},"params":[{"name":"metadata","description":"- Set the metadata for this file. ","types":["object="]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"delete","source":"/lib/storage/file.js#L292","description":"<p>Delete the file.</p>","examples":[{"code":"file.delete(function(err) {});"}],"resources":[]},"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"getMetadata","source":"/lib/storage/file.js#L311","description":"<p>Get the file&#39;s metadata.</p>","examples":[{"code":"file.getMetadata(function(err, metadata) {});"}],"resources":[]},"params":[{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"getSignedUrl","source":"/lib/storage/file.js#L348","description":"<p>Get a signed URL to allow limited time access to the file.</p><p>{@link <a href=\"https://developers.google.com/storage/docs/accesscontrol#Signed-URLs}\">https://developers.google.com/storage/docs/accesscontrol#Signed-URLs}</a></p>","examples":[{"code":"file.getSignedUrl({\n  action: 'read',\n  expires: Math.round(Date.now() / 1000) + (60 * 60 * 24 * 14) // 2 weeks.\n}, function(err, url) {});"}],"resources":[]},"params":[{"name":"options","description":"- Configuration object.","types":["object"]},{"name":"options.action","description":"- \"read\", \"write\", or \"delete\"","types":["string"]},{"name":"options.contentMd5","description":"- The MD5 digest value in base64. If you provide this, the client must provide this HTTP header with this same value in its request.","types":["string="]},{"name":"options.contentType","description":"- If you provide this value, the client must provide this HTTP header set to the same value.","types":["string="]},{"name":"options.expires","description":"- Timestamp (seconds since epoch) when this link will expire.","types":["number"]},{"name":"options.extensionHeaders","description":"- If these headers are used, the server will check to make sure that the client provides matching values. ","types":["string="]}],"exceptions":[{"type":"Error","description":"if an expiration timestamp from the past is given. "}],"returns":[]},{"metadata":{"constructor":false,"name":"setMetadata","source":"/lib/storage/file.js#Lundefined","description":"<p>Set the file&#39;s metadata.</p>","examples":[{"code":"file.setMetadata({\n  contentType: 'application/x-font-ttf',\n  metadata: {\n    my: 'custom',\n    properties: 'go here'\n  }\n}, function(err, metadata) {});"}],"resources":[]},"params":[{"name":"metadata","description":"- The metadata you wish to set.","types":["object"]},{"name":"callback","description":"- The callback function. ","types":["function="]}],"exceptions":[],"returns":[]}]}