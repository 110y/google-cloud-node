[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "ignore": true
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@module bigquery</p>",
      "summary": "<p>@module bigquery</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": true,
    "code": "'use strict';\n\nvar extend = require('extend');\nvar streamEvents = require('stream-events');\nvar through = require('through2');"
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:common/connection</p>",
      "summary": "<p>@type module:common/connection</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var conn = require('../common/connection.js');",
    "ctx": {
      "type": "declaration",
      "name": "conn",
      "value": "require('../common/connection.js')",
      "string": "conn"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:bigquery/dataset</p>",
      "summary": "<p>@type module:bigquery/dataset</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var Dataset = require('./dataset.js');",
    "ctx": {
      "type": "declaration",
      "name": "Dataset",
      "value": "require('./dataset.js')",
      "string": "Dataset"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:bigquery/job</p>",
      "summary": "<p>@type module:bigquery/job</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var Job = require('./job.js');",
    "ctx": {
      "type": "declaration",
      "name": "Job",
      "value": "require('./job.js')",
      "string": "Job"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:bigquery/table</p>",
      "summary": "<p>@type module:bigquery/table</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var Table = require('./table.js');",
    "ctx": {
      "type": "declaration",
      "name": "Table",
      "value": "require('./table.js')",
      "string": "Table"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:common/util</p>",
      "summary": "<p>@type module:common/util</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@const {string} Base URL for the BigQuery API.</p>",
      "summary": "<p>@const {string} Base URL for the BigQuery API.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var BIGQUERY_BASE_URL = 'https://www.googleapis.com/bigquery/v2/projects/';",
    "ctx": {
      "type": "declaration",
      "name": "BIGQUERY_BASE_URL",
      "value": "'https://www.googleapis.com/bigquery/v2/projects/'",
      "string": "BIGQUERY_BASE_URL"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "string": "{array}"
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Required scopes for Google Cloud BigQuery API.</p>",
      "summary": "<p>Required scopes for Google Cloud BigQuery API.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var SCOPES = ['https://www.googleapis.com/auth/bigquery'];",
    "ctx": {
      "type": "declaration",
      "name": "SCOPES",
      "value": "['https://www.googleapis.com/auth/bigquery']",
      "string": "SCOPES"
    }
  },
  {
    "tags": [
      {
        "type": "alias",
        "string": "module:bigquery"
      },
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud');\n\n// Providing configuration details up-front.\nvar myProject = gcloud({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\nvar bigquery = myProject.bigquery();\n\n\n// Overriding default configuration details.\nvar anotherBigQueryInstance = myProject.bigquery({\n  keyFilename: '/path/to/another/keyfile.json'\n});\n\n\n// Not using a default configuration.\nvar myOtherProject = gcloud.bigquery({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\n//-\n// In the following examples from this page and the other modules (Dataset,\n// Table, etc.), we are going to be using a dataset from\n// [data.gov]{@link http://goo.gl/f2SXcb} of higher education institutions.\n//\n// We will create a table with the correct schema, import the public CSV file\n// into that table, and query it for data.\n//-"
      }
    ],
    "description": {
      "full": "<p>The example below will demonstrate the different usage patterns your app may<br />need to support to retrieve a BigQuery object.</p>",
      "summary": "<p>The example below will demonstrate the different usage patterns your app may<br />need to support to retrieve a BigQuery object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function BigQuery(options) {\n  if (!(this instanceof BigQuery)) {\n    return new BigQuery(options);\n  }\n\n  options = options || {};\n\n  this.connection_ = new conn.Connection({\n    credentials: options.credentials,\n    keyFilename: options.keyFilename,\n    scopes: SCOPES\n  });\n\n  this.projectId = options.projectId;\n}",
    "ctx": {
      "type": "function",
      "name": "BigQuery",
      "string": "BigQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "id",
        "description": "- ID of the dataset to create."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "bigquery.createDataset('higher_education', function(err, dataset) {});"
      }
    ],
    "description": {
      "full": "<p>Create a dataset.</p>",
      "summary": "<p>Create a dataset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "BigQuery.prototype.createDataset = function(id, callback) {\n  var that = this;\n\n  var body = {\n    datasetReference: {\n      datasetId: id\n    }\n  };\n\n  this.makeReq_('POST', '/datasets', null, body, function(err, resp) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    var dataset = that.dataset(id);\n    dataset.metadata = resp;\n\n    callback(null, dataset);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "createDataset",
      "string": "BigQuery.prototype.createDataset()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "id",
        "description": "- ID of the dataset."
      },
      {
        "type": "return",
        "types": [
          "module:bigquery",
          "dataset"
        ],
        "description": ""
      },
      {
        "type": "example",
        "string": "var dataset = bigquery.dataset('higher_education');"
      }
    ],
    "description": {
      "full": "<p>Create a reference to an existing dataset.</p>",
      "summary": "<p>Create a reference to an existing dataset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "BigQuery.prototype.dataset = function(id) {\n  return new Dataset(this, id);\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "dataset",
      "string": "BigQuery.prototype.dataset()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "query",
        "description": "- Configuration object."
      },
      {
        "type": "param",
        "types": [
          "boolean"
        ],
        "name": "query.all",
        "description": "- List all datasets, including hidden ones."
      },
      {
        "type": "param",
        "types": [
          "number"
        ],
        "name": "query.maxResults",
        "description": "- Maximum number of results to return."
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "query.pageToken",
        "description": "- Token returned from a previous call, to     request the next page of results."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "bigquery.getDatasets(function(err, datasets, nextQuery) {\n  // If `nextQuery` is non-null, there are more results to fetch.\n});"
      }
    ],
    "description": {
      "full": "<p>List all or some of the datasets in your project.</p>",
      "summary": "<p>List all or some of the datasets in your project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "BigQuery.prototype.getDatasets = function(query, callback) {\n  var that = this;\n\n  if (util.is(query, 'function')) {\n    callback = query;\n    query = {};\n  }\n\n  query = query || {};\n\n  this.makeReq_('GET', '/datasets', query, null, function(err, resp) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, query, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var datasets = (resp.datasets || []).map(function(dataset) {\n      var ds = that.dataset(dataset.datasetReference.datasetId);\n      ds.metadata = dataset;\n      return ds;\n    });\n\n    callback(null, datasets, nextQuery);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "getDatasets",
      "string": "BigQuery.prototype.getDatasets()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "options",
        "description": "- Configuration object."
      },
      {
        "type": "param",
        "types": [
          "boolean="
        ],
        "name": "options.allUsers",
        "description": "- Display jobs owned by all users in the     project."
      },
      {
        "type": "param",
        "types": [
          "number="
        ],
        "name": "options.maxResults",
        "description": "- Maximum number of results to return."
      },
      {
        "type": "param",
        "types": [
          "string="
        ],
        "name": "options.pageToken",
        "description": "- Token returned from a previous call, to     request the next page of results."
      },
      {
        "type": "param",
        "types": [
          "string="
        ],
        "name": "options.projection",
        "description": "- Restrict information returned to a set     of selected fields. Acceptable values are \"full\", for all job data, and\n    \"minimal\", to not include the job configuration."
      },
      {
        "type": "param",
        "types": [
          "string="
        ],
        "name": "options.stateFilter",
        "description": "- Filter for job state. Acceptable     values are \"done\", \"pending\", and \"running\"."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "bigquery.getJobs(function(err, jobs, nextQuery) {\n  // If `nextQuery` is non-null, there are more results to fetch.\n});"
      }
    ],
    "description": {
      "full": "<p>Get all of the jobs from your project.</p>",
      "summary": "<p>Get all of the jobs from your project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "BigQuery.prototype.getJobs = function(options, callback) {\n  var that = this;\n\n  if (util.is(options, 'function')) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  this.makeReq_('GET', '/jobs', options, null, function(err, resp) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var jobs = (resp.jobs || []).map(function(jobObject) {\n      var job = that.job(jobObject.id);\n      job.metadata = jobObject;\n      return job;\n    });\n\n    callback(null, jobs, nextQuery);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "getJobs",
      "string": "BigQuery.prototype.getJobs()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "id",
        "description": "- ID of the job."
      },
      {
        "type": "return",
        "types": [
          "module:bigquery",
          "job"
        ],
        "description": ""
      },
      {
        "type": "example",
        "string": "var myExistingJob = bigquery.job('job-id');"
      }
    ],
    "description": {
      "full": "<p>Create a reference to an existing Job.</p>",
      "summary": "<p>Create a reference to an existing Job.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "BigQuery.prototype.job = function(id) {\n  return new Job(this, id);\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "job",
      "string": "BigQuery.prototype.job()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Developer Documentation</p><p>The <code>query</code> method is dual-purpose, like the use cases for a query.<br />Sometimes, a user will want to fetch results from their table in a serial<br />manner (get results -&gt; more results exist? -&gt; get more results, repeat.) --<br />other times, a user may want to wave their hands at making repeated calls to<br />get all of the rows, instead using a stream.</p><p>A couple different libraries are used to cover the stream case:</p><p>  var stream = streamEvents(through2.obj());</p><ul>\n<li><p>streamEvents - <a href=\"https://github.com/stephenplusplus/stream-events\">https://github.com/stephenplusplus/stream-events</a><br />  This library enables us to wait until our stream is being asked for<br />  data, before making any API calls. It is possible a user will get a<br />  stream, then not end up running it - or, it will be run later, at a<br />  time when the token returned from the API call could have expired.<br />  Using this library ensures we wait until the last possible chance to<br />  get that token.</p></li>\n<li><p>through2 - <a href=\"https://github.com/rvagg/through2\">https://github.com/rvagg/through2</a><br />  This is a popular library for how simple it makes dealing with the<br />  complicated Node.js Streams API. We&#39;re creating an object stream, as<br />  the data we are receiving from the API are rows of JSON data.</p></li>\n</ul>\n",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>The <code>query</code> method is dual-purpose, like the use cases for a query.<br />Sometimes, a user will want to fetch results from their table in a serial<br />manner (get results -&gt; more results exist? -&gt; get more results, repeat.) --<br />other times, a user may want to wave their hands at making repeated calls to<br />get all of the rows, instead using a stream.</p><p>A couple different libraries are used to cover the stream case:</p><p>  var stream = streamEvents(through2.obj());</p><ul>\n<li><p>streamEvents - <a href=\"https://github.com/stephenplusplus/stream-events\">https://github.com/stephenplusplus/stream-events</a><br />  This library enables us to wait until our stream is being asked for<br />  data, before making any API calls. It is possible a user will get a<br />  stream, then not end up running it - or, it will be run later, at a<br />  time when the token returned from the API call could have expired.<br />  Using this library ensures we wait until the last possible chance to<br />  get that token.</p></li>\n<li><p>through2 - <a href=\"https://github.com/rvagg/through2\">https://github.com/rvagg/through2</a><br />  This is a popular library for how simple it makes dealing with the<br />  complicated Node.js Streams API. We&#39;re creating an object stream, as<br />  the data we are receiving from the API are rows of JSON data.</p></li>\n</ul>\n"
    },
    "isPrivate": false,
    "ignore": true
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string",
          "object"
        ],
        "name": "options",
        "description": "- A string SQL query or configuration object."
      },
      {
        "type": "param",
        "types": [
          "number"
        ],
        "name": "options.maxResults",
        "description": "- Maximum number of results to read."
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "options.query",
        "description": "- A query string, following the BigQuery query     syntax, of the query to execute."
      },
      {
        "type": "param",
        "types": [
          "number"
        ],
        "name": "options.timeoutMs",
        "description": "- How long to wait for the query to     complete, in milliseconds, before returning. Default is to return\n    immediately. If the timeout passes before the job completes, the request\n    will fail with a `TIMEOUT` error."
      },
      {
        "type": "param",
        "types": [
          "function="
        ],
        "name": "callback",
        "description": "- The callback function. If you intend to     continuously run this query until all results are in as part of a stream,\n    do not pass a callback.\n"
      },
      {
        "type": "example",
        "string": "var query = 'SELECT url FROM [publicdata:samples.github_nested] LIMIT 100';\n\n//-\n// You can run a query against your data in a serial manner.\n//-\nbigquery.query(query, function(err, rows, nextQuery) {\n  if (nextQuery) {\n    bigquery.query(nextQuery, function(err, rows, nextQuery) {});\n  }\n});\n\n//-\n// You can also use the `query` method as a readable object stream by\n// omitting the callback.\n//-\nvar through2 = require('through2');\n\nbigquery.query(query)\n  .pipe(through2.obj(function(row, enc, next) {\n    this.push(row.url += '?trackingCode=AZ19b\\n');\n    next();\n  }))\n  .pipe(process.stdout);"
      }
    ],
    "description": {
      "full": "<p>Run a query scoped to your project.</p><p>If you provide a callback, this method returns the results from your query to<br />it. When querying large sets of data, it is possible your results won&#39;t be<br />returned all at once. In those cases, you will receive a third argument to<br />your callback that can be passed back to this method to return more results.</p><p>See the examples below for such a workflow.</p><p>This method also runs as a readable stream if you do not provide a callback.<br />In cases where more results exist, this will automatically run the subsequent<br />queries for you, pushing each row to the stream.</p>",
      "summary": "<p>Run a query scoped to your project.</p>",
      "body": "<p>If you provide a callback, this method returns the results from your query to<br />it. When querying large sets of data, it is possible your results won&#39;t be<br />returned all at once. In those cases, you will receive a third argument to<br />your callback that can be passed back to this method to return more results.</p><p>See the examples below for such a workflow.</p><p>This method also runs as a readable stream if you do not provide a callback.<br />In cases where more results exist, this will automatically run the subsequent<br />queries for you, pushing each row to the stream.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "BigQuery.prototype.query = function(options, callback) {\n  var that = this;\n  var stream;\n\n  if (util.is(options, 'string')) {\n    options = {\n      query: options\n    };\n  }\n\n  options = options || {};\n\n  if (!util.is(callback, 'function')) {\n    stream = streamEvents(through.obj());\n    stream.once('reading', runQuery);\n    return stream;\n  } else {\n    callback = callback || util.noop;\n    runQuery();\n  }\n\n  function runQuery() {\n    if (options.job) {\n      that.makeReq_(\n        'GET', '/queries/' + options.job.id, options, null, responseHandler);\n    } else {\n      // Create a job.\n      that.makeReq_('POST', '/queries', null, options, responseHandler);\n    }\n\n    function responseHandler(err, resp) {\n      if (err) {\n        onComplete(err);\n        return;\n      }\n\n      var job = that.job(resp.jobReference.jobId);\n      var nextQuery = null;\n      var rows = Table.mergeSchemaWithRows_(resp.schema, resp.rows || []);\n\n      if (resp.jobComplete === false) {\n        // Query is still running.\n        nextQuery = extend({\n          job: job\n        }, options);\n      } else if (resp.pageToken) {\n        // More results exist.\n        nextQuery = extend({\n          job: job\n        }, options, {\n          pageToken: resp.pageToken\n        });\n      }\n\n      onComplete(null, rows, nextQuery);\n    }\n\n    function onComplete(err, rows, nextQuery) {\n      if (err) {\n        if (stream) {\n          stream.emit('error', err);\n          stream.end();\n        } else {\n          callback(err);\n        }\n        return;\n      }\n\n      if (stream) {\n        rows.forEach(function(row) {\n          stream.push(row);\n        });\n\n        if (nextQuery) {\n          that.query(nextQuery, onComplete);\n        } else {\n          stream.end();\n        }\n      } else {\n        callback(null, rows, nextQuery);\n      }\n    }\n  }\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "query",
      "string": "BigQuery.prototype.query()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object",
          "string"
        ],
        "name": "options",
        "description": "- The configuration object. This must be in     the format of the [`configuration.query`]{@link http://goo.gl/wRpHvR}\n    property of a Jobs resource. If a string is provided, this is used as the\n    query string, and all other options are defaulted."
      },
      {
        "type": "param",
        "types": [
          "module:bigquery",
          "table="
        ],
        "name": "options.destination",
        "description": "- The table to save the     query's results to. If omitted, a new table will be created."
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "options.query",
        "description": "- A query string, following the BigQuery query     syntax, of the query to execute."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If a query is not specified."
      },
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If a Table is not provided as a destination. "
      },
      {
        "type": "example",
        "string": "var query = 'SELECT url FROM [publicdata:samples.github_nested] LIMIT 100';\n\n//-\n// You may pass only a query string, having a new table created to store the\n// results of the query.\n//-\nbigquery.startQuery(query, function(err, job) {});\n\n//-\n// You can also control the destination table by providing a\n// {module:bigquery/table} object.\n//-\nbigquery.startQuery({\n  destination: bigquery.dataset('higher_education').table('institutions'),\n  query: query\n}, function(err, job) {});\n\n//-\n// After you have run `startQuery`, your query will execute in a job. Your\n// callback is executed with a {module:bigquery/job} object so that you may\n// check for the results.\n//-\nbigquery.startQuery(query, function(err, job) {\n  if (!err) {\n    job.getQueryResults(function(err, rows) {});\n  }\n});"
      }
    ],
    "description": {
      "full": "<p>Run a query as a job. No results are immediately returned. Instead, your<br />callback will be executed with a {module:bigquery/job} object that you must<br />ping for the results. See the Job documentation for explanations of how to<br />check on the status of the job.</p>",
      "summary": "<p>Run a query as a job. No results are immediately returned. Instead, your<br />callback will be executed with a {module:bigquery/job} object that you must<br />ping for the results. See the Job documentation for explanations of how to<br />check on the status of the job.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "BigQuery.prototype.startQuery = function(options, callback) {\n  var that = this;\n\n  if (util.is(options, 'string')) {\n    options = {\n      query: options\n    };\n  }\n\n  options = options || {};\n\n  if (!options.query) {\n    throw new Error('A SQL query string is required.');\n  }\n\n  var defaults = {};\n\n  if (options.destination) {\n    if (!(options.destination instanceof Table)) {\n      throw new Error('Destination must be a Table object.');\n    }\n    defaults.destinationTable = {\n      datasetId: options.destination.dataset.id,\n      projectId: options.destination.dataset.bigQuery.projectId,\n      tableId: options.destination.id\n    };\n    delete options.destination;\n  }\n\n  var body = {\n    configuration: {\n      query: extend(true, defaults, options)\n    }\n  };\n\n  this.makeReq_('POST', '/jobs', null, body, function(err, resp) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    var job = that.job(resp.jobReference.jobId);\n    job.metadata = resp;\n\n    callback(null, job);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "startQuery",
      "string": "BigQuery.prototype.startQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "method",
        "description": "- Action."
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "path",
        "description": "- Request path."
      },
      {
        "type": "param",
        "types": [
          "*"
        ],
        "name": "query",
        "description": "- Request query object."
      },
      {
        "type": "param",
        "types": [
          "*"
        ],
        "name": "body",
        "description": "- Request body contents."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function."
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "BigQuery.prototype.makeReq_ = function(method, path, query, body, callback) {\n  var reqOpts = {\n    method: method,\n    qs: query,\n    uri: BIGQUERY_BASE_URL + this.projectId + path\n  };\n\n  if (body) {\n    reqOpts.json = body;\n  }\n\n  this.connection_.req(reqOpts, function(err, res, body) {\n    util.handleResp(err, res, body, callback);\n  });\n};\n\nmodule.exports = BigQuery;",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "makeReq_",
      "string": "BigQuery.prototype.makeReq_()"
    }
  }
]