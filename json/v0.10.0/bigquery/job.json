{
  "id": "job",
  "metadata": {
    "name": null,
    "description": null
  },
  "methods": [{
    "metadata": {
      "constructor": false,
      "name": "Job",
      "source": "/lib/bigquery/job.js#L52",
      "description": "<p>Job objects are returned from various places in the BigQuery API:</p><ul> <li><a data-custom-type=\"bigquery#getJobs\"></a></li> <li><a data-custom-type=\"bigquery#job\"></a></li> <li><a data-custom-type=\"bigquery#query\"></a></li> <li><a data-custom-type=\"bigquery#startJob\"></a></li> <li><a data-custom-type=\"bigquery/table#copy\"></a></li> <li><a data-custom-type=\"bigquery/table#createWriteStream\"></a></li> <li><a data-custom-type=\"bigquery/table#export\"></a></li> <li><a data-custom-type=\"bigquery/table#import\"></a></li> </ul> <p>They can be used to check the status of a running job or fetching the results of a previously-executed one.</p>",
      "examples": [],
      "resources": []
    },
    "params": [],
    "exceptions": [],
    "returns": []
  }, {
    "metadata": {
      "constructor": false,
      "name": "getMetadata",
      "source": "/lib/bigquery/job.js#L67",
      "description": "<p>Get the metadata of the job. This will mostly be useful for checking the status of a previously-run job.</p>",
      "examples": [{
        "code": "job.getMetadata(function(err, metadata) {});"
      }],
      "resources": []
    },
    "params": [{
      "name": "callback",
      "description": "- The callback function. ",
      "types": ["function"]
    }],
    "exceptions": [],
    "returns": []
  }, {
    "metadata": {
      "constructor": false,
      "name": "getQueryResults",
      "source": "/lib/bigquery/job.js#L127",
      "description": "<p>Get the results of a job.</p>",
      "examples": [{
        "caption": "<p>Use the default options to get the results of a query.</p>",
        "code": "job.getQueryResults(function(err, rows, nextQuery) {});"
      }, {
        "caption": "<p>Customize the results you want to fetch.</p>",
        "code": "var options = {\n  maxResults: 100\n};\n\njob.getQueryResults(options, function(err, rows, nextQuery) {});"
      }, {
        "caption": "<p>Consume the results from the query as a readable stream.</p>",
        "code": "var through2 = require('through2');\n\njob.getQueryResults(options)\n  .pipe(through2.obj(function (row, enc, next) {\n    this.push(JSON.stringify(row) + '\\n');\n  }))\n  .pipe(fs.createWriteStream('./backup.json'));"
      }],
      "resources": []
    },
    "params": [{
      "name": "options",
      "description": "- Configuration object.",
      "types": ["object="]
    }, {
      "name": "options.maxResults",
      "description": "- Maximum number of results to read.",
      "types": ["number"]
    }, {
      "name": "options.pageToken",
      "description": "- Page token, returned by a previous call, to request the next page of results. Note: This is automatically added to the <code>nextQuery</code> argument of your callback.",
      "types": ["string"]
    }, {
      "name": "options.startIndex",
      "description": "- Zero-based index of the starting row.",
      "types": ["number"]
    }, {
      "name": "options.timeoutMs",
      "description": "- How long to wait for the query to complete, in milliseconds, before returning. Default is to return immediately. If the timeout passes before the job completes, the request will fail with a <code>TIMEOUT</code> error.",
      "types": ["number"]
    }, {
      "name": "callback",
      "description": "- The callback function. If you intend to continuously run this query until all results are in as part of a stream, do not pass a callback. ",
      "types": ["function="]
    }],
    "exceptions": [],
    "returns": []
  }]
}