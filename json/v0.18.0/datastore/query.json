{"id":"query","metadata":{"name":"Query","description":null},"methods":[{"metadata":{"constructor":true,"name":"Query","source":"/lib/datastore/query.js#L56","description":"<p>Build a Query object.</p><p><strong>Queries should be built with <a data-custom-type=\"datastore/dataset#createQuery\"></a> and run via <a data-custom-type=\"datastore/dataset#runQuery\"></a>.</strong></p><p><em><a href=\"http://goo.gl/Cag0r6\">More information on queries</a>.</em></p>","examples":[{"code":"var dataset = gcloud.datastore.dataset({\n  projectId: 'grape-spaceship-123'\n});\n\n// If your dataset was scoped to a namespace at initialization, your query\n// will likewise be scoped to that namespace.\nvar query = dataset.createQuery('Lion');\n\n// However, you may override the namespace per query.\nvar query = dataset.createQuery('AnimalNamespace', 'Lion');\n\n// You may also remove the namespace altogether.\nvar query = dataset.createQuery(null, 'Lion');"}],"resources":[]},"params":[{"name":"namespace","description":"<ul> <li>Namespace to query entities from.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"kind","description":"<ul> <li>Kind to query.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"autoPaginate","source":"/lib/datastore/query.js#L81","description":"","examples":[],"resources":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"filter","source":"/lib/datastore/query.js#L110","description":"<p>Datastore allows querying on properties. Supported comparison operators are <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code>. &quot;Not equal&quot; and <code>IN</code> operators are currently not supported.</p><p><em>To filter by ancestors, see <a data-custom-type=\"datastore/query#hasAncestor\"></a>.</em></p><p><em><a href=\"http://goo.gl/ENCx7e\">More information on filtering by properties</a>.</em></p>","examples":[{"code":"// List all companies named Google that have less than 400 employees.\nvar companyQuery = query\n  .filter('name =', 'Google')\n  .filter('size <', 400);\n\n// To filter by key, use `__key__` for the property name. Filter on keys\n// stored as properties is not currently supported.\nvar keyQuery = query.filter('__key__ =', dataset.key(['Company', 'Google']));"}],"resources":[]},"params":[{"name":"filter","description":"<ul> <li>Property + Operator (=, &lt;, &gt;, &lt;=, &gt;=).</li> </ul> ","types":["string"],"optional":false,"nullable":false},{"name":"value","description":"<ul> <li>Value to compare property to.</li> </ul> ","types":[],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"hasAncestor","source":"/lib/datastore/query.js#L137","description":"<p>Filter a query by ancestors.</p><p><em><a href=\"http://goo.gl/1qfpkZ\">More information on filtering by ancestors</a>.</em></p>","examples":[{"code":"var ancestoryQuery = query.hasAncestor(dataset.key(['Parent', 123]));"}],"resources":[]},"params":[{"name":"key","description":"<ul> <li>Key object to filter by.</li> </ul> ","types":["Key"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"order","source":"/lib/datastore/query.js#L159","description":"<p>Sort the results by a property name in ascending or descending order. By default, an ascending sort order will be used.</p><p><em><a href=\"http://goo.gl/mfegFR\">More information on sort orders</a>.</em></p>","examples":[{"code":"// Sort by size ascendingly.\nvar companiesAscending = companyQuery.order('size');\n\n// Sort by size descendingly.\nvar companiesDescending = companyQuery.order('-size');"}],"resources":[]},"params":[{"name":"property","description":"<ul> <li>Optional operator (+, -) and property to order by.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"groupBy","source":"/lib/datastore/query.js#L180","description":"<p>Group query results by a list of properties.</p>","examples":[{"code":"var groupedQuery = companyQuery.groupBy(['name', 'size']);"}],"resources":[]},"params":[{"name":"properties","description":"<ul> <li>Properties to group by.</li> </ul> ","types":["array"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"select","source":"/lib/datastore/query.js#L204","description":"<p>Retrieve only select properties from the matched entities.</p><p>Queries that select a subset of properties are called Projection Queries.</p><p><em><a href=\"http://goo.gl/EfsrJl\">More information on projection queries</a>.</em></p>","examples":[{"code":"// Only retrieve the name property.\nvar selectQuery = companyQuery.select('name');\n\n// Only retrieve the name and size properties.\nvar selectQuery = companyQuery.select(['name', 'size']);"}],"resources":[]},"params":[{"name":"fieldNames","description":"<ul> <li>Properties to return from the matched entities.</li> </ul> ","types":["string","string[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"start","source":"/lib/datastore/query.js#L224","description":"<p>Set a starting cursor to a query.</p><p><em><a href=\"http://goo.gl/WuTGRI\">More information on query cursors</a>.</em></p>","examples":[{"code":"var cursorToken = 'X';\n\n// Retrieve results starting from cursorToken.\nvar startQuery = companyQuery.start(cursorToken);"}],"resources":[]},"params":[{"name":"cursorToken","description":"<ul> <li>The starting cursor token.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"end","source":"/lib/datastore/query.js#L244","description":"<p>Set an ending cursor to a query.</p><p><em><a href=\"http://goo.gl/WuTGRI\">More information on query cursors</a>.</em></p>","examples":[{"code":"var cursorToken = 'X';\n\n// Retrieve results limited to the extent of cursorToken.\nvar endQuery = companyQuery.end(cursorToken);"}],"resources":[]},"params":[{"name":"cursorToken","description":"<ul> <li>The ending cursor token.</li> </ul> ","types":["string"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"limit","source":"/lib/datastore/query.js#L262","description":"<p>Set a limit on a query.</p><p><em><a href=\"http://goo.gl/f0VZ0n\">More information on query limits</a>.</em></p>","examples":[{"code":"// Limit the results to 10 entities.\nvar limitQuery = companyQuery.limit(10);"}],"resources":[]},"params":[{"name":"n","description":"<ul> <li>The number of results to limit the query to.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"offset","source":"/lib/datastore/query.js#L280","description":"<p>Set an offset on a query.</p><p><em><a href=\"http://goo.gl/f0VZ0n\">More information on query offsets</a>.</em></p>","examples":[{"code":"// Start from the 101st result.\nvar offsetQuery = companyQuery.offset(100);"}],"resources":[]},"params":[{"name":"n","description":"<ul> <li>The offset to start from after the start cursor.</li> </ul> ","types":["number"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}