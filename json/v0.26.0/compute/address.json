[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "compute/address",
        "html": "<p>compute/address</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar nodeutil = require('util');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/serviceObject}",
        "types": [
          "module:common/serviceObject"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2FserviceObject.html\">common/serviceObject</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/serviceObject}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 29,
    "code": "var ServiceObject = require('../common/service-object.js');",
    "ctx": {
      "type": "declaration",
      "name": "ServiceObject",
      "value": "require('../common/service-object.js')",
      "string": "ServiceObject"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 31,
    "codeStart": 35,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{module:region} region - Region this address belongs to.",
        "name": "region",
        "description": "<ul>\n<li>Region this address belongs to.</li>\n</ul>\n",
        "types": [
          "module:region"
        ],
        "typesDescription": "module:<a href=\"module%3Aregion.html\">region</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} name - The name of the address.",
        "name": "name",
        "description": "<ul>\n<li>The name of the address.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 37,
    "codeStart": 42
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances and Networks]{@link https://cloud.google.com/compute/docs/instances-and-network}",
        "html": "<p>[Instances and Networks]{@link <a href=\"https://cloud.google.com/compute/docs/instances-and-network}\">https://cloud.google.com/compute/docs/instances-and-network}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Address Resource]{@link https://cloud.google.com/compute/docs/reference/v1/addresses} *",
        "html": "<p>[Address Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/addresses}\">https://cloud.google.com/compute/docs/reference/v1/addresses}</a> *</p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:compute/address",
        "html": "<p>module:compute/address</p>"
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar gce = gcloud.compute();\n\nvar region = gce.region('region-name');\n\nvar address = region.address('address1');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var gce = gcloud.compute();</p><p>var region = gce.region(&#39;region-name&#39;);</p><p>var address = region.address(&#39;address1&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>An Address object allows you to interact with a Google Compute Engine<br />address.</p>",
      "summary": "<p>An Address object allows you to interact with a Google Compute Engine<br />address.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 42,
    "codeStart": 64,
    "code": "function Address(region, name) {\n  var methods = {",
    "ctx": {
      "type": "constructor",
      "name": "Address",
      "string": "Address()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{object=} options - See {module:compute#createAddress}.",
        "name": "options",
        "description": "<ul>\n<li>See {module:compute#createAddress}.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "address.create(function(err, address, operation, apiResponse) {\n  // `address` is an Address object.\n\n  // `operation` is an Operation object that can be used to check the\n  // of the request.\n});",
        "html": "<p>address.create(function(err, address, operation, apiResponse) {<br />  // <code>address</code> is an Address object.</p><p>  // <code>operation</code> is an Operation object that can be used to check the<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Create an address.</p>",
      "summary": "<p>Create an address.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 66,
    "codeStart": 79,
    "code": "create: true,",
    "ctx": {
      "type": "property",
      "name": "create",
      "value": "true,",
      "string": "create"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} callback.exists - Whether the address exists or not.",
        "name": "callback.exists",
        "description": "<ul>\n<li>Whether the address exists or not.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "address.exists(function(err, exists) {});",
        "html": "<p>address.exists(function(err, exists) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Check if the address exists.</p>",
      "summary": "<p>Check if the address exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 81,
    "codeStart": 92,
    "code": "exists: true,",
    "ctx": {
      "type": "property",
      "name": "exists",
      "value": "true,",
      "string": "exists"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{options=} options - Configuration object.",
        "name": "options",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "options"
        ],
        "typesDescription": "<a href=\"options.html\">options</a>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoCreate - Automatically create the object if\n    it does not exist. Default: `false`",
        "name": "options.autoCreate",
        "description": "<ul>\n<li>Automatically create the object if     it does not exist. Default: <code>false</code></li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "address.get(function(err, address, apiResponse) {\n  // `address` is an Address object.\n});",
        "html": "<p>address.get(function(err, address, apiResponse) {<br />  // <code>address</code> is an Address object.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get an address if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an<br />object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is<br />normally required for the <code>create</code> method must be contained within this<br />object as well.</p>",
      "summary": "<p>Get an address if it exists.</p>",
      "body": "<p>You may optionally use this to &quot;get or create&quot; an object by providing an<br />object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is<br />normally required for the <code>create</code> method must be contained within this<br />object as well.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 94,
    "codeStart": 111,
    "code": "get: true,",
    "ctx": {
      "type": "property",
      "name": "get",
      "value": "true,",
      "string": "get"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Address Resource]{@link https://cloud.google.com/compute/docs/reference/v1/addresses}",
        "html": "<p>[Address Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/addresses}\">https://cloud.google.com/compute/docs/reference/v1/addresses}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Addresses: get API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/addresses/get}",
        "html": "<p>[Addresses: get API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/addresses/get}\">https://cloud.google.com/compute/docs/reference/v1/addresses/get}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.metadata - The address's metadata.",
        "name": "callback.metadata",
        "description": "<ul>\n<li>The address&#39;s metadata.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "address.getMetadata(function(err, metadata, apiResponse) {});",
        "html": "<p>address.getMetadata(function(err, metadata, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the metadata of this address.</p>",
      "summary": "<p>Get the metadata of this address.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 113,
    "codeStart": 128,
    "code": "getMetadata: true\n  };\n\n  ServiceObject.call(this, {\nparent: region,\nbaseUrl: '/addresses',\nid: name,\ncreateMethod: region.createAddress.bind(region),\nmethods: methods\n  });\n\n  this.name = name;\n  this.region = region;\n}\n\nnodeutil.inherits(Address, ServiceObject);",
    "ctx": {
      "type": "property",
      "name": "getMetadata",
      "value": "true",
      "string": "getMetadata"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Addresses: delete API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/addresses/delete}",
        "html": "<p>[Addresses: delete API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/addresses/delete}\">https://cloud.google.com/compute/docs/reference/v1/addresses/delete}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "address.delete(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});",
        "html": "<p>address.delete(function(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Delete the address.</p>",
      "summary": "<p>Delete the address.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 145,
    "codeStart": 162,
    "code": "Address.prototype.delete = function(callback) {\n  callback = callback || util.noop;\n\n  var region = this.region;\n\n  this.request({\n    method: 'DELETE',\n    uri: ''\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var operation = region.operation(resp.name);\n    operation.metadata = resp;\n\n    callback(null, operation, resp);\n  });\n};\n\nmodule.exports = Address;",
    "ctx": {
      "type": "method",
      "constructor": "Address",
      "cons": "Address",
      "name": "delete",
      "string": "Address.prototype.delete()"
    }
  }
]