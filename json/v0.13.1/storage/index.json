[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "storage"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar extend = require('extend');"
  },
  {
    "tags": [
      {
        "type": "type",
        "types": [
          "module:storage/bucket"
        ],
        "typesDescription": "module:<a href=\"module%3Astorage%2Fbucket.html\">storage/bucket</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 29,
    "code": "var Bucket = require('./bucket.js');",
    "ctx": {
      "type": "declaration",
      "name": "Bucket",
      "value": "require('./bucket.js')",
      "string": "Bucket"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 31,
    "codeStart": 35,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "string": "{array}"
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Required scopes for Google Cloud Storage API.</p>",
      "summary": "<p>Required scopes for Google Cloud Storage API.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 37,
    "codeStart": 42,
    "code": "var SCOPES = ['https://www.googleapis.com/auth/devstorage.full_control'];\n\n/**\n * @const {string}\n * @private\n */\nvar STORAGE_BASE_URL = 'https://www.googleapis.com/storage/v1/b';",
    "ctx": {
      "type": "declaration",
      "name": "SCOPES",
      "value": "['https://www.googleapis.com/auth/devstorage.full_control']",
      "string": "SCOPES"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "config",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p><p>Invoke this method to create a new Storage object bound with pre-determined<br />configuration options. For each object that can be created (e.g., a bucket),<br />there is an equivalent static and instance method. While they are classes,<br />they can be instantiated without use of the <code>new</code> keyword.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>Invoke this method to create a new Storage object bound with pre-determined<br />configuration options. For each object that can be created (e.g., a bucket),<br />there is an equivalent static and instance method. While they are classes,<br />they can be instantiated without use of the <code>new</code> keyword.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": true,
    "line": 50,
    "codeStart": 59
  },
  {
    "tags": [
      {
        "type": "alias",
        "string": "module:storage"
      },
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud');\n\n//-\n// From Google Compute Engine and Google App Engine.\n//-\n\n// Access `storage` through the `gcloud` module directly.\nvar storage = gcloud.storage();\nvar musicBucket = storage.bucket('music');\n\n//-\n// Elsewhere.\n//-\n\n// Provide configuration details up-front.\nvar myProject = gcloud({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\n// Use default configuration details.\nvar storage = myProject.storage();\nvar albums = storage.bucket('albums');\nvar photos = storage.bucket('photos');\n\n\n// Override default configuration details.\nvar storage = myProject.storage({\n  keyFilename: '/path/to/another/keyfile.json'\n});\nvar records = storage.bucket('records');"
      }
    ],
    "description": {
      "full": "<p>To access your Cloud Storage buckets, you will use the <code>bucket</code> function<br />returned from this <code>storage</code> object.</p><p>The example below will demonstrate the different usage patterns your app may<br />need to connect to <code>gcloud</code> and access your bucket.</p>",
      "summary": "<p>To access your Cloud Storage buckets, you will use the <code>bucket</code> function<br />returned from this <code>storage</code> object.</p>",
      "body": "<p>The example below will demonstrate the different usage patterns your app may<br />need to connect to <code>gcloud</code> and access your bucket.</p>"
    },
    "isPrivate": false,
    "isConstructor": true,
    "isEvent": false,
    "ignore": false,
    "line": 59,
    "codeStart": 102,
    "code": "function Storage(config) {\n  if (!(this instanceof Storage)) {\n    return new Storage(config);\n  }\n\n  this.makeAuthorizedRequest_ = util.makeAuthorizedRequest({\n    credentials: config.credentials,\n    keyFile: config.keyFilename,\n    scopes: SCOPES\n  });\n\n  this.projectId = config.projectId;\n}",
    "ctx": {
      "type": "constructor",
      "name": "Storage",
      "string": "Storage()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var storage = gcloud.storage();\nvar albums = storage.bucket('albums');\n\n//-\n// Make all of the files currently in a bucket publicly readable.\n//-\nalbums.acl.add({\n  scope: 'allUsers',\n  permission: storage.acl.READER_ROLE\n}, function(err, aclObject) {});\n\n//-\n// Make any new objects added to a bucket publicly readable.\n//-\nalbums.acl.default.add({\n  scope: 'allUsers',\n  permission: storage.acl.READER_ROLE\n}, function(err, aclObject) {});\n\n//-\n// Grant a user ownership permissions to a bucket.\n//-\n\nalbums.acl.add({\n  scope: 'user-useremail@example.com',\n  permission: storage.acl.OWNER_ROLE\n}, function(err, aclObject) {});"
      }
    ],
    "description": {
      "full": "<p>Google Cloud Storage uses access control lists (ACLs) to manage object and<br />bucket access. ACLs are the mechanism you use to share objects with other<br />users and allow other users to access your buckets and objects.</p><p>This object provides constants to refer to the three permission levels that<br />can be granted to a scope:</p><ul>\n<li><code>storage.acl.OWNER_ROLE</code> - (&quot;OWNER&quot;)</li>\n<li><code>storage.acl.READER_ROLE</code> - (&quot;READER&quot;)</li>\n<li><code>storage.acl.WRITER_ROLE</code> - (&quot;WRITER&quot;)</li>\n</ul>\n<p>For more detailed information, see<br /><a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p>",
      "summary": "<p>Google Cloud Storage uses access control lists (ACLs) to manage object and<br />bucket access. ACLs are the mechanism you use to share objects with other<br />users and allow other users to access your buckets and objects.</p>",
      "body": "<p>This object provides constants to refer to the three permission levels that<br />can be granted to a scope:</p><ul>\n<li><code>storage.acl.OWNER_ROLE</code> - (&quot;OWNER&quot;)</li>\n<li><code>storage.acl.READER_ROLE</code> - (&quot;READER&quot;)</li>\n<li><code>storage.acl.WRITER_ROLE</code> - (&quot;WRITER&quot;)</li>\n</ul>\n<p>For more detailed information, see<br /><a href=\"http://goo.gl/6qBBPO\">About Access Control Lists</a>.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 116,
    "codeStart": 162,
    "code": "Storage.acl = {\n  OWNER_ROLE: 'OWNER',\n  READER_ROLE: 'READER',\n  WRITER_ROLE: 'WRITER'\n};\n\nStorage.prototype.acl = Storage.acl;",
    "ctx": {
      "type": "property",
      "receiver": "Storage",
      "name": "acl",
      "value": "{",
      "string": "Storage.acl"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing bucket.</li>\n</ul>\n",
        "types": [
          "object",
          "string"
        ],
        "typesDescription": "<code>object</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "module:storage/bucket"
        ],
        "typesDescription": "module:<a href=\"module%3Astorage%2Fbucket.html\">storage/bucket</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar storage = gcloud.storage();\n\nvar albums = storage.bucket('albums');\nvar photos = storage.bucket('photos');"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Cloud Storage bucket.</p>",
      "summary": "<p>Get a reference to a Google Cloud Storage bucket.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 170,
    "codeStart": 186,
    "code": "Storage.prototype.bucket = function(name) {\n  return new Bucket(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Storage",
      "cons": "Storage",
      "name": "bucket",
      "string": "Storage.prototype.bucket()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "<p>If a name is not provided. </p>"
      },
      {
        "type": "param",
        "name": "name",
        "description": "<ul>\n<li>Name of the bucket to create.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "metadata",
        "description": "<ul>\n<li>Metadata to set for the bucket.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "callback",
        "description": "<ul>\n<li>The callback function. </li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "storage.createBucket('new-bucket', function(err, bucket) {\n  // `bucket` is a Bucket object.\n});\n\n// Specifying metadata.\nvar metadata = {\n  mainPageSuffix: '/unknown/',\n  maxAgeSeconds: 90\n};\nstorage.createBucket('new-bucket', metadata, function(err, bucket) {\n  // `bucket` is a Bucket object.\n});"
      }
    ],
    "description": {
      "full": "<p>Create a bucket.</p>",
      "summary": "<p>Create a bucket.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 190,
    "codeStart": 213,
    "code": "Storage.prototype.createBucket = function(name, metadata, callback) {\n  if (!name) {\n    throw new Error('A name is required to create a bucket.');\n  }\n  if (!callback) {\n    callback = metadata;\n    metadata = {};\n  }\n  var query = {\n    project: this.projectId\n  };\n  var body = extend(metadata, {\n    name: name\n  });\n  this.makeReq_('POST', '', query, body, function(err, resp) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    var bucket = this.bucket(name);\n    bucket.metadata = resp;\n    callback(null, bucket);\n  }.bind(this));\n};",
    "ctx": {
      "type": "method",
      "constructor": "Storage",
      "cons": "Storage",
      "name": "createBucket",
      "string": "Storage.prototype.createBucket()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "query",
        "description": "<ul>\n<li>Query object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "query.maxResults",
        "description": "<ul>\n<li>Maximum number of items plus prefixes to     return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "query.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "callback",
        "description": "<ul>\n<li>The callback function. </li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "storage.getBuckets(function(err, buckets, nextQuery) {\n  if (nextQuery) {\n    // nextQuery will be non-null if there are more results.\n    storage.getBuckets(nextQuery, function(err, buckets, nextQuery) {});\n  }\n\n  // The `metadata` property is populated for you with the metadata at the\n  // time of fetching.\n  buckets[0].metadata;\n\n  // However, in cases where you are concerned the metadata could have\n  // changed, use the `getMetadata` method.\n  buckets[0].getMetadata(function(err, metadata) {});\n});\n\n//-\n// Fetch using a query.\n//-\nstorage.getBuckets({\n  maxResults: 5\n}, function(err, buckets, nextQuery) {});"
      }
    ],
    "description": {
      "full": "<p>Get Bucket objects for all of the buckets in your project.</p>",
      "summary": "<p>Get Bucket objects for all of the buckets in your project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 238,
    "codeStart": 271,
    "code": "Storage.prototype.getBuckets = function(query, callback) {\n  var that = this;\n  if (!callback) {\n    callback = query;\n    query = {};\n  }\n  query.project = query.project || this.projectId;\n  this.makeReq_('GET', '', query, null, function(err, resp) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    var buckets = (resp.items || []).map(function(item) {\n      var bucket = that.bucket(item.id);\n      bucket.metadata = item;\n      return bucket;\n    });\n    var nextQuery = null;\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, query, { pageToken: resp.nextPageToken });\n    }\n    callback(null, buckets, nextQuery);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Storage",
      "cons": "Storage",
      "name": "getBuckets",
      "string": "Storage.prototype.getBuckets()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      },
      {
        "type": "param",
        "name": "method",
        "description": "<ul>\n<li>Action.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "path",
        "description": "<ul>\n<li>Request path.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "query",
        "description": "<ul>\n<li>Request query object.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "body",
        "description": "<ul>\n<li>Request body contents.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 296,
    "codeStart": 308,
    "code": "Storage.prototype.makeReq_ = function(method, path, query, body, callback) {\n  var reqOpts = {\n    method: method,\n    qs: query,\n    uri: STORAGE_BASE_URL + path\n  };\n\n  if (body) {\n    reqOpts.json = body;\n  }\n\n  this.makeAuthorizedRequest_(reqOpts, callback);\n};\n\nmodule.exports = Storage;",
    "ctx": {
      "type": "method",
      "constructor": "Storage",
      "cons": "Storage",
      "name": "makeReq_",
      "string": "Storage.prototype.makeReq_()"
    }
  }
]