{"id":"transaction","metadata":{"name":null,"description":null},"methods":[{"metadata":{"constructor":false,"name":"Transaction","source":"/lib/datastore/transaction.js#L62","description":"<p>Build a Transaction object. Transactions will be created for you by <a data-custom-type=\"datastore/dataset\"></a>. When you need to run a transactional operation, use <a data-custom-type=\"datastore/dataset#runInTransaction\"></a>.</p><p><em><a href=\"http://goo.gl/n4oSjt\">Reference</a>.</em></p>","examples":[{"code":"dataset.runInTransaction(function(transaction, done) {\n  // `transaction` is a Transaction object.\n});"}],"resources":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"begin","source":"/lib/datastore/transaction.js#L98","description":"<p>Begin a remote transaction and identify the current transaction instance with the remote transaction&#39;s ID.</p>","examples":[{"code":"transaction.begin(function(err) {\n  // Perform Datastore operations as usual.\n  transaction.get(dataset.key(['Company', 123]), function(err, entity) {\n    // Commit the transaction.\n    transaction.finalize(function(err) {});\n\n    // Rollback the transaction.\n    transaction.rollback(function(err) {});\n  });\n});"}],"resources":[]},"params":[{"name":"callback","description":"- The function to execute within the context of a transaction. ","types":["function"]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"rollback","source":"/lib/datastore/transaction.js#L129","description":"<p>Reverse a transaction remotely and finalize the current transaction instance.</p>","examples":[{"code":"transaction.begin(function(err) {\n  transaction.rollback(function(err) {\n    if (err) {\n      // Transaction could not be rolled back.\n    }\n  });\n});"}],"resources":[]},"params":[{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"commit","source":"/lib/datastore/transaction.js#L155","description":"<p>Commit the remote transaction and finalize the current transaction instance.</p>","examples":[{"code":"transaction.begin(function(err) {\n  transaction.commit(function(err) {\n    if (err) {\n      // Transaction could not be committed.\n    }\n  });\n});"}],"resources":[]},"params":[{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"delete","source":"gcloud-node/lib/datastore/request.js#L309","description":"<p>Delete all entities identified with the specified key(s) in the current transaction.</p>","examples":[{"code":"// Delete a single entity.\ntransaction.delete(dataset.key(['Company', 123]), function(err) {});\n\n// Delete multiple entities at once.\ntransaction.delete([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err) {});"}],"resources":[]},"params":[{"name":"key","description":"- Datastore key object(s). ","types":["Key","Key[]"]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"save","source":"gcloud-node/lib/datastore/request.js#L228","description":"<p>Insert or update the specified object(s) in the current transaction. If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After the transaction is \ncommitted, the Key object held by the <code>key</code> variable will be populated \nwith a path containing its generated ID.</p>","code":"var key = dataset.key('Company');\n\ntransaction.save({\n  key: key,\n  data: {\n    rating: '10'\n  }\n});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data. The above example would then look like:</p>","code":"transaction.save({\n  key: key,\n  data: [\n    {\n      name: 'rating',\n      value: '10',\n      excludeFromIndexes: false\n    }\n  ]\n});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = dataset.key(['Company', 123]);\nvar productKey = dataset.key(['Product', 'Computer']);\n\ntransaction.save([\n  {\n    key: companyKey,\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: productKey,\n    data: {\n      vendor: 'Dell'\n    }\n  }\n]);"}],"resources":[]},"params":[{"name":"entities","description":"- Datastore key object(s).","types":["object","object[]"]},{"name":"entities.key","description":"- Datastore key object.","types":["Key"]},{"name":"entities.data","description":"- Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax: <code>name</code> for the name of the property and <code>value</code> for its value. You may also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>. ","types":["object","object[]"]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"DatastoreRequest","source":"gcloud-node/lib/datastore/request.js#Lundefined","description":"<p>Handle logic for Datastore API operations.</p>","examples":[],"resources":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"get","source":"gcloud-node/lib/datastore/request.js#L107","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or Transaction object.</p>","code":"// Get a single entity.\ntransaction.get(dataset.key(['Company', 123]), function(err, entity) {});\n\n// Get multiple entities at once.\ntransaction.get([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err, entities) {});"}],"resources":[]},"params":[{"name":"keys","description":"- Datastore key object(s).","types":["Key","Key[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"save","source":"gcloud-node/lib/datastore/request.js#L228","description":"<p>Insert or update the specified object(s). If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After saving, the original \nKey object used to save will be updated to contain the path with its \ngenerated ID.</p>","code":"var key = dataset.key('Company');\n\ndataset.save({\n  key: key,\n  data: {\n    rating: '10'\n  }\n}, function(err) {});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data. The above example would then look like:</p>","code":"dataset.save({\n  key: dataset.key('Company'),\n  data: [\n    {\n      name: 'rating',\n      value: '10',\n      excludeFromIndexes: false\n    }\n  ]\n}, function(err) {});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = dataset.key(['Company', 123]);\nvar productKey = dataset.key(['Product', 'Computer']);\n\ndataset.save([\n  {\n    key: companyKey,\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: productKey,\n    data: {\n      vendor: 'Dell'\n    }\n  }\n], function(err) {});"}],"resources":[]},"params":[{"name":"entities","description":"- Datastore key object(s).","types":["object","object[]"]},{"name":"entities.key","description":"- Datastore key object.","types":["Key"]},{"name":"entities.data","description":"- Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax: <code>name</code> for the name of the property and <code>value</code> for its value. You may also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.","types":["object","object[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"delete","source":"gcloud-node/lib/datastore/request.js#L309","description":"<p>Delete all entities identified with the specified key(s).</p>","examples":[{"code":"// Delete a single entity.\ndataset.delete(dataset.key(['Company', 123]), function(err) {});\n\n// Delete multiple entities at once.\ndataset.delete([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err) {});"}],"resources":[]},"params":[{"name":"key","description":"- Datastore key object(s).","types":["Key","Key[]"]},{"name":"callback","description":"- The callback function. ","types":["function"]}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"runQuery","source":"gcloud-node/lib/datastore/request.js#L368","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported.</p><p>If you provide a callback, the query is run, and the results are returned as the second argument to your callback. A third argument will also exist, which is the <code>endCursor</code> of the previously-run query. You can use this to extend the query you just ran to see if more results exist.</p><p>You may also omit the callback to this function to trigger streaming mode.</p><p>See below for examples of both approaches.</p>","examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"// Retrieve 5 companies.\ntransaction.runQuery(queryObject, function(err, entities, endCursor) {\n  // Use `endCursor` as the starting cursor for your next query.\n  var nextQuery = queryObject.start(endCursor);\n  transaction.runQuery(nextQuery, function(err, entities, endCursor) {});\n});"},{"caption":"<p>If you omit the callback, runQuery will automatically call subsequent \nqueries until no results remain. Entity objects will be pushed as they are \nfound.</p>","code":"transaction.runQuery(queryObject)\n  .on('data', function (entity) {});"}],"resources":[]},"params":[{"name":"q","description":"- Query object.","types":["<a data-custom-type=\"datastore\"></a>","query"]},{"name":"callback","description":"- The callback function. If omitted, a readable stream instance is returned. ","types":["function="]}],"exceptions":[],"returns":[]}]}