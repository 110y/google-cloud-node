[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "compute/zone",
        "html": "<p>compute/zone</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar async = require('async');\nvar extend = require('extend');\nvar format = require('string-format-obj');\nvar gceImages = require('gce-images');\nvar is = require('is');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/disk}",
        "types": [
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/disk}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 29,
    "codeStart": 33,
    "code": "var Disk = require('./disk.js');",
    "ctx": {
      "type": "declaration",
      "name": "Disk",
      "value": "require('./disk.js')",
      "string": "Disk"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/operation}",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/operation}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 35,
    "codeStart": 39,
    "code": "var Operation = require('./operation.js');",
    "ctx": {
      "type": "declaration",
      "name": "Operation",
      "value": "require('./operation.js')",
      "string": "Operation"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/streamrouter}",
        "types": [
          "module:common/streamrouter"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fstreamrouter.html\">common/streamrouter</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/streamrouter}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 41,
    "codeStart": 45,
    "code": "var streamRouter = require('../common/stream-router.js');",
    "ctx": {
      "type": "declaration",
      "name": "streamRouter",
      "value": "require('../common/stream-router.js')",
      "string": "streamRouter"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 47,
    "codeStart": 51,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/vm}",
        "types": [
          "module:compute/vm"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fvm.html\">compute/vm</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/vm}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 53,
    "codeStart": 57,
    "code": "var VM = require('./vm.js');",
    "ctx": {
      "type": "declaration",
      "name": "VM",
      "value": "require('./vm.js')",
      "string": "VM"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{module:compute} compute - Compute object this zone belongs to.",
        "name": "compute",
        "description": "<ul>\n<li>Compute object this zone belongs to.</li>\n</ul>\n",
        "types": [
          "module:compute"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute.html\">compute</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} name - Name of the zone.",
        "name": "name",
        "description": "<ul>\n<li>Name of the zone.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 59,
    "codeStart": 64
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Regions & Zones Overview]{@link https://cloud.google.com/compute/docs/zones}",
        "html": "<p>[Regions &amp; Zones Overview]{@link <a href=\"https://cloud.google.com/compute/docs/zones}\">https://cloud.google.com/compute/docs/zones}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Zone Resource]{@link https://cloud.google.com/compute/docs/reference/v1/zones}",
        "html": "<p>[Zone Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zones}\">https://cloud.google.com/compute/docs/reference/v1/zones}</a></p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:compute/zone",
        "html": "<p>module:compute/zone</p>"
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar gce = gcloud.compute();\n\nvar zone = gce.zone('us-central1-a');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var gce = gcloud.compute();</p><p>var zone = gce.zone(&#39;us-central1-a&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>A Zone object allows you to interact with a Google Compute Engine zone.</p>",
      "summary": "<p>A Zone object allows you to interact with a Google Compute Engine zone.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 64,
    "codeStart": 83,
    "code": "function Zone(compute, name) {\n  this.compute = compute;\n  this.name = name;\n  this.metadata = {};\n\n  this.gceImages = gceImages({\n    authClient: compute.makeAuthenticatedRequest_.authClient\n  });\n}",
    "ctx": {
      "type": "constructor",
      "name": "Zone",
      "string": "Zone()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Disk Resource]{@link https://cloud.google.com/compute/docs/reference/v1/disks}",
        "html": "<p>[Disk Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/disks}\">https://cloud.google.com/compute/docs/reference/v1/disks}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Disks: insert API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/disks/insert}",
        "html": "<p>[Disks: insert API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/disks/insert}\">https://cloud.google.com/compute/docs/reference/v1/disks/insert}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the disk.",
        "name": "name",
        "description": "<ul>\n<li>Name of the disk.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} config - See a\n    [Disk resource](https://cloud.google.com/compute/docs/reference/v1/disks).",
        "name": "config",
        "description": "<ul>\n<li>See a     <a href=\"https://cloud.google.com/compute/docs/reference/v1/disks\">Disk resource</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string=} config.os - Specify the name of an OS, and we will use the\n    latest version as the source image of a new boot disk. See\n    [this list of accepted OS names](https://github.com/stephenplusplus/gce-images#accepted-os-names).",
        "name": "config.os",
        "description": "<ul>\n<li>Specify the name of an OS, and we will use the     latest version as the source image of a new boot disk. See<br />  <a href=\"https://github.com/stephenplusplus/gce-images#accepted-os-names\">this list of accepted OS names</a>.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/disk} callback.disk - The created Disk object.",
        "name": "callback.disk",
        "description": "<ul>\n<li>The created Disk object.</li>\n</ul>\n",
        "types": [
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var config = {\n  os: 'ubuntu',\n  sizeGb: 10\n};\n\nzone.createDisk('name', config, function(err, disk, operation, apiResponse) {\n  // `disk` is a Disk object.\n\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});",
        "html": "<p>var config = {<br />  os: &#39;ubuntu&#39;,<br />  sizeGb: 10<br />};</p><p>zone.createDisk(&#39;name&#39;, config, function(err, disk, operation, apiResponse) {<br />  // <code>disk</code> is a Disk object.</p><p>  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Create a persistent disk in this zone.</p>",
      "summary": "<p>Create a persistent disk in this zone.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 93,
    "codeStart": 125,
    "code": "Zone.prototype.createDisk = function(name, config, callback) {\n  var self = this;\n\n  var query = {};\n  var body = extend({}, config, {\n    name: name\n  });\n\n  if (body.image) {\n    query.sourceImage = body.image;\n    delete body.image;\n  }\n\n  if (body.os) {\n    this.gceImages.getLatest(body.os, function(err, image) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      delete body.os;\n      body.sourceImage = image.selfLink;\n\n      self.createDisk(name, body, callback);\n    });\n    return;\n  }\n\n  this.makeReq_('POST', '/disks', query, body, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var disk = self.disk(name);\n\n    var operation = self.operation(resp.name);\n    operation.metadata = resp;\n\n    callback(null, disk, operation, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "createDisk",
      "string": "Zone.prototype.createDisk()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instance Resource]{@link https://cloud.google.com/compute/docs/reference/v1/instances}",
        "html": "<p>[Instance Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances}\">https://cloud.google.com/compute/docs/reference/v1/instances}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Instances: insert API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/insert}",
        "html": "<p>[Instances: insert API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/insert}\">https://cloud.google.com/compute/docs/reference/v1/instances/insert}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the instance.",
        "name": "name",
        "description": "<ul>\n<li>Name of the instance.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} config - See an\n    [Instance resource](https://cloud.google.com/compute/docs/reference/v1/instances).",
        "name": "config",
        "description": "<ul>\n<li>See an     <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances\">Instance resource</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object[]=} config.disks - See a\n    [Disk resource](https://cloud.google.com/compute/docs/reference/v1/disks).",
        "name": "config.disks",
        "description": "<ul>\n<li>See a     <a href=\"https://cloud.google.com/compute/docs/reference/v1/disks\">Disk resource</a>.</li>\n</ul>\n",
        "types": [
          "Array.<object>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>object</code>&gt;|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean=} config.http - Allow HTTP traffic. Default: `false`",
        "name": "config.http",
        "description": "<ul>\n<li>Allow HTTP traffic. Default: <code>false</code></li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean=} config.https - Allow HTTPS traffic. Default: `false`",
        "name": "config.https",
        "description": "<ul>\n<li>Allow HTTPS traffic. Default: <code>false</code></li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object[]=} config.networkInterfaces - An array of configurations for\n    this interface. This specifies how this interface should interact with\n    other network services, such as connecting to the internet. Default:\n    `[ { network: 'global/networks/default' } ]`",
        "name": "config.networkInterfaces",
        "description": "<ul>\n<li>An array of configurations for     this interface. This specifies how this interface should interact with<br />  other network services, such as connecting to the internet. Default:<br />  <code>[ { network: &#39;global/networks/default&#39; } ]</code></li>\n</ul>\n",
        "types": [
          "Array.<object>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>object</code>&gt;|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string=} config.machineType - The machine type resource to use.\n    Provide only the name of the machine, e.g. `n1-standard-16`. Refer to\n    [Available Machine Types](https://goo.gl/jrHEbo). Default:\n    `n1-standard-1`",
        "name": "config.machineType",
        "description": "<ul>\n<li>The machine type resource to use.     Provide only the name of the machine, e.g. <code>n1-standard-16</code>. Refer to<br />  <a href=\"https://goo.gl/jrHEbo\">Available Machine Types</a>. Default:<br />  <code>n1-standard-1</code></li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string=} config.os - Specify the name of an OS, and we will use the\n    latest version as the source image of a new boot disk. See\n    [this list of accepted OS names](https://github.com/stephenplusplus/gce-images#accepted-os-names).",
        "name": "config.os",
        "description": "<ul>\n<li>Specify the name of an OS, and we will use the     latest version as the source image of a new boot disk. See<br />  <a href=\"https://github.com/stephenplusplus/gce-images#accepted-os-names\">this list of accepted OS names</a>.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string[]=} config.tags - An array of tags.",
        "name": "config.tags",
        "description": "<ul>\n<li>An array of tags.</li>\n</ul>\n",
        "types": [
          "Array.<string>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>string</code>&gt;|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/vm} callback.vm - The created VM object.",
        "name": "callback.vm",
        "description": "<ul>\n<li>The created VM object.</li>\n</ul>\n",
        "types": [
          "module:compute/vm"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fvm.html\">compute/vm</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "//-\n// Create a new instance using the latest Debian version as the source image\n// for a new boot disk.\n//-\nvar config = {\n  os: 'debian',\n  http: true,\n  tags: ['debian-server']\n};\n\n//-\n// The above object will auto-expand behind the scenes to something like the\n// following. The Debian version may be different when you run the command.\n//-\nvar config = {\n  machineType: 'n1-standard-1',\n  disks: [\n    {\n      boot: true,\n      initializeParams: {\n        sourceImage:\n          'https://www.googleapis.com/compute/v1/projects' +\n          '/debian-cloud/global/images/debian-7-wheezy-v20150710'\n      }\n    }\n  ],\n  networkInterfaces: [\n    {\n      network: 'global/networks/default'\n    }\n  ],\n  tags: [\n    {\n      items: [\n        'debian-server',\n        'http-server'\n      ]\n    }\n  ]\n};\n\nfunction callback(err, vm, operation, apiResponse) {\n  // `vm` is a VM object.\n\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n}\n\nzone.createVM('new-vm-name', config, callback);",
        "html": "<p>//-<br />// Create a new instance using the latest Debian version as the source image<br />// for a new boot disk.<br />//-<br />var config = {<br />  os: &#39;debian&#39;,<br />  http: true,<br />  tags: [&#39;debian-server&#39;]<br />};</p><p>//-<br />// The above object will auto-expand behind the scenes to something like the<br />// following. The Debian version may be different when you run the command.<br />//-<br />var config = {<br />  machineType: &#39;n1-standard-1&#39;,<br />  disks: [<br />    {<br />      boot: true,<br />      initializeParams: {<br />        sourceImage:<br />          &#39;<a href=\"https://www.googleapis.com/compute/v1/projects\">https://www.googleapis.com/compute/v1/projects</a>&#39; +<br />          &#39;/debian-cloud/global/images/debian-7-wheezy-v20150710&#39;<br />      }<br />    }<br />  ],<br />  networkInterfaces: [<br />    {<br />      network: &#39;global/networks/default&#39;<br />    }<br />  ],<br />  tags: [<br />    {<br />      items: [<br />        &#39;debian-server&#39;,<br />        &#39;http-server&#39;<br />      ]<br />    }<br />  ]<br />};</p><p>function callback(err, vm, operation, apiResponse) {<br />  // <code>vm</code> is a VM object.</p><p>  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />}</p><p>zone.createVM(&#39;new-vm-name&#39;, config, callback);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a virtual machine in this zone.</p>",
      "summary": "<p>Create a virtual machine in this zone.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 168,
    "codeStart": 251,
    "code": "Zone.prototype.createVM = function(name, config, callback) {\n  var self = this;\n\n  var body = extend({\n    name: name,\n    machineType: 'n1-standard-1',\n    networkInterfaces: [\n      {\n        network: 'global/networks/default'\n      }\n    ]\n  }, config);\n\n  if (body.machineType.indexOf('/') === -1) {\n    // The specified machineType is only a partial name, e.g. 'n1-standard-1'.\n    body.machineType = format('zones/{zoneName}/machineTypes/{machineType}', {\n      zoneName: this.name,\n      machineType: body.machineType\n    });\n  }\n\n  if (is.array(body.tags)) {\n    body.tags = {\n      items: body.tags\n    };\n  }\n\n  if (body.http || body.https) {\n    // We will add tags to the created instance (http-server and/or\n    // https-server), and create the appropriate firewall rules to allow\n    // connections on the necessary ports to these tags.\n    var createFirewallMethods = [];\n\n    body.networkInterfaces[0].accessConfigs = [\n      {\n        type: 'ONE_TO_ONE_NAT'\n      }\n    ];\n\n    body.tags = body.tags || {};\n    body.tags.items = body.tags.items || [];\n\n    if (body.http) {\n      delete body.http;\n\n      createFirewallMethods.push(this.createHttpServerFirewall_.bind(this));\n\n      if (body.tags.items.indexOf('http-server') === -1) {\n        body.tags.items.push('http-server');\n      }\n    }\n\n    if (body.https) {\n      delete body.https;\n\n      createFirewallMethods.push(this.createHttpsServerFirewall_.bind(this));\n\n      if (body.tags.items.indexOf('https-server') === -1) {\n        body.tags.items.push('https-server');\n      }\n    }\n\n    // We have to make sure the firewall rules exist to allow HTTP/S traffic.\n    async.parallel(createFirewallMethods, function(err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      self.createVM(name, body, callback);\n    });\n\n    return;\n  }\n\n  if (body.os) {\n    this.gceImages.getLatest(body.os, function(err, image) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      delete body.os;\n      body.disks = body.disks || [];\n      body.disks.push({\n        boot: true,\n        initializeParams: {\n          sourceImage: image.selfLink\n        }\n      });\n\n      self.createVM(name, body, callback);\n    });\n\n    return;\n  }\n\n  this.makeReq_('POST', '/instances', null, body, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var vm = self.vm(name);\n\n    var operation = self.operation(resp.name);\n    operation.metadata = resp;\n\n    callback(null, vm, operation, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "createVM",
      "string": "Zone.prototype.createVM()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Disks Overview]{@link https://cloud.google.com/compute/docs/disks}",
        "html": "<p>[Disks Overview]{@link <a href=\"https://cloud.google.com/compute/docs/disks}\">https://cloud.google.com/compute/docs/disks}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing disk.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing disk.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/disk}",
        "types": [
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/disk}</p>"
      },
      {
        "type": "example",
        "string": "var disk = zone.disk('disk1');",
        "html": "<p>var disk = zone.disk(&#39;disk1&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Compute Engine disk in this zone.</p>",
      "summary": "<p>Get a reference to a Google Compute Engine disk in this zone.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 363,
    "codeStart": 374,
    "code": "Zone.prototype.disk = function(name) {\n  return new Disk(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "disk",
      "string": "Zone.prototype.disk()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Disks Overview]{@link https://cloud.google.com/compute/docs/disks}",
        "html": "<p>[Disks Overview]{@link <a href=\"https://cloud.google.com/compute/docs/disks}\">https://cloud.google.com/compute/docs/disks}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Disks: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/disks/list}",
        "html": "<p>[Disks: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/disks/list}\">https://cloud.google.com/compute/docs/reference/v1/disks/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Disk search options.",
        "name": "options",
        "description": "<ul>\n<li>Disk search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of disks to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of disks to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/disk} callback.disks - Disk objects from this zone.",
        "name": "callback.disks",
        "description": "<ul>\n<li>Disk objects from this zone.</li>\n</ul>\n",
        "types": [
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "zone.getDisks(function(err, disks) {\n  // `disks` is an array of `Disk` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, disks, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    zone.getDisks(nextQuery, callback);\n  }\n}\n\nzone.getDisks({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the disks from your project as a readable object stream.\n//-\nzone.getDisks()\n  .on('error', console.error)\n  .on('data', function(disk) {\n    // `disk` is a `Disk` object.\n  })\n  .on('end', function() {\n    // All disks retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\nzone.getDisks()\n  .on('data', function(disk) {\n    this.end();\n  });",
        "html": "<p>zone.getDisks(function(err, disks) {<br />  // <code>disks</code> is an array of <code>Disk</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, disks, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    zone.getDisks(nextQuery, callback);<br />  }<br />}</p><p>zone.getDisks({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the disks from your project as a readable object stream.<br />//-<br />zone.getDisks()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(disk) {<br />    // <code>disk</code> is a <code>Disk</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All disks retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />zone.getDisks()<br />  .on(&#39;data&#39;, function(disk) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of disks in this zone.</p>",
      "summary": "<p>Get a list of disks in this zone.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 378,
    "codeStart": 445,
    "code": "Zone.prototype.getDisks = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  this.makeReq_('GET', '/disks', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var disks = (resp.items || []).map(function(disk) {\n      var diskInstance = self.disk(disk.name);\n      diskInstance.metadata = disk;\n      return diskInstance;\n    });\n\n    callback(null, disks, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "getDisks",
      "string": "Zone.prototype.getDisks()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Zone Resource]{@link https://cloud.google.com/compute/docs/reference/v1/zones}",
        "html": "<p>[Zone Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zones}\">https://cloud.google.com/compute/docs/reference/v1/zones}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Zones: get API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/zones/get}",
        "html": "<p>[Zones: get API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zones/get}\">https://cloud.google.com/compute/docs/reference/v1/zones/get}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.metadata - The zone's metadata.",
        "name": "callback.metadata",
        "description": "<ul>\n<li>The zone&#39;s metadata.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "zone.getMetadata(function(err, metadata, apiResponse) {});",
        "html": "<p>zone.getMetadata(function(err, metadata, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the zone&#39;s metadata.</p>",
      "summary": "<p>Get the zone&#39;s metadata.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 479,
    "codeStart": 493,
    "code": "Zone.prototype.getMetadata = function(callback) {\n  var self = this;\n\n  callback = callback || util.noop;\n\n  this.makeReq_('GET', '', null, null, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    self.metadata = resp;\n\n    callback(null, self.metadata, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "getMetadata",
      "string": "Zone.prototype.getMetadata()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Zone Operation Overview]{@link https://cloud.google.com/compute/docs/reference/v1/zoneOperations}",
        "html": "<p>[Zone Operation Overview]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zoneOperations}\">https://cloud.google.com/compute/docs/reference/v1/zoneOperations}</a></p>"
      },
      {
        "type": "resource",
        "string": "[ZoneOperations: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/zoneOperations/list}",
        "html": "<p>[ZoneOperations: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zoneOperations/list}\">https://cloud.google.com/compute/docs/reference/v1/zoneOperations/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Operation search options.",
        "name": "options",
        "description": "<ul>\n<li>Operation search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of operations to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of operations to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operations - Operation objects\n    from this zone.",
        "name": "callback.operations",
        "description": "<ul>\n<li>Operation objects     from this zone.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "zone.getOperations(function(err, operations) {\n  // `operations` is an array of `Operation` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, operations, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    zone.getOperations(nextQuery, callback);\n  }\n}\n\nzone.getOperations({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the operations from your project as a readable object stream.\n//-\nzone.getOperations()\n  .on('error', console.error)\n  .on('data', function(operation) {\n    // `operation` is an `Operation` object.\n  })\n  .on('end', function() {\n    // All operations retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\nzone.getOperations()\n  .on('data', function(operation) {\n    this.end();\n  });",
        "html": "<p>zone.getOperations(function(err, operations) {<br />  // <code>operations</code> is an array of <code>Operation</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, operations, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    zone.getOperations(nextQuery, callback);<br />  }<br />}</p><p>zone.getOperations({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the operations from your project as a readable object stream.<br />//-<br />zone.getOperations()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(operation) {<br />    // <code>operation</code> is an <code>Operation</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All operations retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />zone.getOperations()<br />  .on(&#39;data&#39;, function(operation) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of operations for this zone.</p>",
      "summary": "<p>Get a list of operations for this zone.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 510,
    "codeStart": 578,
    "code": "Zone.prototype.getOperations = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  this.makeReq_('GET', '/operations', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var operations = (resp.items || []).map(function(operation) {\n      var operationInstance = self.operation(operation.name);\n      operationInstance.metadata = operation;\n      return operationInstance;\n    });\n\n    callback(null, operations, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "getOperations",
      "string": "Zone.prototype.getOperations()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances and Networks]{@link https://cloud.google.com/compute/docs/instances-and-network}",
        "html": "<p>[Instances and Networks]{@link <a href=\"https://cloud.google.com/compute/docs/instances-and-network}\">https://cloud.google.com/compute/docs/instances-and-network}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Instances: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/list}",
        "html": "<p>[Instances: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/list}\">https://cloud.google.com/compute/docs/reference/v1/instances/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Instance search options.",
        "name": "options",
        "description": "<ul>\n<li>Instance search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/vm} callback.vms - VM objects from this zone.",
        "name": "callback.vms",
        "description": "<ul>\n<li>VM objects from this zone.</li>\n</ul>\n",
        "types": [
          "module:compute/vm"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fvm.html\">compute/vm</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "zone.getVMs(function(err, vms) {\n  // `vms` is an array of `VM` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, vms, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    zone.getVMs(nextQuery, callback);\n  }\n}\n\nzone.getVMs({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the VM instances from your project as a readable object stream.\n//-\nzone.getVMs()\n  .on('error', console.error)\n  .on('data', function(vm) {\n    // `vm` is a `VM` object.\n  })\n  .on('end', function() {\n    // All instances retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\nzone.getVMs()\n  .on('data', function(vm) {\n    this.end();\n  });",
        "html": "<p>zone.getVMs(function(err, vms) {<br />  // <code>vms</code> is an array of <code>VM</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, vms, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    zone.getVMs(nextQuery, callback);<br />  }<br />}</p><p>zone.getVMs({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the VM instances from your project as a readable object stream.<br />//-<br />zone.getVMs()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(vm) {<br />    // <code>vm</code> is a <code>VM</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All instances retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />zone.getVMs()<br />  .on(&#39;data&#39;, function(vm) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of VM instances in this zone.</p>",
      "summary": "<p>Get a list of VM instances in this zone.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 612,
    "codeStart": 678,
    "code": "Zone.prototype.getVMs = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  this.makeReq_('GET', '/instances', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var vms = (resp.items || []).map(function(instance) {\n      var vmInstance = self.vm(instance.name);\n      vmInstance.metadata = instance;\n      return vmInstance;\n    });\n\n    callback(null, vms, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "getVMs",
      "string": "Zone.prototype.getVMs()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Zone Operation Overview]{@link https://cloud.google.com/compute/docs/reference/v1/zoneOperations}",
        "html": "<p>[Zone Operation Overview]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zoneOperations}\">https://cloud.google.com/compute/docs/reference/v1/zoneOperations}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing operation.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing operation.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/operation}",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/operation}</p>"
      },
      {
        "type": "example",
        "string": "var operation = zone.operation('operation-name');",
        "html": "<p>var operation = zone.operation(&#39;operation-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Compute Engine zone operation.</p>",
      "summary": "<p>Get a reference to a Google Compute Engine zone operation.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 712,
    "codeStart": 723,
    "code": "Zone.prototype.operation = function(name) {\n  return new Operation(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "operation",
      "string": "Zone.prototype.operation()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances and Networks]{@link https://cloud.google.com/compute/docs/instances-and-network}",
        "html": "<p>[Instances and Networks]{@link <a href=\"https://cloud.google.com/compute/docs/instances-and-network}\">https://cloud.google.com/compute/docs/instances-and-network}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing virtual machine.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing virtual machine.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/vm}",
        "types": [
          "module:compute/vm"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fvm.html\">compute/vm</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/vm}</p>"
      },
      {
        "type": "example",
        "string": "var vm = zone.vm('vm-name');",
        "html": "<p>var vm = zone.vm(&#39;vm-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Compute Engine virtual machine instance.</p>",
      "summary": "<p>Get a reference to a Google Compute Engine virtual machine instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 727,
    "codeStart": 738,
    "code": "Zone.prototype.vm = function(name) {\n  return new VM(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "vm",
      "string": "Zone.prototype.vm()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - If the firewall couldn't be created and it\n    didn't already exist.",
        "name": "callback.err",
        "description": "<ul>\n<li>If the firewall couldn&#39;t be created and it     didn&#39;t already exist.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>This method attempts to create a firewall rule to allow tcp:80 connections.</p>",
      "summary": "<p>This method attempts to create a firewall rule to allow tcp:80 connections.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 742,
    "codeStart": 749,
    "code": "Zone.prototype.createHttpServerFirewall_ = function(callback) {\n  this.compute.createFirewall('default-allow-http', {\n    protocols: {\n      tcp: [80]\n    },\n    ranges: ['0.0.0.0/0'],\n    tags: ['http-server']\n  }, function(err) {\n    // If it already exists, we're all good.\n    callback(err && err.code !== 409 ? err : null);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "createHttpServerFirewall_",
      "string": "Zone.prototype.createHttpServerFirewall_()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - If the firewall couldn't be created and it\n    didn't already exist.",
        "name": "callback.err",
        "description": "<ul>\n<li>If the firewall couldn&#39;t be created and it     didn&#39;t already exist.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>This method attempts to create a firewall rule to allow tcp:443 connections.</p>",
      "summary": "<p>This method attempts to create a firewall rule to allow tcp:443 connections.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 762,
    "codeStart": 769,
    "code": "Zone.prototype.createHttpsServerFirewall_ = function(callback) {\n  this.compute.createFirewall('default-allow-https', {\n    protocols: {\n      tcp: [443]\n    },\n    ranges: ['0.0.0.0/0'],\n    tags: ['https-server']\n  }, function(err) {\n    // If it already exists, we're all good.\n    callback(err && err.code !== 409 ? err : null);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "createHttpsServerFirewall_",
      "string": "Zone.prototype.createHttpsServerFirewall_()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} method - Action.",
        "name": "method",
        "description": "<ul>\n<li>Action.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} path - Request path.",
        "name": "path",
        "description": "<ul>\n<li>Request path.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} query - Request query object.",
        "name": "query",
        "description": "<ul>\n<li>Request query object.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} body - Request body contents.",
        "name": "body",
        "description": "<ul>\n<li>Request body contents.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 782,
    "codeStart": 794,
    "code": "Zone.prototype.makeReq_ = function(method, path, query, body, callback) {\n  path = '/zones/' + this.name + path;\n  this.compute.makeReq_(method, path, query, body, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Zone",
      "cons": "Zone",
      "name": "makeReq_",
      "string": "Zone.prototype.makeReq_()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Developer Documentation</p><p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 799,
    "codeStart": 804,
    "code": "streamRouter.extend(Zone, ['getDisks', 'getOperations', 'getVMs']);\n\nmodule.exports = Zone;",
    "ctx": false
  }
]