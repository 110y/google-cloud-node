[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "datastore/query",
        "html": "<p>datastore/query</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar arrify = require('arrify');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datastore Queries]{@link http://goo.gl/Cag0r6}",
        "html": "<p>[Datastore Queries]{@link <a href=\"http://goo.gl/Cag0r6}\">http://goo.gl/Cag0r6}</a></p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:datastore/query",
        "html": "<p>module:datastore/query</p>"
      },
      {
        "type": "param",
        "string": "{string=} namespace - Namespace to query entities from.",
        "name": "namespace",
        "description": "<ul>\n<li>Namespace to query entities from.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} kind - Kind to query.",
        "name": "kind",
        "description": "<ul>\n<li>Kind to query.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var dataset = gcloud.datastore.dataset({\n  projectId: 'grape-spaceship-123'\n});\n\n// If your dataset was scoped to a namespace at initialization, your query\n// will likewise be scoped to that namespace.\nvar query = dataset.createQuery('Lion');\n\n// However, you may override the namespace per query.\nvar query = dataset.createQuery('AnimalNamespace', 'Lion');\n\n// You may also remove the namespace altogether.\nvar query = dataset.createQuery(null, 'Lion');",
        "html": "<p>var dataset = gcloud.datastore.dataset({<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>// If your dataset was scoped to a namespace at initialization, your query<br />// will likewise be scoped to that namespace.<br />var query = dataset.createQuery(&#39;Lion&#39;);</p><p>// However, you may override the namespace per query.<br />var query = dataset.createQuery(&#39;AnimalNamespace&#39;, &#39;Lion&#39;);</p><p>// You may also remove the namespace altogether.<br />var query = dataset.createQuery(null, &#39;Lion&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Build a Query object.</p><p><strong>Queries should be built with<br />{@linkcode module:datastore/dataset#createQuery} and run via<br />{@linkcode module:datastore/dataset#runQuery}.</strong></p>",
      "summary": "<p>Build a Query object.</p>",
      "body": "<p><strong>Queries should be built with<br />{@linkcode module:datastore/dataset#createQuery} and run via<br />{@linkcode module:datastore/dataset#runQuery}.</strong></p>"
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 55,
    "code": "function Query(namespace, kinds) {\n  if (!kinds) {\n    kinds = namespace;\n    namespace = null;\n  }\n\n  this.namespace = namespace || null;\n  this.kinds = kinds;\n\n  this.filters = [];\n  this.orders = [];\n  this.groupByVal = [];\n  this.selectVal = [];\n\n  // pagination\n  this.autoPaginateVal = true;\n  this.startVal = null;\n  this.endVal = null;\n  this.limitVal = -1;\n  this.offsetVal = -1;\n}",
    "ctx": {
      "type": "constructor",
      "name": "Query",
      "string": "Query()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{boolean=} autoPaginateVal - Have pagination handled automatically.\n    Default: true.",
        "name": "autoPaginateVal",
        "description": "<ul>\n<li>Have pagination handled automatically.     Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "// Retrieve a list of people related to person \"1234\",\n// disabling auto pagination\nvar query = dataset.createQuery('Person')\n  .hasAncestor(dataset.key(['Person', 1234]))\n  .autoPaginate(false);\n\nvar callback = function(err, entities, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results might exist, so we'll manually fetch them\n    dataset.runQuery(nextQuery, callback);\n  }\n};\n\ndataset.runQuery(query, callback);",
        "html": "<p>// Retrieve a list of people related to person &quot;1234&quot;,<br />// disabling auto pagination<br />var query = dataset.createQuery(&#39;Person&#39;)<br />  .hasAncestor(dataset.key([&#39;Person&#39;, 1234]))<br />  .autoPaginate(false);</p><p>var callback = function(err, entities, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results might exist, so we&#39;ll manually fetch them<br />    dataset.runQuery(nextQuery, callback);<br />  }<br />};</p><p>dataset.runQuery(query, callback);</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 77,
    "codeStart": 98,
    "code": "Query.prototype.autoPaginate = function(autoPaginateVal) {\n  this.autoPaginateVal = autoPaginateVal !== false;\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "autoPaginate",
      "string": "Query.prototype.autoPaginate()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datastore Filters]{@link https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Filters}",
        "html": "<p>[Datastore Filters]{@link <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Filters}\">https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Filters}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} filter - Property + Operator (=, <, >, <=, >=).",
        "name": "filter",
        "description": "<ul>\n<li>Property + Operator (=, &lt;, &gt;, &lt;=, &gt;=).</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} value - Value to compare property to.",
        "name": "value",
        "description": "<ul>\n<li>Value to compare property to.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "// List all companies named Google that have less than 400 employees.\nvar companyQuery = query\n  .filter('name =', 'Google')\n  .filter('size <', 400);\n\n// To filter by key, use `__key__` for the property name. Filter on keys\n// stored as properties is not currently supported.\nvar keyQuery = query.filter('__key__ =', dataset.key(['Company', 'Google']));",
        "html": "<p>// List all companies named Google that have less than 400 employees.<br />var companyQuery = query<br />  .filter(&#39;name =&#39;, &#39;Google&#39;)<br />  .filter(&#39;size &lt;&#39;, 400);</p><p>// To filter by key, use <code>__key__</code> for the property name. Filter on keys<br />// stored as properties is not currently supported.<br />var keyQuery = query.filter(&#39;<strong>key</strong> =&#39;, dataset.key([&#39;Company&#39;, &#39;Google&#39;]));</p>"
      }
    ],
    "description": {
      "full": "<p>Datastore allows querying on properties. Supported comparison operators<br />are <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code>. &quot;Not equal&quot; and <code>IN</code> operators are<br />currently not supported.</p><p><em>To filter by ancestors, see {@linkcode module:datastore/query#hasAncestor}.</em></p>",
      "summary": "<p>Datastore allows querying on properties. Supported comparison operators<br />are <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code>. &quot;Not equal&quot; and <code>IN</code> operators are<br />currently not supported.</p>",
      "body": "<p><em>To filter by ancestors, see {@linkcode module:datastore/query#hasAncestor}.</em></p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 103,
    "codeStart": 126,
    "code": "Query.prototype.filter = function(filter, value) {\n  // TODO: Add filter validation.\n  var operatorRegex = /[><=]/g;\n  filter = filter.trim();\n  var fieldName = filter.replace(operatorRegex, '').trim();\n  var op = filter.substr(fieldName.length, filter.length).trim();\n  this.filters.push({\n    name: fieldName,\n    op: op,\n    val: value\n  });\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "filter",
      "string": "Query.prototype.filter()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datastore Ancestor Filters]{@link https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Ancestor_filters}",
        "html": "<p>[Datastore Ancestor Filters]{@link <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Ancestor_filters}\">https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Ancestor_filters}</a></p>"
      },
      {
        "type": "param",
        "string": "{Key} key - Key object to filter by.",
        "name": "key",
        "description": "<ul>\n<li>Key object to filter by.</li>\n</ul>\n",
        "types": [
          "Key"
        ],
        "typesDescription": "<a href=\"Key.html\">Key</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "var ancestoryQuery = query.hasAncestor(dataset.key(['Parent', 123]));",
        "html": "<p>var ancestoryQuery = query.hasAncestor(dataset.key([&#39;Parent&#39;, 123]));</p>"
      }
    ],
    "description": {
      "full": "<p>Filter a query by ancestors.</p>",
      "summary": "<p>Filter a query by ancestors.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 140,
    "codeStart": 151,
    "code": "Query.prototype.hasAncestor = function(key) {\n  this.filters.push({ name: '__key__', op: 'HAS_ANCESTOR', val: key });\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "hasAncestor",
      "string": "Query.prototype.hasAncestor()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datastore Sort Orders]{@link https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Sort_orders}",
        "html": "<p>[Datastore Sort Orders]{@link <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Sort_orders}\">https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Sort_orders}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} property - Optional operator (+, -) and property to order by.",
        "name": "property",
        "description": "<ul>\n<li>Optional operator (+, -) and property to order by.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "// Sort by size ascendingly.\nvar companiesAscending = companyQuery.order('size');\n\n// Sort by size descendingly.\nvar companiesDescending = companyQuery.order('-size');",
        "html": "<p>// Sort by size ascendingly.<br />var companiesAscending = companyQuery.order(&#39;size&#39;);</p><p>// Sort by size descendingly.<br />var companiesDescending = companyQuery.order(&#39;-size&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Sort the results by a property name in ascending or descending order. By<br />default, an ascending sort order will be used.</p>",
      "summary": "<p>Sort the results by a property name in ascending or descending order. By<br />default, an ascending sort order will be used.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 156,
    "codeStart": 172,
    "code": "Query.prototype.order = function(property) {\n  var sign = '+';\n  if (property[0] === '-' || property[0] === '+') {\n    sign = property[0];\n    property = property.substr(1);\n  }\n  this.orders.push({ name: property, sign: sign });\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "order",
      "string": "Query.prototype.order()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{array} properties - Properties to group by.",
        "name": "properties",
        "description": "<ul>\n<li>Properties to group by.</li>\n</ul>\n",
        "types": [
          "array"
        ],
        "typesDescription": "<code>array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "var groupedQuery = companyQuery.groupBy(['name', 'size']);",
        "html": "<p>var groupedQuery = companyQuery.groupBy([&#39;name&#39;, &#39;size&#39;]);</p>"
      }
    ],
    "description": {
      "full": "<p>Group query results by a list of properties.</p>",
      "summary": "<p>Group query results by a list of properties.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 182,
    "codeStart": 191,
    "code": "Query.prototype.groupBy = function(fieldNames) {\n  this.groupByVal = arrify(fieldNames);\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "groupBy",
      "string": "Query.prototype.groupBy()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Projection Queries]{@link https://cloud.google.com/datastore/docs/concepts/projectionqueries}",
        "html": "<p>[Projection Queries]{@link <a href=\"https://cloud.google.com/datastore/docs/concepts/projectionqueries}\">https://cloud.google.com/datastore/docs/concepts/projectionqueries}</a></p>"
      },
      {
        "type": "param",
        "string": "{string|string[]} fieldNames - Properties to return from the matched\n    entities.",
        "name": "fieldNames",
        "description": "<ul>\n<li>Properties to return from the matched     entities.</li>\n</ul>\n",
        "types": [
          "string",
          "Array.<string>"
        ],
        "typesDescription": "<code>string</code>|<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "// Only retrieve the name property.\nvar selectQuery = companyQuery.select('name');\n\n// Only retrieve the name and size properties.\nvar selectQuery = companyQuery.select(['name', 'size']);",
        "html": "<p>// Only retrieve the name property.<br />var selectQuery = companyQuery.select(&#39;name&#39;);</p><p>// Only retrieve the name and size properties.<br />var selectQuery = companyQuery.select([&#39;name&#39;, &#39;size&#39;]);</p>"
      }
    ],
    "description": {
      "full": "<p>Retrieve only select properties from the matched entities.</p><p>Queries that select a subset of properties are called Projection Queries.</p>",
      "summary": "<p>Retrieve only select properties from the matched entities.</p>",
      "body": "<p>Queries that select a subset of properties are called Projection Queries.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 196,
    "codeStart": 214,
    "code": "Query.prototype.select = function(fieldNames) {\n  this.selectVal = arrify(fieldNames);\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "select",
      "string": "Query.prototype.select()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Query Cursors]{@link https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Query_cursors}",
        "html": "<p>[Query Cursors]{@link <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Query_cursors}\">https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Query_cursors}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} cursorToken - The starting cursor token.",
        "name": "cursorToken",
        "description": "<ul>\n<li>The starting cursor token.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "var cursorToken = 'X';\n\n// Retrieve results starting from cursorToken.\nvar startQuery = companyQuery.start(cursorToken);",
        "html": "<p>var cursorToken = &#39;X&#39;;</p><p>// Retrieve results starting from cursorToken.<br />var startQuery = companyQuery.start(cursorToken);</p>"
      }
    ],
    "description": {
      "full": "<p>Set a starting cursor to a query.</p>",
      "summary": "<p>Set a starting cursor to a query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 219,
    "codeStart": 233,
    "code": "Query.prototype.start = function(start) {\n  this.startVal = start;\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "start",
      "string": "Query.prototype.start()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Query Cursors]{@link https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Query_cursors}",
        "html": "<p>[Query Cursors]{@link <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Query_cursors}\">https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Query_cursors}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} cursorToken - The ending cursor token.",
        "name": "cursorToken",
        "description": "<ul>\n<li>The ending cursor token.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "var cursorToken = 'X';\n\n// Retrieve results limited to the extent of cursorToken.\nvar endQuery = companyQuery.end(cursorToken);",
        "html": "<p>var cursorToken = &#39;X&#39;;</p><p>// Retrieve results limited to the extent of cursorToken.<br />var endQuery = companyQuery.end(cursorToken);</p>"
      }
    ],
    "description": {
      "full": "<p>Set an ending cursor to a query.</p>",
      "summary": "<p>Set an ending cursor to a query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 238,
    "codeStart": 252,
    "code": "Query.prototype.end = function(end) {\n  this.endVal = end;\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "end",
      "string": "Query.prototype.end()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Query Limits]{@link https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Retrieving_results}",
        "html": "<p>[Query Limits]{@link <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Retrieving_results}\">https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Retrieving_results}</a></p>"
      },
      {
        "type": "param",
        "string": "{number} n - The number of results to limit the query to.",
        "name": "n",
        "description": "<ul>\n<li>The number of results to limit the query to.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "// Limit the results to 10 entities.\nvar limitQuery = companyQuery.limit(10);",
        "html": "<p>// Limit the results to 10 entities.<br />var limitQuery = companyQuery.limit(10);</p>"
      }
    ],
    "description": {
      "full": "<p>Set a limit on a query.</p>",
      "summary": "<p>Set a limit on a query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 257,
    "codeStart": 269,
    "code": "Query.prototype.limit = function(n) {\n  this.limitVal = n;\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "limit",
      "string": "Query.prototype.limit()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Query Offsets]{@link https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Retrieving_results}",
        "html": "<p>[Query Offsets]{@link <a href=\"https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Retrieving_results}\">https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Retrieving_results}</a></p>"
      },
      {
        "type": "param",
        "string": "{number} n - The offset to start from after the start cursor.",
        "name": "n",
        "description": "<ul>\n<li>The offset to start from after the start cursor.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "example",
        "string": "// Start from the 101st result.\nvar offsetQuery = companyQuery.offset(100);",
        "html": "<p>// Start from the 101st result.<br />var offsetQuery = companyQuery.offset(100);</p>"
      }
    ],
    "description": {
      "full": "<p>Set an offset on a query.</p>",
      "summary": "<p>Set an offset on a query.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 274,
    "codeStart": 286,
    "code": "Query.prototype.offset = function(n) {\n  this.offsetVal = n;\n  return this;\n};\n\nmodule.exports = Query;",
    "ctx": {
      "type": "method",
      "constructor": "Query",
      "cons": "Query",
      "name": "offset",
      "string": "Query.prototype.offset()"
    }
  }
]