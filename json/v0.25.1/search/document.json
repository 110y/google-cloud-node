[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "search/document",
        "html": "<p>search/document</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar is = require('is');\nvar nodeutil = require('util');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:search/field}",
        "types": [
          "module:search/field"
        ],
        "typesDescription": "module:<a href=\"module%3Asearch%2Ffield.html\">search/field</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:search/field}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 26,
    "codeStart": 30,
    "code": "var Field = require('./field.js');",
    "ctx": {
      "type": "declaration",
      "name": "Field",
      "value": "require('./field.js')",
      "string": "Field"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/serviceObject}",
        "types": [
          "module:common/serviceObject"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2FserviceObject.html\">common/serviceObject</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/serviceObject}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 32,
    "codeStart": 36,
    "code": "var ServiceObject = require('../common/service-object.js');",
    "ctx": {
      "type": "declaration",
      "name": "ServiceObject",
      "value": "require('../common/service-object.js')",
      "string": "ServiceObject"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 38,
    "codeStart": 42,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:search/document",
        "html": "<p>module:search/document</p>"
      },
      {
        "type": "param",
        "string": "{string=} id - ID of the document.",
        "name": "id",
        "description": "<ul>\n<li>ID of the document.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud');\n\nvar search = gcloud.search({\n  projectId: 'grape-spaceship-123'\n});\n\nvar document = search.index('records').document('stephen');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;);</p><p>var search = gcloud.search({<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var document = search.index(&#39;records&#39;).document(&#39;stephen&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a Document object to create or manipulate a document from your index.</p>",
      "summary": "<p>Create a Document object to create or manipulate a document from your index.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 44,
    "codeStart": 61,
    "code": "function Document(index, id) {\n  var methods = {",
    "ctx": {
      "type": "constructor",
      "name": "Document",
      "string": "Document()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Documents: delete API Documentation]{@link https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents/delete}",
        "html": "<p>[Documents: delete API Documentation]{@link <a href=\"https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents/delete}\">https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents/delete}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "document.delete(function(err, apiResponse) {});",
        "html": "<p>document.delete(function(err, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Delete this document.</p>",
      "summary": "<p>Delete this document.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 63,
    "codeStart": 76,
    "code": "delete: true,",
    "ctx": {
      "type": "property",
      "name": "delete",
      "value": "true,",
      "string": "delete"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} callback.exists - Whether the zone exists or not.",
        "name": "callback.exists",
        "description": "<ul>\n<li>Whether the zone exists or not.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "document.exists(function(err, exists) {});",
        "html": "<p>document.exists(function(err, exists) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Check if the document exists.</p>",
      "summary": "<p>Check if the document exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 78,
    "codeStart": 89,
    "code": "exists: true,",
    "ctx": {
      "type": "property",
      "name": "exists",
      "value": "true,",
      "string": "exists"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "document.get(function(err, document, apiResponse) {\n  // `document.fields` has been populated.\n});",
        "html": "<p>document.get(function(err, document, apiResponse) {<br />  // <code>document.fields</code> has been populated.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get a document if it exists.</p>",
      "summary": "<p>Get a document if it exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 91,
    "codeStart": 99,
    "code": "get: true\n  };\n\n  ServiceObject.call(this, {\nparent: index,\nbaseUrl: '/documents',\nid: id,\nmethods: methods\n  });\n\n  this.id = id;\n  this.fields = {};\n}\n\nnodeutil.inherits(Document, ServiceObject);",
    "ctx": {
      "type": "property",
      "name": "get",
      "value": "true",
      "string": "get"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "string": "{error} if a name is not provided.",
        "types": [
          "error"
        ],
        "description": "<p>if a name is not provided.</p>"
      },
      {
        "type": "param",
        "string": "{string} name - This field's name.",
        "name": "name",
        "description": "<ul>\n<li>This field&#39;s name.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:search/field}",
        "types": [
          "module:search/field"
        ],
        "typesDescription": "module:<a href=\"module%3Asearch%2Ffield.html\">search/field</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:search/field}</p>"
      },
      {
        "type": "example",
        "string": "var scoreField = document.addField('score');\n// scoreField is a Field object.",
        "html": "<p>var scoreField = document.addField(&#39;score&#39;);<br />// scoreField is a Field object.</p>"
      }
    ],
    "description": {
      "full": "<p>Add a field to this document.</p>",
      "summary": "<p>Add a field to this document.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 115,
    "codeStart": 127,
    "code": "Document.prototype.addField = function(name) {\n  if (!is.string(name)) {\n    throw new Error('A name is required to add a field to this document.');\n  }\n\n  this.fields[name] = new Field();\n\n  return this.fields[name];\n};",
    "ctx": {
      "type": "method",
      "constructor": "Document",
      "cons": "Document",
      "name": "addField",
      "string": "Document.prototype.addField()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "document.create(function(err, document, apiResponse) {\n  if (!err) {\n    // The document was created successfully.\n  }\n});",
        "html": "<p>document.create(function(err, document, apiResponse) {<br />  if (!err) {<br />    // The document was created successfully.<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Create a document.</p>",
      "summary": "<p>Create a document.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 137,
    "codeStart": 147,
    "code": "Document.prototype.create = function(callback) {\n  this.parent.createDocument(this, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Document",
      "cons": "Document",
      "name": "create",
      "string": "Document.prototype.create()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Documents: get API Documentation]{@link https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents/get}",
        "html": "<p>[Documents: get API Documentation]{@link <a href=\"https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents/get}\">https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents/get}</a></p>"
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:search/document} callback.doc - The Document reference.",
        "name": "callback.doc",
        "description": "<ul>\n<li>The Document reference.</li>\n</ul>\n",
        "types": [
          "module:search/document"
        ],
        "typesDescription": "module:<a href=\"module%3Asearch%2Fdocument.html\">search/document</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "document.getMetadata(function(err, doc, apiResponse) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  // `doc` is a reference to `document`, both of which are now up to date.\n  //\n  //   document.fields = Array of Field objects.\n  //   document.rank = Document's numeric rank.\n});",
        "html": "<p>document.getMetadata(function(err, doc, apiResponse) {<br />  if (err) {<br />    console.error(err);<br />    return;<br />  }</p><p>  // <code>doc</code> is a reference to <code>document</code>, both of which are now up to date.<br />  //<br />  //   document.fields = Array of Field objects.<br />  //   document.rank = Document&#39;s numeric rank.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the details of this document. After running, the Document instance will<br />update the <code>fields</code> and <code>rank</code> properties to their most recent values at the<br />time of this call.</p>",
      "summary": "<p>Get the details of this document. After running, the Document instance will<br />update the <code>fields</code> and <code>rank</code> properties to their most recent values at the<br />time of this call.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 151,
    "codeStart": 176,
    "code": "Document.prototype.getMetadata = function(callback) {\n  var self = this;\n\n  callback = callback || util.noop;\n\n  ServiceObject.prototype.getMetadata.call(this, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    self.fields = {};\n    delete self.rank;\n\n    if (is.object(resp.fields)) {\n      Object.keys(resp.fields).forEach(function(fieldName) {\n        var fieldInstance = self.addField(fieldName);\n        fieldInstance.values = resp.fields[fieldName].values;\n      });\n    }\n\n    if (is.number(resp.rank)) {\n      self.rank = resp.rank;\n    }\n\n    callback(null, self, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Document",
      "cons": "Document",
      "name": "getMetadata",
      "string": "Document.prototype.getMetadata()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "string": "{error} If a rank is not a number.",
        "types": [
          "error"
        ],
        "description": "<p>If a rank is not a number.</p>"
      },
      {
        "type": "param",
        "string": "{number} rank - The rank of this document.",
        "name": "rank",
        "description": "<ul>\n<li>The rank of this document.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "document.setRank(8);",
        "html": "<p>document.setRank(8);</p>"
      }
    ],
    "description": {
      "full": "<p>Set the rank for this document. The rank of a document is a positive integer<br />which determines the default ordering of documents returned from a search. By<br />default, the rank is set at the time the document is created to the number of<br />seconds since January 1, 2011.</p>",
      "summary": "<p>Set the rank for this document. The rank of a document is a positive integer<br />which determines the default ordering of documents returned from a search. By<br />default, the rank is set at the time the document is created to the number of<br />seconds since January 1, 2011.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 205,
    "codeStart": 218,
    "code": "Document.prototype.setRank = function(rank) {\n  if (!is.number(rank) || rank < 0) {\n    throw new Error('rank should be a positive integer.');\n  }\n\n  this.rank = rank;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Document",
      "cons": "Document",
      "name": "setRank",
      "string": "Document.prototype.setRank()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "document.toJSON();\n// {\n//   docId: 'this-document-id',\n//   fields: {\n//     // ...\n//   },\n//   rank: 8\n// }",
        "html": "<p>document.toJSON();<br />// {<br />//   docId: &#39;this-document-id&#39;,<br />//   fields: {<br />//     // ...<br />//   },<br />//   rank: 8<br />// }</p>"
      }
    ],
    "description": {
      "full": "<p>Return just the document detail properties of this Document instance.</p>",
      "summary": "<p>Return just the document detail properties of this Document instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 226,
    "codeStart": 239,
    "code": "Document.prototype.toJSON = function() {\n  var documentObject = {\n    fields: this.fields\n  };\n\n  if (is.string(this.id)) {\n    documentObject.docId = this.id;\n  }\n\n  if (is.number(this.rank)) {\n    documentObject.rank = this.rank;\n  }\n\n  return documentObject;\n};\n\nmodule.exports = Document;",
    "ctx": {
      "type": "method",
      "constructor": "Document",
      "cons": "Document",
      "name": "toJSON",
      "string": "Document.prototype.toJSON()"
    }
  }
]