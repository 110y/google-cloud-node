{"id":"transaction","metadata":{"name":"Transaction","description":null},"methods":[{"metadata":{"constructor":true,"name":"Transaction","source":"/lib/datastore/transaction.js#L71","description":"<p>Build a Transaction object. Transactions will be created for you by <a data-custom-type=\"datastore/dataset\"></a>. When you need to run a transactional operation, use <a data-custom-type=\"datastore/dataset#runInTransaction\"></a>.</p><p><em><a href=\"http://goo.gl/n4oSjt\">Reference</a>.</em></p>","examples":[{"code":"dataset.runInTransaction(function(transaction, done) {\n  // `transaction` is a Transaction object.\n}, function(err) {});"}],"resources":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"rollback","source":"/lib/datastore/transaction.js#L132","description":"<p>Reverse a transaction remotely and finalize the current transaction instance.</p>","examples":[{"code":"transaction.rollback(function(err) {\n  if (err) {\n    // Transaction could not be rolled back.\n  }\n});"}],"resources":[]},"params":[{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"delete","source":"/lib/datastore/transaction.js#L275","description":"<p>Delete all entities identified with the specified key(s) in the current transaction.</p>","examples":[{"code":"// Delete a single entity.\ntransaction.delete(dataset.key(['Company', 123]));\n\n// Delete multiple entities at once.\ntransaction.delete([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n]);"}],"resources":[]},"params":[{"name":"key","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"save","source":"/lib/datastore/transaction.js#L363","description":"<p>Insert or update the specified object(s) in the current transaction. If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After the transaction is \ncommitted, the Key object held by the <code>key</code> variable will be populated \nwith a path containing its generated ID.</p>","code":"var key = dataset.key('Company');\n\ntransaction.save({\n  key: key,\n  data: {\n    rating: '10'\n  }\n});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data. The above example would then look like:</p>","code":"transaction.save({\n  key: key,\n  data: [\n    {\n      name: 'rating',\n      value: '10',\n      excludeFromIndexes: false\n    }\n  ]\n});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = dataset.key(['Company', 123]);\nvar productKey = dataset.key(['Product', 'Computer']);\ntransaction.save([\n  {\n    key: companyKey,\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: productKey,\n    data: {\n      vendor: 'Dell'\n    }\n  }\n]);"}],"resources":[]},"params":[{"name":"entities","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"entities.key","description":"<ul> <li>Datastore key object.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"entities.data","description":"<ul> <li>Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax:  <code>name</code> for the name of the property and <code>value</code> for its value. You may  also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"get","source":"gcloud-node/lib/datastore/request.js#L110","description":"<p>Retrieve the entities identified with the specified key(s) in the current transaction. Get operations require a valid key to retrieve the key-identified entity from Datastore.</p>","examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or Transaction object.</p>","code":"// Get a single entity.\nvar key = dataset.key(['Company', 123]);\ntransaction.get(key, function(err, entity, apiResponse) {});\n\n// Get multiple entities at once.\ntransaction.get([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err, entities, apiResponse) {});"}],"resources":[]},"params":[{"name":"keys","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"insert","source":"gcloud-node/lib/datastore/request.js#L156","description":"<p>Maps to <a data-custom-type=\"datastore/dataset#save\"></a>, forcing the method to be <code>insert</code>.</p>","examples":[],"resources":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"save","source":"gcloud-node/lib/datastore/request.js#L326","description":"<p>Insert or update the specified object(s). If a key is incomplete, its associated object is inserted and the original Key object is updated to contain the generated ID.</p><p>This method will determine the correct Datastore method to execute (<code>upsert</code>, <code>insert</code>, <code>update</code>, and <code>insertAutoId</code>) by using the key(s) provided. For example, if you provide an incomplete key (one without an ID), the request will create a new entity and have its ID automatically assigned. If you provide a complete key, the entity will be updated with the data specified.</p><p>By default, all properties are indexed. To prevent a property from being included in <em>all</em> indexes, you must supply an entity&#39;s <code>data</code> property as an array. See below for an example.</p>","examples":[{"caption":"<p>Save a single entity. \nNotice that we are providing an incomplete key. After saving, the original \nKey object used to save will be updated to contain the path with its \ngenerated ID.</p>","code":"var key = dataset.key('Company');\n\ndataset.save({\n  key: key,\n  data: {\n    rating: '10'\n  }\n}, function(err) {\n  console.log(key.path); // [ 'Company', 5669468231434240 ]\n  console.log(key.namespace); // undefined\n});"},{"caption":"<p>Save a single entity using a provided name instead of auto-generated ID. \nHere we are providing a key with name instead of an ID. After saving, the \noriginal Key object used to save will be updated to contain the path with \nthe name instead of a generated ID.</p>","code":"var key = dataset.key(['Company', 'donutshack']);\n\ndataset.save({\n  key: key,\n  data: {\n    name: 'DonutShack',\n    rating: 8\n  }\n}, function(err) {\n  console.log(key.path); // ['Company', 'donutshack']\n  console.log(key.namespace); // undefined\n});"},{"caption":"<p>Save a single entity with a provided namespace. Namespaces allow for \nmultitenancy. To read more about this, see \n[the Datastore docs on key concepts](https://goo.gl/M1LUAu). \nHere we are providing a key with namespace.</p>","code":"var key = dataset.key({\n  namespace: 'my-namespace',\n  path: ['Company', 'donutshack']\n});\n\ndataset.save({\n  key: key,\n  data: {\n    name: 'DonutShack',\n    rating: 8\n  }\n}, function(err) {\n  console.log(key.path); // ['Company', 'donutshack']\n  console.log(key.namespace); // 'my-namespace'\n});"},{"caption":"<p>Save different types of data, including ints, doubles, dates, booleans, \nblobs, and lists. \nNotice that we are providing an incomplete key. After saving, the original \nKey object used to save will be updated to contain the path with its \ngenerated ID.</p>","code":"var key = dataset.key('Company');\n\ndataset.save({\n  key: key,\n  data: {\n    name: 'DonutShack', // strings\n    rating: gcloud.datastore.int(8), // ints\n    worth: gcloud.datastore.double(123456.78), // doubles\n    numDonutsServed: 45, // detect number type (int or double)\n    founded: new Date('Tue May 12 2015 15:30:00 GMT-0400 (EDT)'), // dates\n    isStartup: true, // booleans\n    donutEmoji: new Buffer('\\uD83C\\uDF69'), // buffers\n    keywords: [ 'donut', 'coffee', 'yum' ] // lists of objects\n  }\n}, function(err) {});"},{"caption":"<p>To specify an <code>excludeFromIndexes</code> value for a Datastore entity, pass in \nan array for the key's data. The above example would then look like:</p>","code":"dataset.save({\n  key: dataset.key('Company'),\n  data: [\n    {\n      name: 'rating',\n      value: '10',\n      excludeFromIndexes: false\n    }\n  ]\n}, function(err) {});"},{"caption":"<p>Save multiple entities at once.</p>","code":"var companyKey = dataset.key(['Company', 123]);\nvar productKey = dataset.key(['Product', 'Computer']);\n\ndataset.save([\n  {\n    key: companyKey,\n    data: {\n      HQ: 'Dallas, TX'\n    }\n  },\n  {\n    key: productKey,\n    data: {\n      vendor: 'Dell'\n    }\n  }\n], function(err) {});"},{"caption":"<p>Explicitly attempt to 'insert' a specific entity.</p>","code":"var userKey = dataset.key(['User', 'chilts']);\n\ndataset.save([\n  {\n    key: userKey,\n    method: 'insert', // force the method to 'insert'\n    data: {\n      fullName: 'Andrew Chilton'\n    }\n  }\n], function(err, apiResponse) {});"}],"resources":[]},"params":[{"name":"entities","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"entities.key","description":"<ul> <li>Datastore key object.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"entities.method","description":"<ul> <li>Optional method to explicity use for save. The choices include &#39;insert&#39;, &#39;update&#39;, &#39;upsert&#39; and &#39;auto_insert_id&#39;.</li> </ul> ","types":["string"],"optional":true,"nullable":false},{"name":"entities.data","description":"<ul> <li>Data to save with the provided key. If you provide an array of objects, you must use the explicit syntax:  <code>name</code> for the name of the property and <code>value</code> for its value. You may  also specify an <code>excludeFromIndexes</code> property, set to <code>true</code> or <code>false</code>.</li> </ul> ","types":["object","object[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"delete","source":"gcloud-node/lib/datastore/request.js#L441","description":"<p>Delete all entities identified with the specified key(s).</p>","examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use case, whether that be a Dataset or a Transaction object.</p>","code":"// Delete a single entity.\ntransaction.delete(dataset.key(['Company', 123]), function(err, apiResp) {});\n\n// Delete multiple entities at once.\ntransaction.delete([\n  dataset.key(['Company', 123]),\n  dataset.key(['Product', 'Computer'])\n], function(err, apiResponse) {});"}],"resources":[]},"params":[{"name":"key","description":"<ul> <li>Datastore key object(s).</li> </ul> ","types":["Key","Key[]"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"runQuery","source":"gcloud-node/lib/datastore/request.js#L507","description":"<p>Datastore allows you to query entities by kind, filter them by property filters, and sort them by a property name. Projection and pagination are also supported.</p><p>If you provide a callback, the query is run, and the results are returned as the second argument to your callback. A third argument will also exist, which is the <code>endCursor</code> of the previously-run query. You can use this to extend the query you just ran to see if more results exist.</p><p>You may also omit the callback to this function to trigger streaming mode.</p><p>See below for examples of both approaches.</p>","examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"var query = dataset.createQuery('Lion');\n\n// Retrieve 5 companies.\ntransaction.runQuery(query, function(err, entities, endCursor, apiResponse) {\n  // Use `endCursor` as the starting cursor for your next query.\n  var nextQuery = query.start(endCursor);\n  var callback = function(err, entities, endCursor, apiResponse) {};\n  transaction.runQuery(nextQuery, callback);\n});"},{"caption":"<p>If you omit the callback, runQuery will automatically call subsequent \nqueries until no results remain. Entity objects will be pushed as they are \nfound.</p>","code":"transaction.runQuery(query)\n  .on('data', function (entity) {});"}],"resources":[]},"params":[{"name":"q","description":"<ul> <li>Query object.</li> </ul> ","types":["<a data-custom-type=\"datastore/query\"></a>"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function. If omitted, a readable stream instance is returned.</li> </ul> ","types":["function"],"optional":true,"nullable":false},{"name":"callback.err","description":"<ul> <li>An error returned while making this request (may be null).</li> </ul> ","types":["Error"],"optional":false,"nullable":true},{"name":"callback.entities","description":"<ul> <li>The list of entities returned by this query. Note that this is a single page of entities, not necessarily  all of the entities.</li> </ul> ","types":["Array"],"optional":false,"nullable":false},{"name":"callback.endCursor","description":"<ul> <li>The end cursor of this current query, which can be used as the starting cursor of the next query.</li> </ul> ","types":["String"],"optional":false,"nullable":false},{"name":"callback.apiResponse","description":"<ul> <li>The full API response.</li> </ul> ","types":["Object"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"allocateIds","source":"gcloud-node/lib/datastore/request.js#L607","description":"<p>Generate IDs without creating entities.</p>","examples":[{"caption":"<p>Where you see <code>transaction</code>, assume this is the context that's relevant to \nyour use, whether that be a Dataset or a Transaction object.</p>","code":"var incompleteKey = dataset.key(['Company']);\n\n// The following call will create 100 new IDs from the Company kind, which\n// exists under the default namespace.\ntransaction.allocateIds(incompleteKey, 100, function(err, keys) {});\n\n// You may prefer to create IDs from a non-default namespace by providing an\n// incomplete key with a namespace. Similar to the previous example, the call\n// below will create 100 new IDs, but from the Company kind that exists under\n// the \"ns-test\" namespace.\nvar incompleteKey = dataset.key({\n  namespace: 'ns-test',\n  path: ['Company']\n});\nvar callback = function(err, keys, apiResponse) {};\ntransaction.allocateIds(incompleteKey, 100, callback);"}],"resources":[]},"params":[{"name":"incompleteKey","description":"<ul> <li>The key object to complete.</li> </ul> ","types":["Key"],"optional":false,"nullable":false},{"name":"n","description":"<ul> <li>How many IDs to generate.</li> </ul> ","types":["number"],"optional":false,"nullable":false},{"name":"callback","description":"<ul> <li>The callback function.</li> </ul> ","types":["function"],"optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"update","source":"gcloud-node/lib/datastore/request.js#L636","description":"<p>Maps to <a data-custom-type=\"datastore/dataset#save\"></a>, forcing the method to be <code>update</code>.</p>","examples":[],"resources":[]},"params":[],"exceptions":[],"returns":[]},{"metadata":{"constructor":false,"name":"upsert","source":"gcloud-node/lib/datastore/request.js#L644","description":"<p>Maps to <a data-custom-type=\"datastore/dataset#save\"></a>, forcing the method to be <code>upsert</code>.</p>","examples":[],"resources":[]},"params":[],"exceptions":[],"returns":[]}]}