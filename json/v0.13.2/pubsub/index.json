[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "pubsub"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';"
  },
  {
    "tags": [
      {
        "type": "type",
        "types": [
          "module:pubsub/subscription"
        ],
        "typesDescription": "module:<a href=\"module%3Apubsub%2Fsubscription.html\">pubsub/subscription</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 23,
    "codeStart": 27,
    "code": "var Subscription = require('./subscription.js');",
    "ctx": {
      "type": "declaration",
      "name": "Subscription",
      "value": "require('./subscription.js')",
      "string": "Subscription"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "types": [
          "module:pubsub/topic"
        ],
        "typesDescription": "module:<a href=\"module%3Apubsub%2Ftopic.html\">pubsub/topic</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 29,
    "codeStart": 33,
    "code": "var Topic = require('./topic.js');",
    "ctx": {
      "type": "declaration",
      "name": "Topic",
      "value": "require('./topic.js')",
      "string": "Topic"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 35,
    "codeStart": 39,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "string": "{string} Base URL for Pub/Sub API."
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 41,
    "codeStart": 45,
    "code": "var PUBSUB_BASE_URL = 'https://pubsub.googleapis.com/v1beta2/';\n\n/**\n * @const {array} Required scopes for Pub/Sub API.\n * @private\n */\nvar SCOPES = [\n  'https://www.googleapis.com/auth/pubsub',\n  'https://www.googleapis.com/auth/cloud-platform'\n];\n\n/**\n * [Google Cloud Pub/Sub](https://developers.google.com/pubsub/overview) is a\n * reliable, many-to-many, asynchronous messaging service from Google Cloud\n * Platform.\n *\n * Note: Google Cloud Pub/Sub API is available as a Limited Preview and the\n * client library we provide is currently experimental. The API and/or the\n * client might be changed in backward-incompatible ways. This API is not\n * subject to any SLA or deprecation policy. Request to be whitelisted to use\n * it by filling the [Limited Preview application form](http://goo.gl/sO0wTu).\n *\n * @constructor\n * @alias module:pubsub\n *\n * @param {object=} options - Configuration object.\n * @param {string=} options.projectId - Google Developers Console Project ID.\n * @param {string=} options.keyFilename - Full path to the JSON key downloaded\n *     from the Google Developers Console. Alternatively, you may provide a\n *     `credentials` object.\n * @param {object=} options.credentials - Credentials object, used in place of\n *     a `keyFilename`.\n *\n * @example\n * var gcloud = require('gcloud');\n *\n * // From Google Compute Engine and Google App Engine:\n *\n * // Access `pubsub` through the `gcloud` module directly.\n * var pubsub = gcloud.pubsub();\n *\n * // Elsewhere:\n *\n * // Provide configuration details up-front.\n * var myProject = gcloud({\n *   keyFilename: '/path/to/keyfile.json',\n *   projectId: 'my-project'\n * });\n *\n * var pubsub = myProject.pubsub();\n *\n *\n * // Override default configuration details.\n * var anotherPubsubConnection = myProject.pubsub({\n *   keyFilename: '/path/to/another/keyfile.json',\n * });\n *\n *\n * // Specify all options at instantiation.\n * var pubsub = gcloud.pubsub({\n *   keyFilename: '/path/to/keyfile.json',\n *   projectId: 'my-project'\n * });\n */\nfunction PubSub(options) {\n  options = options || {};\n\n  this.makeAuthorizedRequest_ = util.makeAuthorizedRequest({\n    credentials: options.credentials,\n    keyFile: options.keyFilename,\n    scopes: SCOPES\n  });\n\n  this.projectId = options.projectId;\n  this.projectName = 'projects/' + this.projectId;\n}\n\n/**\n * Get a list of the topics registered to your project. You may optionally\n * provide a query object as the first argument to customize the response.\n *\n * @param {object=} query - Query object.\n * @param {string=} query.pageToken - Page token.\n * @param {number=} query.pageSize - Max number of results to return.\n * @param {function} callback - The callback function.\n *\n * @example\n * // Get all topics.\n * pubsub.getTopics(function(err, topics, nextQuery) {\n *   // If `nextQuery` is non-null, there may be more results to fetch. To do\n *   // so, run `pubsub.getTopics(nextQuery, callback);`.\n * });\n *\n * // Customize the query.\n * pubsub.getTopics({\n *   pageSize: 3\n * }, function(err, topics, nextQuery) {});\n */\nPubSub.prototype.getTopics = function(query, callback) {\n  var self = this;\n  if (!callback) {\n    callback = query;\n    query = {};\n  }\n  var path = this.projectName + '/topics';\n  this.makeReq_('GET', path, query, true, function(err, result) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    var topics = (result.topics || []).map(function(item) {\n      return new Topic(self, {\n        name: item.name\n      });\n    });\n    var nextQuery = null;\n    if (result.nextPageToken) {\n      nextQuery = query;\n      nextQuery.pageToken = result.nextPageToken;\n    }\n    callback(null, topics, nextQuery);\n  });\n};\n\n/**\n * Create a topic with the given name.\n *\n * @param {string} name - Name of the topic.\n * @param {function=} callback - The callback function.\n *\n * @example\n * pubsub.createTopic('my-new-topic', function(err, topic) {\n *   topic.publish('New message!', function(err) {});\n * });\n */\nPubSub.prototype.createTopic = function(name, callback) {\n  callback = callback || util.noop;\n  var topic = this.topic(name);\n  var path = this.projectName + '/topics/' + name;\n  this.makeReq_('PUT', path, null, null, function(err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    callback(null, topic);\n  });\n};\n\n/**\n * Create a Topic object to reference an existing topic.\n *\n * @throws {Error} If a name is not provided.\n *\n * @param {string} name - The name of the topic.\n * @param {object=} options - Configuration object.\n * @param {boolean=} options.autoCreate - Automatically create topic if it\n *     doesn't exist. Note that messages published to a topic with no\n *     subscribers will not be delivered.\n * @return {module:pubsub/topic}\n *\n * @example\n * var topic = pubsub.topic('my-existing-topic');\n * var topic = pubsub.topic('topic-that-maybe-exists', { autoCreate: true });\n * topic.publish('New message!');\n */\nPubSub.prototype.topic = function(name, options) {\n  if (!name) {\n    throw new Error('A name must be specified for a new topic.');\n  }\n  options = options || {};\n  return new Topic(this, {\n    name: name,\n    autoCreate: options.autoCreate\n  });\n};",
    "ctx": {
      "type": "declaration",
      "name": "PUBSUB_BASE_URL",
      "value": "'https://pubsub.googleapis.com/v1beta2/'",
      "string": "PUBSUB_BASE_URL"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "query",
        "description": "<ul>\n<li>Query object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "query.pageToken",
        "description": "<ul>\n<li>Page token.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "query.pageSize",
        "description": "<ul>\n<li>Maximum number of results to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "callback",
        "description": "<ul>\n<li>The callback function. </li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "// Get all subscriptions.\npubsub.getSubscriptions(function(err, subscriptions, nextQuery) {\n  // If `nextQuery` is non-null, there may be more results to fetch. To do\n  // so, run `pubsub.getSubscriptions(nextQuery, callback);`.\n});\n\n// Customize the query.\npubsub.getSubscriptions({\n  pageSize: 10\n}, function(err, subscriptions, nextQuery) {});"
      }
    ],
    "description": {
      "full": "<p>Get a list of the subscriptions registered to all of your project&#39;s topics.<br />You may optionally provide a query object as the first argument to customize<br />the response.</p>",
      "summary": "<p>Get a list of the subscriptions registered to all of your project&#39;s topics.<br />You may optionally provide a query object as the first argument to customize<br />the response.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 221,
    "codeStart": 243,
    "code": "PubSub.prototype.getSubscriptions = function(query, callback) {\n  var self = this;\n  if (!callback) {\n    callback = query;\n    query = {};\n  }\n\n  var path = this.projectName + '/subscriptions';\n  this.makeReq_('GET', path, query, true, function(err, result) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    var subscriptions = (result.subscriptions || []).map(function(item) {\n      return new Subscription(self, {\n        name: item.name\n      });\n    });\n    var nextQuery = null;\n    if (result.nextPageToken) {\n      nextQuery = query;\n      nextQuery.pageToken = result.nextPageToken;\n    }\n    callback(null, subscriptions, nextQuery);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "PubSub",
      "cons": "PubSub",
      "name": "getSubscriptions",
      "string": "PubSub.prototype.getSubscriptions()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      },
      {
        "type": "param",
        "name": "method",
        "description": "<ul>\n<li>Action.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "path",
        "description": "<ul>\n<li>Request path.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "query",
        "description": "<ul>\n<li>Request query object.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "body",
        "description": "<ul>\n<li>Request body contents.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 271,
    "codeStart": 283,
    "code": "PubSub.prototype.makeReq_ = function(method, path, q, body, callback) {\n  var reqOpts = {\n    method: method,\n    qs: q,\n    uri: PUBSUB_BASE_URL + path\n  };\n\n  if (body) {\n    reqOpts.json = body;\n  }\n\n  this.makeAuthorizedRequest_(reqOpts, callback);\n};\n\nmodule.exports = PubSub;",
    "ctx": {
      "type": "method",
      "constructor": "PubSub",
      "cons": "PubSub",
      "name": "makeReq_",
      "string": "PubSub.prototype.makeReq_()"
    }
  }
]