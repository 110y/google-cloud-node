[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "datastore/dataset",
        "html": "<p>datastore/dataset</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar arrify = require('arrify');\nvar is = require('is');\nvar nodeutil = require('util');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:datastore/entity}",
        "types": [
          "module:datastore/entity"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fentity.html\">datastore/entity</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:datastore/entity}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 31,
    "code": "var entity = require('./entity.js');",
    "ctx": {
      "type": "declaration",
      "name": "entity",
      "value": "require('./entity.js')",
      "string": "entity"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 33,
    "codeStart": 37,
    "code": "var Query = require('./query.js');",
    "ctx": {
      "type": "declaration",
      "name": "Query",
      "value": "require('./query.js')",
      "string": "Query"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:datastore/transaction}",
        "types": [
          "module:datastore/transaction"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Ftransaction.html\">datastore/transaction</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:datastore/transaction}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 43,
    "code": "var Transaction = require('./transaction.js');",
    "ctx": {
      "type": "declaration",
      "name": "Transaction",
      "value": "require('./transaction.js')",
      "string": "Transaction"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 45,
    "codeStart": 49,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:datastore/request}",
        "types": [
          "module:datastore/request"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Frequest.html\">datastore/request</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:datastore/request}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 51,
    "codeStart": 55,
    "code": "var DatastoreRequest = require('./request.js');",
    "ctx": {
      "type": "declaration",
      "name": "DatastoreRequest",
      "value": "require('./request.js')",
      "string": "DatastoreRequest"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "string": "{array} SCOPES",
        "html": "<p>{array} SCOPES</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Scopes for Google Datastore access.</p>",
      "summary": "<p>Scopes for Google Datastore access.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 57,
    "codeStart": 62,
    "code": "var SCOPES = [\n  'https://www.googleapis.com/auth/datastore',\n  'https://www.googleapis.com/auth/userinfo.email'\n];",
    "ctx": {
      "type": "declaration",
      "name": "SCOPES",
      "value": "[",
      "string": "SCOPES"
    }
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:datastore/dataset",
        "html": "<p>module:datastore/dataset</p>"
      },
      {
        "type": "mixes",
        "string": "module:datastore/request",
        "html": "<p>module:datastore/request</p>"
      },
      {
        "type": "param",
        "string": "{object=} options - [Configuration object](#/docs/?method=gcloud).",
        "name": "options",
        "description": "<ul>\n<li><a href=\"#/docs/?method=gcloud\">Configuration object</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string=} options.apiEndpoint - Override the default API endpoint used\n    to reach Datastore. This is useful for connecting to your local Datastore\n    server (usually \"http://localhost:8080\").",
        "name": "options.apiEndpoint",
        "description": "<ul>\n<li>Override the default API endpoint used     to reach Datastore. This is useful for connecting to your local Datastore<br />  server (usually &quot;<a href=\"http://localhost:8080\">http://localhost:8080</a>&quot;).</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.namespace - Namespace to isolate transactions to.",
        "name": "options.namespace",
        "description": "<ul>\n<li>Namespace to isolate transactions to.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var datastore = gcloud.datastore;\n\nvar dataset = datastore.dataset({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n//-\n// Connect to your local Datastore server.\n//-\nvar dataset = datastore.dataset({\n  projectId: 'my-project',\n  apiEndpoint: 'http://localhost:8080'\n});\n\n//-\n// The `process.env.DATASTORE_HOST` environment variable is also recognized.\n// If set, you may omit the `apiEndpoint` option.\n//-",
        "html": "<p>var datastore = gcloud.datastore;</p><p>var dataset = datastore.dataset({<br />  projectId: &#39;my-project&#39;,<br />  keyFilename: &#39;/path/to/keyfile.json&#39;<br />});</p><p>//-<br />// Connect to your local Datastore server.<br />//-<br />var dataset = datastore.dataset({<br />  projectId: &#39;my-project&#39;,<br />  apiEndpoint: &#39;<a href=\"http://localhost:8080\">http://localhost:8080</a>&#39;<br />});</p><p>//-<br />// The <code>process.env.DATASTORE_HOST</code> environment variable is also recognized.<br />// If set, you may omit the <code>apiEndpoint</code> option.<br />//-</p>"
      }
    ],
    "description": {
      "full": "<p>Interact with a dataset from the<br /><a href=\"https://developers.google.com/datastore/\">Google Cloud Datastore</a>.</p><p>If a project ID is not specified, the <code>DATASTORE_DATASET</code> environment<br />variable from the gcloud SDK is used.</p>",
      "summary": "<p>Interact with a dataset from the<br /><a href=\"https://developers.google.com/datastore/\">Google Cloud Datastore</a>.</p>",
      "body": "<p>If a project ID is not specified, the <code>DATASTORE_DATASET</code> environment<br />variable from the gcloud SDK is used.</p>"
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 67,
    "codeStart": 105,
    "code": "function Dataset(options) {\n  if (!(this instanceof Dataset)) {\n    options = util.normalizeArguments(this, options);\n    return new Dataset(options);\n  }\n\n  options = options || {};\n\n  this.datasetId = options.projectId;\n\n  if (process.env.DATASTORE_DATASET) {\n    this.datasetId = process.env.DATASTORE_DATASET;\n  }\n\n  if (!this.datasetId) {\n    throw new Error('A project or dataset ID is required to use a Dataset.');\n  }\n\n  this.determineApiEndpoint_(options.apiEndpoint);\n  this.namespace = options.namespace;\n\n  this.makeAuthenticatedRequest_ = util.makeAuthenticatedRequestFactory({\n    customEndpoint: this.customEndpoint,\n    credentials: options.credentials,\n    keyFile: options.keyFilename,\n    scopes: SCOPES,\n    email: options.email\n  });\n}\n\nnodeutil.inherits(Dataset, DatastoreRequest);",
    "ctx": {
      "type": "constructor",
      "name": "Dataset",
      "string": "Dataset()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} customApiEndpoint - Custom API endpoint.",
        "name": "customApiEndpoint",
        "description": "<ul>\n<li>Custom API endpoint.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Determine the appropriate endpoint to use for API requests. If not explicitly<br />defined, check for the &quot;DATASTORE_HOST&quot; environment variable, used to connect<br />to a local Datastore server.</p>",
      "summary": "<p>Determine the appropriate endpoint to use for API requests. If not explicitly<br />defined, check for the &quot;DATASTORE_HOST&quot; environment variable, used to connect<br />to a local Datastore server.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 137,
    "codeStart": 146,
    "code": "Dataset.prototype.determineApiEndpoint_ = function(customApiEndpoint) {\n  var apiEndpoint;\n  var trailingSlashes = new RegExp('/*$');\n\n  if (customApiEndpoint) {\n    apiEndpoint = customApiEndpoint;\n    this.customEndpoint = true;\n  } else if (process.env.DATASTORE_HOST) {\n    apiEndpoint = process.env.DATASTORE_HOST;\n    this.customEndpoint = true;\n  } else {\n    apiEndpoint = 'https://www.googleapis.com';\n  }\n\n  if (apiEndpoint.indexOf('http') !== 0) {\n    apiEndpoint = 'http://' + apiEndpoint;\n  }\n\n  this.apiEndpoint = apiEndpoint.replace(trailingSlashes, '');\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "determineApiEndpoint_",
      "string": "Dataset.prototype.determineApiEndpoint_()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{...*=} options - Key path. To specify or override a namespace,\n    you must use an object here to explicitly state it.",
        "name": "options",
        "description": "<ul>\n<li>Key path. To specify or override a namespace,     you must use an object here to explicitly state it.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": true
      },
      {
        "type": "param",
        "string": "{object=} options - Configuration object.",
        "name": "options",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{...*=} options.path - Key path.",
        "name": "options.path",
        "description": "<ul>\n<li>Key path.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": true
      },
      {
        "type": "param",
        "string": "{string=} options.namespace - Optional namespace.",
        "name": "options.namespace",
        "description": "<ul>\n<li>Optional namespace.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Key} A newly created Key from the options given.",
        "types": [
          "Key"
        ],
        "typesDescription": "<a href=\"Key.html\">Key</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>A newly created Key from the options given.</p>"
      },
      {
        "type": "example",
        "string": "//-\n// Create an incomplete key with a kind value of `Company`.\n//-\nvar key = dataset.key('Company');\n\n//-\n// Create a complete key with a kind value of `Company` and id `123`.\n//-\nvar key = dataset.key(['Company', 123]);\n\n//-\n// Create a complete key with a kind value of `Company` and name `Google`.\n// Note: `id` is used for numeric identifiers and `name` is used otherwise.\n//-\nvar key = dataset.key(['Company', 'Google']);\n\n//-\n// Create a complete key from a provided namespace and path.\n//-\nvar key = dataset.key({\n  namespace: 'My-NS',\n  path: ['Company', 123]\n});\n\n//-\n// All keys have helper properties that you can access or overwrite\n// directly.\n//-\nvar key = dataset.key(['Company', 123]);\n\n// key.path: ['Company', 123]\n// key.kind: 'Company'\n// key.id:   123\n\n// Change to a named identifier.\ndelete key.id;\nkey.name = 'Google';\n\n// key.path: ['Company', 'Google']\n// key.name: 'Google'\n\n//-\n// Ancestor keys are created as `Key` objects as well.\n//-\nvar key = dataset.key(['Company', 'Google', 'Employee', 'Jennifer']);\n\n// key.path: ['Company', 'Google', 'Employee', 'Jennifer']\n// key.parent.path: ['Company', 'Google']\n\n// Change the company Jennifer works for.\nkey.parent.name = 'Alphabet';\n\n// key.path: ['Company', 'Alphabet', 'Employee', 'Jennifer']\n// key.parent.path: ['Company', 'Alphabet']",
        "html": "<p>//-<br />// Create an incomplete key with a kind value of <code>Company</code>.<br />//-<br />var key = dataset.key(&#39;Company&#39;);</p><p>//-<br />// Create a complete key with a kind value of <code>Company</code> and id <code>123</code>.<br />//-<br />var key = dataset.key([&#39;Company&#39;, 123]);</p><p>//-<br />// Create a complete key with a kind value of <code>Company</code> and name <code>Google</code>.<br />// Note: <code>id</code> is used for numeric identifiers and <code>name</code> is used otherwise.<br />//-<br />var key = dataset.key([&#39;Company&#39;, &#39;Google&#39;]);</p><p>//-<br />// Create a complete key from a provided namespace and path.<br />//-<br />var key = dataset.key({<br />  namespace: &#39;My-NS&#39;,<br />  path: [&#39;Company&#39;, 123]<br />});</p><p>//-<br />// All keys have helper properties that you can access or overwrite<br />// directly.<br />//-<br />var key = dataset.key([&#39;Company&#39;, 123]);</p><p>// key.path: [&#39;Company&#39;, 123]<br />// key.kind: &#39;Company&#39;<br />// key.id:   123</p><p>// Change to a named identifier.<br />delete key.id;<br />key.name = &#39;Google&#39;;</p><p>// key.path: [&#39;Company&#39;, &#39;Google&#39;]<br />// key.name: &#39;Google&#39;</p><p>//-<br />// Ancestor keys are created as <code>Key</code> objects as well.<br />//-<br />var key = dataset.key([&#39;Company&#39;, &#39;Google&#39;, &#39;Employee&#39;, &#39;Jennifer&#39;]);</p><p>// key.path: [&#39;Company&#39;, &#39;Google&#39;, &#39;Employee&#39;, &#39;Jennifer&#39;]<br />// key.parent.path: [&#39;Company&#39;, &#39;Google&#39;]</p><p>// Change the company Jennifer works for.<br />key.parent.name = &#39;Alphabet&#39;;</p><p>// key.path: [&#39;Company&#39;, &#39;Alphabet&#39;, &#39;Employee&#39;, &#39;Jennifer&#39;]<br />// key.parent.path: [&#39;Company&#39;, &#39;Alphabet&#39;]</p>"
      }
    ],
    "description": {
      "full": "<p>Helper to create a Key object, scoped to the dataset&#39;s namespace by default.</p><p>You may also specify a configuration object to define a namespace and path.</p>",
      "summary": "<p>Helper to create a Key object, scoped to the dataset&#39;s namespace by default.</p>",
      "body": "<p>You may also specify a configuration object to define a namespace and path.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 167,
    "codeStart": 235,
    "code": "Dataset.prototype.key = function(options) {\n  options = is.object(options) ? options : {\n    namespace: this.namespace,\n    path: arrify(options)\n  };\n\n  return new entity.Key(options);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "key",
      "string": "Dataset.prototype.key()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datastore Queries]{@link http://goo.gl/Cag0r6}",
        "html": "<p>[Datastore Queries]{@link <a href=\"http://goo.gl/Cag0r6}\">http://goo.gl/Cag0r6}</a></p>"
      },
      {
        "type": "borrows",
        "string": "{module:datastore/query} as createQuery",
        "otherMemberName": "{module:datastore/query}",
        "thisMemberName": "createQuery",
        "html": "<p>{module:datastore/query} as createQuery</p>"
      },
      {
        "type": "see",
        "string": "{module:datastore/query}",
        "local": "{module:datastore/query}",
        "html": "<p>{module:datastore/query}</p>"
      },
      {
        "type": "param",
        "string": "{string=} namespace - Optional namespace.",
        "name": "namespace",
        "description": "<ul>\n<li>Optional namespace.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} kind - Kind to query.",
        "name": "kind",
        "description": "<ul>\n<li>Kind to query.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:datastore/query}",
        "types": [
          "module:datastore/query"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Fquery.html\">datastore/query</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/query}</p>"
      }
    ],
    "description": {
      "full": "<p>Create a query from the current dataset to query the specified kind, scoped<br />to the namespace provided at the initialization of the dataset.</p>",
      "summary": "<p>Create a query from the current dataset to query the specified kind, scoped<br />to the namespace provided at the initialization of the dataset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 244,
    "codeStart": 257,
    "code": "Dataset.prototype.createQuery = function(namespace, kind) {\n  if (arguments.length === 1) {\n    kind = arrify(namespace);\n    namespace = this.namespace;\n  }\n\n  return new Query(namespace, arrify(kind));\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "createQuery",
      "string": "Dataset.prototype.createQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datasets: beginTransaction API Documentation]{@link https://cloud.google.com/datastore/docs/apis/v1beta2/datasets/beginTransaction}",
        "html": "<p>[Datasets: beginTransaction API Documentation]{@link <a href=\"https://cloud.google.com/datastore/docs/apis/v1beta2/datasets/beginTransaction}\">https://cloud.google.com/datastore/docs/apis/v1beta2/datasets/beginTransaction}</a></p>"
      },
      {
        "type": "borrows",
        "string": "{module:datastore/transaction#begin} as runInTransaction",
        "otherMemberName": "{module:datastore/transaction#begin}",
        "thisMemberName": "runInTransaction",
        "html": "<p>{module:datastore/transaction#begin} as runInTransaction</p>"
      },
      {
        "type": "param",
        "string": "{function} fn - The function to run in the context of a transaction.",
        "name": "fn",
        "description": "<ul>\n<li>The function to run in the context of a transaction.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:datastore/transaction} fn.transaction - The Transaction.",
        "name": "fn.transaction",
        "description": "<ul>\n<li>The Transaction.</li>\n</ul>\n",
        "types": [
          "module:datastore/transaction"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Ftransaction.html\">datastore/transaction</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} fn.done - Function used to commit changes.",
        "name": "fn.done",
        "description": "<ul>\n<li>Function used to commit changes.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "dataset.runInTransaction(function(transaction, done) {\n  // From the `transaction` object, execute dataset methods as usual.\n  // Call `done` when you're ready to commit all of the changes.\n  transaction.get(dataset.key(['Company', 123]), function(err, entity) {\n    if (err) {\n      transaction.rollback(done);\n      return;\n    }\n\n    done();\n  });\n}, function(err, apiResponse) {});",
        "html": "<p>dataset.runInTransaction(function(transaction, done) {<br />  // From the <code>transaction</code> object, execute dataset methods as usual.<br />  // Call <code>done</code> when you&#39;re ready to commit all of the changes.<br />  transaction.get(dataset.key([&#39;Company&#39;, 123]), function(err, entity) {<br />    if (err) {<br />      transaction.rollback(done);<br />      return;<br />    }</p><pre><code>done();\n</code></pre><p>  });<br />}, function(err, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Run a function in the context of a new transaction. Transactions allow you to<br />perform multiple operations, committing your changes atomically. When you are<br />finished making your changes within the transaction, run the done() function<br />provided in the callback function to commit your changes. See an example<br />below for more information.</p>",
      "summary": "<p>Run a function in the context of a new transaction. Transactions allow you to<br />perform multiple operations, committing your changes atomically. When you are<br />finished making your changes within the transaction, run the done() function<br />provided in the callback function to commit your changes. See an example<br />below for more information.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 266,
    "codeStart": 298,
    "code": "Dataset.prototype.runInTransaction = function(fn, callback) {\n  var newTransaction = this.createTransaction_();\n\n  newTransaction.begin_(function(err, resp) {\n    if (err) {\n      callback(err, resp);\n      return;\n    }\n\n    fn(newTransaction, newTransaction.commit_.bind(newTransaction, callback));\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "runInTransaction",
      "string": "Dataset.prototype.runInTransaction()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{module:datastore/transaction}",
        "types": [
          "module:datastore/transaction"
        ],
        "typesDescription": "module:<a href=\"module%3Adatastore%2Ftransaction.html\">datastore/transaction</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:datastore/transaction}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Create a new Transaction object using the existing connection and dataset.</p>",
      "summary": "<p>Create a new Transaction object using the existing connection and dataset.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 311,
    "codeStart": 317,
    "code": "Dataset.prototype.createTransaction_ = function() {\n  return new Transaction(this, this.datasetId);\n};\n\nmodule.exports = Dataset;",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "createTransaction_",
      "string": "Dataset.prototype.createTransaction_()"
    }
  }
]