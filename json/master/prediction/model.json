[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "prediction/model",
        "html": "<p>prediction/model</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar arrify = require('arrify');\nvar JSONStream = require('JSONStream');\nvar nodeutil = require('util');\nvar pumpify = require('pumpify');\nvar streamEvents = require('stream-events');\nvar through = require('through2');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/serviceObject}",
        "types": [
          "module:common/serviceObject"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2FserviceObject.html\">common/serviceObject</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/serviceObject}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 30,
    "codeStart": 34,
    "code": "var ServiceObject = require('../common/service-object.js');",
    "ctx": {
      "type": "declaration",
      "name": "ServiceObject",
      "value": "require('../common/service-object.js')",
      "string": "ServiceObject"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 36,
    "codeStart": 40,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{module:prediction} prediction - Prediction this model belongs to.",
        "name": "prediction",
        "description": "<ul>\n<li>Prediction this model belongs to.</li>\n</ul>\n",
        "types": [
          "module:prediction"
        ],
        "typesDescription": "module:<a href=\"module%3Aprediction.html\">prediction</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} id - The ID of the model.",
        "name": "id",
        "description": "<ul>\n<li>The ID of the model.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 42,
    "codeStart": 47
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Developer's Guide: Training Your Model]{@link https://cloud.google.com/prediction/docs/developer-guide#trainingtheapi}",
        "html": "<p>[Developer&#39;s Guide: Training Your Model]{@link <a href=\"https://cloud.google.com/prediction/docs/developer-guide#trainingtheapi}\">https://cloud.google.com/prediction/docs/developer-guide#trainingtheapi}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Model Resource]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels}",
        "html": "<p>[Model Resource]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels}</a></p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:compute/address",
        "html": "<p>module:compute/address</p>"
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar prediction = gcloud.prediction();\n\nvar model = prediction.model('my-model');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var prediction = gcloud.prediction();</p><p>var model = prediction.model(&#39;my-model&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>A Model object represents a trained model. You can train it by using<br />{module:prediction/model#train} or ask for predictions with<br />{module:prediction/model#query}.</p>",
      "summary": "<p>A Model object represents a trained model. You can train it by using<br />{module:prediction/model#train} or ask for predictions with<br />{module:prediction/model#query}.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 47,
    "codeStart": 68,
    "code": "function Model(prediction, id) {\n  var methods = {",
    "ctx": {
      "type": "constructor",
      "name": "Model",
      "string": "Model()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{object=} options - See {module:prediction#createModel}.",
        "name": "options",
        "description": "<ul>\n<li>See {module:prediction#createModel}.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "model.create(function(err, model, apiResponse) {\n  if (!err) {\n    // The model was created successfully.\n  }\n});",
        "html": "<p>model.create(function(err, model, apiResponse) {<br />  if (!err) {<br />    // The model was created successfully.<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Create a trained model.</p>",
      "summary": "<p>Create a trained model.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 70,
    "codeStart": 82,
    "code": "create: true,",
    "ctx": {
      "type": "property",
      "name": "create",
      "value": "true,",
      "string": "create"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Trainedmodels: delete API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/delete}",
        "html": "<p>[Trainedmodels: delete API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/delete}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/delete}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "model.delete(function(err, apiResponse) {});",
        "html": "<p>model.delete(function(err, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Delete the model.</p>",
      "summary": "<p>Delete the model.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 84,
    "codeStart": 97,
    "code": "delete: true,",
    "ctx": {
      "type": "property",
      "name": "delete",
      "value": "true,",
      "string": "delete"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} callback.exists - Whether the model exists or not.",
        "name": "callback.exists",
        "description": "<ul>\n<li>Whether the model exists or not.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "model.exists(function(err, exists) {});",
        "html": "<p>model.exists(function(err, exists) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Check if the model exists.</p>",
      "summary": "<p>Check if the model exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 99,
    "codeStart": 110,
    "code": "exists: true,",
    "ctx": {
      "type": "property",
      "name": "exists",
      "value": "true,",
      "string": "exists"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{options=} options - Configuration object.",
        "name": "options",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "options"
        ],
        "typesDescription": "<a href=\"options.html\">options</a>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoCreate - Automatically create the object if\n    it does not exist. Default: `false`",
        "name": "options.autoCreate",
        "description": "<ul>\n<li>Automatically create the object if     it does not exist. Default: <code>false</code></li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "model.get(function(err, model, apiResponse) {\n  // `model.metadata` has been populated.\n});",
        "html": "<p>model.get(function(err, model, apiResponse) {<br />  // <code>model.metadata</code> has been populated.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get a model if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an<br />object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is<br />normally required for the <code>create</code> method must be contained within this<br />object as well.</p>",
      "summary": "<p>Get a model if it exists.</p>",
      "body": "<p>You may optionally use this to &quot;get or create&quot; an object by providing an<br />object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is<br />normally required for the <code>create</code> method must be contained within this<br />object as well.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 112,
    "codeStart": 129,
    "code": "get: true,",
    "ctx": {
      "type": "property",
      "name": "get",
      "value": "true,",
      "string": "get"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Trainedmodels: get API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/get}",
        "html": "<p>[Trainedmodels: get API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/get}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/get}</a></p>"
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An API error.",
        "name": "callback.err",
        "description": "<ul>\n<li>An API error.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.metadata - Metadata of the model from the API.",
        "name": "callback.metadata",
        "description": "<ul>\n<li>Metadata of the model from the API.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - Raw API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>Raw API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "model.getMetadata(function(err, metadata, apiResponse) {});",
        "html": "<p>model.getMetadata(function(err, metadata, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the metadata for the model.</p>",
      "summary": "<p>Get the metadata for the model.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 131,
    "codeStart": 144,
    "code": "getMetadata: true,",
    "ctx": {
      "type": "property",
      "name": "getMetadata",
      "value": "true,",
      "string": "getMetadata"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Trainedmodels: update API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/update}",
        "html": "<p>[Trainedmodels: update API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/update}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/update}</a></p>"
      },
      {
        "type": "param",
        "string": "{object} metadata - Metadata to save on the Model.",
        "name": "metadata",
        "description": "<ul>\n<li>Metadata to save on the Model.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var metadata = {\n  output: 'english',\n  csvInstance: [\n    'Hello, this is an English sentence!'\n  ]\n};\n\nmodel.setMetadata(metadata, function(err, apiResponse) {});",
        "html": "<p>var metadata = {<br />  output: &#39;english&#39;,<br />  csvInstance: [<br />    &#39;Hello, this is an English sentence!&#39;<br />  ]<br />};</p><p>model.setMetadata(metadata, function(err, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Sets the metadata of the Model object.</p><p>NOTE: What you probably want is {module:prediction/model#train}, which<br />wraps this method.</p>",
      "summary": "<p>Sets the metadata of the Model object.</p>",
      "body": "<p>NOTE: What you probably want is {module:prediction/model#train}, which<br />wraps this method.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 146,
    "codeStart": 170,
    "code": "setMetadata: {\n  reqOpts: {\n    method: 'PUT'\n  }\n}\n  };\n\n  ServiceObject.call(this, {\nparent: prediction,\nbaseUrl: '/trainedmodels',\nid: id,\ncreateMethod: prediction.createModel.bind(prediction),\nmethods: methods\n  });\n}\n\nnodeutil.inherits(Model, ServiceObject);",
    "ctx": {
      "type": "property",
      "name": "setMetadata",
      "value": "{",
      "string": "setMetadata"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Trainedmodels: analyze API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/analyze}",
        "html": "<p>[Trainedmodels: analyze API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/analyze}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/analyze}</a></p>"
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An API error.",
        "name": "callback.err",
        "description": "<ul>\n<li>An API error.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.analysis - The results of the analysis. See a\n    [Trainedmodels: analyze response object](https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/analyze#response).",
        "name": "callback.analysis",
        "description": "<ul>\n<li>The results of the analysis. See a     <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/analyze#response\">Trainedmodels: analyze response object</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.analysis.data - Analysis of the data stored in this\n    model.",
        "name": "callback.analysis.data",
        "description": "<ul>\n<li>Analysis of the data stored in this     model.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.analysis.model - Analysis of the model.",
        "name": "callback.analysis.model",
        "description": "<ul>\n<li>Analysis of the model.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - Raw API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>Raw API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "model.analyze(function(err, analysis, apiResponse) {\n  if (!err) {\n    // `analysis.data` == {...}\n    // `analysis.model` == {...}\n  }\n});",
        "html": "<p>model.analyze(function(err, analysis, apiResponse) {<br />  if (!err) {<br />    // <code>analysis.data</code> == {...}<br />    // <code>analysis.model</code> == {...}<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get an analysis of the model and the data it was trained on.</p>",
      "summary": "<p>Get an analysis of the model and the data it was trained on.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 188,
    "codeStart": 210,
    "code": "Model.prototype.analyze = function(callback) {\n  this.request({\n    uri: '/analyze'\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var analysis = {\n      data: resp.dataDescription || {},\n      model: resp.modelDescription || {}\n    };\n\n    callback(null, analysis, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Model",
      "cons": "Model",
      "name": "analyze",
      "string": "Model.prototype.analyze()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|number} label - The output value, either a regression or class\n    label.",
        "name": "label",
        "description": "<ul>\n<li>The output value, either a regression or class     label.</li>\n</ul>\n",
        "types": [
          "string",
          "number"
        ],
        "typesDescription": "<code>string</code>|<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{WritableStream}",
        "types": [
          "WritableStream"
        ],
        "typesDescription": "<a href=\"WritableStream.html\">WritableStream</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{WritableStream}</p>"
      },
      {
        "type": "example",
        "string": "var stream = model.createWriteStream('english');\n\nstream\n  .on('error', function(err) {\n    // Uh oh, an error occurred!\n  })\n  .on('finish', function() {\n    // The model will now be processing the new data.\n  });\n\nstream.write('Hello, this is an English sentence!');\nstream.write('...yeah, I assumed that when I was able to read it.');\nstream.end();",
        "html": "<p>var stream = model.createWriteStream(&#39;english&#39;);</p><p>stream<br />  .on(&#39;error&#39;, function(err) {<br />    // Uh oh, an error occurred!<br />  })<br />  .on(&#39;finish&#39;, function() {<br />    // The model will now be processing the new data.<br />  });</p><p>stream.write(&#39;Hello, this is an English sentence!&#39;);<br />stream.write(&#39;...yeah, I assumed that when I was able to read it.&#39;);<br />stream.end();</p>"
      }
    ],
    "description": {
      "full": "<p>Create a writable stream to train the model with new data.</p><p>This is a wrapper around {module:prediction/model#train}.</p>",
      "summary": "<p>Create a writable stream to train the model with new data.</p>",
      "body": "<p>This is a wrapper around {module:prediction/model#train}.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 228,
    "codeStart": 252,
    "code": "Model.prototype.createWriteStream = function(label) {\n  var self = this;\n  var writeStream = streamEvents(pumpify());\n\n  writeStream.once('writing', function() {\n    var template = JSON.stringify({\n      output: label,\n      csvInstance: [[]]\n    }).split('[]');\n\n    var requestStream = self.request({\n      method: 'PUT',\n      uri: '',\n      headers: {\n        accept: 'application/json',\n        'content-type': 'application/json'\n      }\n    });\n\n    requestStream\n      .on('response', function(resp) {\n        writeStream.emit('response', resp);\n      })\n      .on('prefinish', function() {\n        writeStream.cork();\n      })\n      .on('complete', function(resp) {\n        util.handleResp(null, resp, resp.body, function(err) {\n          if (err) {\n            writeStream.destroy(err);\n            return;\n          }\n\n          writeStream.uncork();\n        });\n      });\n\n    writeStream.setPipeline([\n      through({ encoding: 'utf-8' }),\n      JSONStream.stringify(template[0], ',', template[1]),\n      requestStream\n    ]);\n  });\n\n  return writeStream;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Model",
      "cons": "Model",
      "name": "createWriteStream",
      "string": "Model.prototype.createWriteStream()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Trainedmodels:predict API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/predict}",
        "html": "<p>[Trainedmodels:predict API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/predict}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/predict}</a></p>"
      },
      {
        "type": "param",
        "string": "{string|string[]} input - Input feature(s) to query on the model.",
        "name": "input",
        "description": "<ul>\n<li>Input feature(s) to query on the model.</li>\n</ul>\n",
        "types": [
          "string",
          "Array.<string>"
        ],
        "typesDescription": "<code>string</code>|<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An API error.",
        "name": "callback.err",
        "description": "<ul>\n<li>An API error.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.results - An organized set of results from the\n    prediction.",
        "name": "callback.results",
        "description": "<ul>\n<li>An organized set of results from the     prediction.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} callback.results.winner - The matching result's label.",
        "name": "callback.results.winner",
        "description": "<ul>\n<li>The matching result&#39;s label.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object[]} callback.results.scores - Sorted from highest-to-lowest,\n    all of the results that matched the query.",
        "name": "callback.results.scores",
        "description": "<ul>\n<li>Sorted from highest-to-lowest,     all of the results that matched the query.</li>\n</ul>\n",
        "types": [
          "Array.<object>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>object</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - Raw API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>Raw API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "//-\n// Assuming this is a model used to return a language name that matches any\n// given input, this will ask for the prediction results of an english\n// sentence.\n//-\nmodel.query('Hello', function(err, results) {\n  if (!err) {\n    // `results.winner` == 'english'\n    // `results.scores` == [\n    //   {\n    //     label: 'english',\n    //     score: 1\n    //   },\n    //   ...other results and their scores are listed here.\n    // ]\n  }\n});",
        "html": "<p>//-<br />// Assuming this is a model used to return a language name that matches any<br />// given input, this will ask for the prediction results of an english<br />// sentence.<br />//-<br />model.query(&#39;Hello&#39;, function(err, results) {<br />  if (!err) {<br />    // <code>results.winner</code> == &#39;english&#39;<br />    // <code>results.scores</code> == [<br />    //   {<br />    //     label: &#39;english&#39;,<br />    //     score: 1<br />    //   },<br />    //   ...other results and their scores are listed here.<br />    // ]<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Query the stored data in your model.</p>",
      "summary": "<p>Query the stored data in your model.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 299,
    "codeStart": 333,
    "code": "Model.prototype.query = function(input, callback) {\n  this.request({\n    method: 'POST',\n    uri: '/predict',\n    json: {\n      input: {\n        csvInstance: arrify(input)\n      }\n    }\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var results = {\n      winner: resp.outputLabel || resp.outputValue,\n      scores: resp.outputMulti\n        .sort(function(a, b) {\n          return a.score < b.score ? 1 : a.score > b.score ? -1 : 0;\n        })\n        .map(function(scoreObject) {\n          scoreObject.score = parseFloat(scoreObject.score);\n          return scoreObject;\n        })\n    };\n\n    callback(null, results, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Model",
      "cons": "Model",
      "name": "query",
      "string": "Model.prototype.query()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Trainedmodels: update API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/update}",
        "html": "<p>[Trainedmodels: update API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/update}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/update}</a></p>"
      },
      {
        "type": "param",
        "string": "{string|number} label - The output value, either a regression or class\n    label.",
        "name": "label",
        "description": "<ul>\n<li>The output value, either a regression or class     label.</li>\n</ul>\n",
        "types": [
          "string",
          "number"
        ],
        "typesDescription": "<code>string</code>|<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|string[]} input - The input features for this data entry.",
        "name": "input",
        "description": "<ul>\n<li>The input features for this data entry.</li>\n</ul>\n",
        "types": [
          "string",
          "Array.<string>"
        ],
        "typesDescription": "<code>string</code>|<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An API error.",
        "name": "callback.err",
        "description": "<ul>\n<li>An API error.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - Raw API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>Raw API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "model.train('english', 'Hello from Stephen!', function(err, apiResponse) {\n  if (!err) {\n    // New data was inserted successfully.\n  }\n});",
        "html": "<p>model.train(&#39;english&#39;, &#39;Hello from Stephen!&#39;, function(err, apiResponse) {<br />  if (!err) {<br />    // New data was inserted successfully.<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Update the stored data with new input.</p>",
      "summary": "<p>Update the stored data with new input.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 364,
    "codeStart": 383,
    "code": "Model.prototype.train = function(label, input, callback) {\n  this.setMetadata({\n    output: label,\n    csvInstance: arrify(input)\n  }, callback);\n};\n\nmodule.exports = Model;",
    "ctx": {
      "type": "method",
      "constructor": "Model",
      "cons": "Model",
      "name": "train",
      "string": "Model.prototype.train()"
    }
  }
]