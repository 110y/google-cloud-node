[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "bigquery/dataset",
        "html": "<p>bigquery/dataset</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar extend = require('extend');\nvar is = require('is');\nvar nodeutil = require('util');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/serviceObject}",
        "types": [
          "module:common/serviceObject"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2FserviceObject.html\">common/serviceObject</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/serviceObject}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 31,
    "code": "var ServiceObject = require('../common/service-object.js');",
    "ctx": {
      "type": "declaration",
      "name": "ServiceObject",
      "value": "require('../common/service-object.js')",
      "string": "ServiceObject"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/streamrouter}",
        "types": [
          "module:common/streamrouter"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fstreamrouter.html\">common/streamrouter</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/streamrouter}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 33,
    "codeStart": 37,
    "code": "var streamRouter = require('../common/stream-router.js');",
    "ctx": {
      "type": "declaration",
      "name": "streamRouter",
      "value": "require('../common/stream-router.js')",
      "string": "streamRouter"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:bigquery/table}",
        "types": [
          "module:bigquery/table"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Ftable.html\">bigquery/table</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:bigquery/table}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 43,
    "code": "var Table = require('./table.js');",
    "ctx": {
      "type": "declaration",
      "name": "Table",
      "value": "require('./table.js')",
      "string": "Table"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{module:bigquery} bigQuery - BigQuery instance.",
        "name": "bigQuery",
        "description": "<ul>\n<li>BigQuery instance.</li>\n</ul>\n",
        "types": [
          "module:bigquery"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery.html\">bigquery</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} id - The ID of the Dataset.",
        "name": "id",
        "description": "<ul>\n<li>The ID of the Dataset.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 45,
    "codeStart": 50
  },
  {
    "tags": [
      {
        "type": "alias",
        "string": "module:bigquery/dataset",
        "html": "<p>module:bigquery/dataset</p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud');\n\nvar bigquery = gcloud.bigquery({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\nvar dataset = bigquery.dataset('institutions');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;);</p><p>var bigquery = gcloud.bigquery({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});<br />var dataset = bigquery.dataset(&#39;institutions&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Interact with your BigQuery dataset. Create a Dataset instance with<br />{module:bigquery#createDataset} or {module:bigquery#dataset}.</p>",
      "summary": "<p>Interact with your BigQuery dataset. Create a Dataset instance with<br />{module:bigquery#createDataset} or {module:bigquery#dataset}.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 50,
    "codeStart": 66,
    "code": "function Dataset(bigQuery, id) {\n  var methods = {",
    "ctx": {
      "type": "constructor",
      "name": "Dataset",
      "string": "Dataset()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "dataset.create(function(err, dataset, apiResponse) {\n  if (!err) {\n    // The dataset was created successfully.\n  }\n});",
        "html": "<p>dataset.create(function(err, dataset, apiResponse) {<br />  if (!err) {<br />    // The dataset was created successfully.<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Create a dataset.</p>",
      "summary": "<p>Create a dataset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 68,
    "codeStart": 78,
    "code": "create: true,",
    "ctx": {
      "type": "property",
      "name": "create",
      "value": "true,",
      "string": "create"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} callback.exists - Whether the dataset exists or not.",
        "name": "callback.exists",
        "description": "<ul>\n<li>Whether the dataset exists or not.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "dataset.exists(function(err, exists) {});",
        "html": "<p>dataset.exists(function(err, exists) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Check if the dataset exists.</p>",
      "summary": "<p>Check if the dataset exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 80,
    "codeStart": 91,
    "code": "exists: true,",
    "ctx": {
      "type": "property",
      "name": "exists",
      "value": "true,",
      "string": "exists"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{options=} options - Configuration object.",
        "name": "options",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "options"
        ],
        "typesDescription": "<a href=\"options.html\">options</a>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoCreate - Automatically create the object if\n    it does not exist. Default: `false`",
        "name": "options.autoCreate",
        "description": "<ul>\n<li>Automatically create the object if     it does not exist. Default: <code>false</code></li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "dataset.get(function(err, dataset, apiResponse) {\n  if (!err) {\n    // `dataset.metadata` has been populated.\n  }\n});",
        "html": "<p>dataset.get(function(err, dataset, apiResponse) {<br />  if (!err) {<br />    // <code>dataset.metadata</code> has been populated.<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get a dataset if it exists.</p><p>You may optionally use this to &quot;get or create&quot; an object by providing an<br />object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is<br />normally required for the <code>create</code> method must be contained within this<br />object as well.</p>",
      "summary": "<p>Get a dataset if it exists.</p>",
      "body": "<p>You may optionally use this to &quot;get or create&quot; an object by providing an<br />object with <code>autoCreate</code> set to <code>true</code>. Any extra configuration that is<br />normally required for the <code>create</code> method must be contained within this<br />object as well.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 93,
    "codeStart": 112,
    "code": "get: true,",
    "ctx": {
      "type": "property",
      "name": "get",
      "value": "true,",
      "string": "get"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datasets: get API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/datasets/get}",
        "html": "<p>[Datasets: get API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets/get}\">https://cloud.google.com/bigquery/docs/reference/v2/datasets/get}</a></p>"
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.metadata - The dataset's metadata.",
        "name": "callback.metadata",
        "description": "<ul>\n<li>The dataset&#39;s metadata.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "dataset.getMetadata(function(err, metadata, apiResponse) {});",
        "html": "<p>dataset.getMetadata(function(err, metadata, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the metadata for the Dataset.</p>",
      "summary": "<p>Get the metadata for the Dataset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 114,
    "codeStart": 128,
    "code": "getMetadata: true,",
    "ctx": {
      "type": "property",
      "name": "getMetadata",
      "value": "true,",
      "string": "getMetadata"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datasets: patch API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/datasets/patch}",
        "html": "<p>[Datasets: patch API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets/patch}\">https://cloud.google.com/bigquery/docs/reference/v2/datasets/patch}</a></p>"
      },
      {
        "type": "param",
        "string": "{object} metadata - Metadata to save on the Dataset.",
        "name": "metadata",
        "description": "<ul>\n<li>Metadata to save on the Dataset.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var metadata = {\n  description: 'Info for every institution in the 2013 IPEDS universe'\n};\n\ndataset.setMetadata(metadata, function(err, apiResponse) {});",
        "html": "<p>var metadata = {<br />  description: &#39;Info for every institution in the 2013 IPEDS universe&#39;<br />};</p><p>dataset.setMetadata(metadata, function(err, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Sets the metadata of the Dataset object.</p>",
      "summary": "<p>Sets the metadata of the Dataset object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 130,
    "codeStart": 148,
    "code": "setMetadata: true\n  };\n\n  ServiceObject.call(this, {\nparent: bigQuery,\nbaseUrl: '/datasets',\nid: id,\ncreateMethod: bigQuery.createDataset.bind(bigQuery),\nmethods: methods\n  });\n\n  this.bigQuery = bigQuery;\n}\n\nnodeutil.inherits(Dataset, ServiceObject);",
    "ctx": {
      "type": "property",
      "name": "setMetadata",
      "value": "true",
      "string": "setMetadata"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Tables: insert API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/tables/insert}",
        "html": "<p>[Tables: insert API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/tables/insert}\">https://cloud.google.com/bigquery/docs/reference/v2/tables/insert}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} id - Table id.",
        "name": "id",
        "description": "<ul>\n<li>Table id.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object=} options - Configuration object.",
        "name": "options",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|object} options.schema - A comma-separated list of name:type\n    pairs. Valid types are \"string\", \"integer\", \"float\", \"boolean\", and\n    \"timestamp\". If the type is omitted, it is assumed to be \"string\".\n    Example: \"name:string, age:integer\". Schemas can also be specified as a\n    JSON array of fields, which allows for nested and repeated fields. See\n    a [Table resource](http://goo.gl/sl8Dmg) for more detailed information.",
        "name": "options.schema",
        "description": "<ul>\n<li>A comma-separated list of name:type     pairs. Valid types are &quot;string&quot;, &quot;integer&quot;, &quot;float&quot;, &quot;boolean&quot;, and<br />  &quot;timestamp&quot;. If the type is omitted, it is assumed to be &quot;string&quot;.<br />  Example: &quot;name:string, age:integer&quot;. Schemas can also be specified as a<br />  JSON array of fields, which allows for nested and repeated fields. See<br />  a <a href=\"http://goo.gl/sl8Dmg\">Table resource</a> for more detailed information.</li>\n</ul>\n",
        "types": [
          "string",
          "object"
        ],
        "typesDescription": "<code>string</code>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:bigquery/table} callback.table - The newly created table.",
        "name": "callback.table",
        "description": "<ul>\n<li>The newly created table.</li>\n</ul>\n",
        "types": [
          "module:bigquery/table"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Ftable.html\">bigquery/table</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var tableConfig = {\n  id: 'institution_data',\n\n  // From the data.gov CSV dataset (http://goo.gl/kSE7z6):\n  schema: 'UNITID,INSTNM,ADDR,CITY,STABBR,ZIP,FIPS,OBEREG,CHFNM,...'\n};\n\ndataset.createTable(tableConfig, function(err, table, apiResponse) {});",
        "html": "<p>var tableConfig = {<br />  id: &#39;institution_data&#39;,</p><p>  // From the data.gov CSV dataset (<a href=\"http://goo.gl/kSE7z6\">http://goo.gl/kSE7z6</a>):<br />  schema: &#39;UNITID,INSTNM,ADDR,CITY,STABBR,ZIP,FIPS,OBEREG,CHFNM,...&#39;<br />};</p><p>dataset.createTable(tableConfig, function(err, table, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Create a table given a tableId or configuration object.</p>",
      "summary": "<p>Create a table given a tableId or configuration object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 164,
    "codeStart": 192,
    "code": "Dataset.prototype.createTable = function(id, options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  extend(true, options, {\n    tableReference: {\n      datasetId: this.id,\n      projectId: this.bigQuery.projectId,\n      tableId: id\n    }\n  });\n\n  if (is.string(options.schema)) {\n    options.schema = Table.createSchemaFromString_(options.schema);\n  }\n\n  this.request({\n    method: 'POST',\n    uri: '/tables',\n    json: options\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var table = self.table(resp.tableReference.tableId);\n    table.metadata = resp;\n\n    callback(null, table, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "createTable",
      "string": "Dataset.prototype.createTable()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datasets: delete API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/datasets/delete}",
        "html": "<p>[Datasets: delete API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets/delete}\">https://cloud.google.com/bigquery/docs/reference/v2/datasets/delete}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - The configuration object.",
        "name": "options",
        "description": "<ul>\n<li>The configuration object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.force - Force delete dataset and all tables.\n    Default: false.",
        "name": "options.force",
        "description": "<ul>\n<li>Force delete dataset and all tables.     Default: false.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "//-\n// Delete the dataset, only if it does not have any tables.\n//-\ndataset.delete(function(err, apiResponse) {});\n\n//-\n// Delete the dataset and any tables it contains.\n//-\ndataset.delete({ force: true }, function(err, apiResponse) {});",
        "html": "<p>//-<br />// Delete the dataset, only if it does not have any tables.<br />//-<br />dataset.delete(function(err, apiResponse) {});</p><p>//-<br />// Delete the dataset and any tables it contains.<br />//-<br />dataset.delete({ force: true }, function(err, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Delete the dataset.</p>",
      "summary": "<p>Delete the dataset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 229,
    "codeStart": 252,
    "code": "Dataset.prototype.delete = function(options, callback) {\n  if (!callback) {\n    callback = options;\n    options = {};\n  }\n\n  var query = {\n    deleteContents: !!options.force\n  };\n\n  this.request({\n    method: 'DELETE',\n    uri: '',\n    qs: query\n  }, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "delete",
      "string": "Dataset.prototype.delete()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Tables: list API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/tables/list}",
        "html": "<p>[Tables: list API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/tables/list}\">https://cloud.google.com/bigquery/docs/reference/v2/tables/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} query - Configuration object.",
        "name": "query",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} query.maxResults - Maximum number of results to return.",
        "name": "query.maxResults",
        "description": "<ul>\n<li>Maximum number of results to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.pageToken - Token returned from a previous call, to\n    request the next page of results.",
        "name": "query.pageToken",
        "description": "<ul>\n<li>Token returned from a previous call, to     request the next page of results.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:bigquery/table[]} callback.tables - The list of tables from\n    your Dataset.",
        "name": "callback.tables",
        "description": "<ul>\n<li>The list of tables from     your Dataset.</li>\n</ul>\n",
        "types": [
          "Array.<module:bigquery/table>"
        ],
        "typesDescription": "<code>Array</code>.&lt;module:<a href=\"module%3Abigquery%2Ftable.html\">bigquery/table</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "dataset.getTables(function(err, tables, nextQuery, apiResponse) {\n  // If `nextQuery` is non-null, there are more results to fetch.\n});\n\n//-\n// Get the tables as a readable object stream.\n// `table` is a Table object\n//-\ndataset.getTables()\n  .on('error', console.error)\n  .on('data', function(table) {})\n  .on('end', function() {\n    // All tables have been retrieved\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ndataset.getTables()\n  .on('data', function(table) {\n    this.end();\n  });",
        "html": "<p>dataset.getTables(function(err, tables, nextQuery, apiResponse) {<br />  // If <code>nextQuery</code> is non-null, there are more results to fetch.<br />});</p><p>//-<br />// Get the tables as a readable object stream.<br />// <code>table</code> is a Table object<br />//-<br />dataset.getTables()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(table) {})<br />  .on(&#39;end&#39;, function() {<br />    // All tables have been retrieved<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />dataset.getTables()<br />  .on(&#39;data&#39;, function(table) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of tables.</p>",
      "summary": "<p>Get a list of tables.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 269,
    "codeStart": 311,
    "code": "Dataset.prototype.getTables = function(query, callback) {\n  var that = this;\n\n  if (is.fn(query)) {\n    callback = query;\n    query = {};\n  }\n\n  query = query || {};\n\n  this.request({\n    uri: '/tables',\n    qs: query\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, query, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var tables = (resp.tables || []).map(function(tableObject) {\n      var table = that.table(tableObject.id);\n      table.metadata = tableObject;\n      return table;\n    });\n\n    callback(null, tables, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "getTables",
      "string": "Dataset.prototype.getTables()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Run a query scoped to your dataset.</p><p>See {module:bigquery#query} for full documentation of this method.</p>",
      "summary": "<p>Run a query scoped to your dataset.</p>",
      "body": "<p>See {module:bigquery#query} for full documentation of this method.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 347,
    "codeStart": 352,
    "code": "Dataset.prototype.query = function(options, callback) {\n  if (is.string(options)) {\n    options = {\n      query: options\n    };\n  }\n\n  options = extend(true, {}, options, {\n    defaultDataset: {\n      datasetId: this.id\n    }\n  });\n\n  return this.bigQuery.query(options, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "query",
      "string": "Dataset.prototype.query()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} id - The ID of the table.",
        "name": "id",
        "description": "<ul>\n<li>The ID of the table.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:bigquery/table}",
        "types": [
          "module:bigquery/table"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Ftable.html\">bigquery/table</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:bigquery/table}</p>"
      },
      {
        "type": "example",
        "string": "var institutions = dataset.table('institution_data');",
        "html": "<p>var institutions = dataset.table(&#39;institution_data&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a Table object.</p>",
      "summary": "<p>Create a Table object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 368,
    "codeStart": 377,
    "code": "Dataset.prototype.table = function(id) {\n  return new Table(this, id);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Dataset",
      "cons": "Dataset",
      "name": "table",
      "string": "Dataset.prototype.table()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Developer Documentation</p><p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 381,
    "codeStart": 386,
    "code": "streamRouter.extend(Dataset, ['getTables']);\n\nmodule.exports = Dataset;",
    "ctx": false
  }
]