[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "compute",
        "html": "<p>compute</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar arrify = require('arrify');\nvar extend = require('extend');\nvar is = require('is');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/firewall}",
        "types": [
          "module:compute/firewall"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Ffirewall.html\">compute/firewall</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/firewall}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 31,
    "code": "var Firewall = require('./firewall.js');",
    "ctx": {
      "type": "declaration",
      "name": "Firewall",
      "value": "require('./firewall.js')",
      "string": "Firewall"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/network}",
        "types": [
          "module:compute/network"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fnetwork.html\">compute/network</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/network}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 33,
    "codeStart": 37,
    "code": "var Network = require('./network.js');",
    "ctx": {
      "type": "declaration",
      "name": "Network",
      "value": "require('./network.js')",
      "string": "Network"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/operation}",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/operation}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 43,
    "code": "var Operation = require('./operation.js');",
    "ctx": {
      "type": "declaration",
      "name": "Operation",
      "value": "require('./operation.js')",
      "string": "Operation"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/region}",
        "types": [
          "module:compute/region"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fregion.html\">compute/region</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/region}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 45,
    "codeStart": 49,
    "code": "var Region = require('./region.js');",
    "ctx": {
      "type": "declaration",
      "name": "Region",
      "value": "require('./region.js')",
      "string": "Region"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/snapshot}",
        "types": [
          "module:compute/snapshot"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fsnapshot.html\">compute/snapshot</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/snapshot}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 51,
    "codeStart": 55,
    "code": "var Snapshot = require('./snapshot.js');",
    "ctx": {
      "type": "declaration",
      "name": "Snapshot",
      "value": "require('./snapshot.js')",
      "string": "Snapshot"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/streamrouter}",
        "types": [
          "module:common/streamrouter"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fstreamrouter.html\">common/streamrouter</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/streamrouter}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 57,
    "codeStart": 61,
    "code": "var streamRouter = require('../common/stream-router.js');",
    "ctx": {
      "type": "declaration",
      "name": "streamRouter",
      "value": "require('../common/stream-router.js')",
      "string": "streamRouter"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 63,
    "codeStart": 67,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/zone}",
        "types": [
          "module:compute/zone"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fzone.html\">compute/zone</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/zone}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 69,
    "codeStart": 73,
    "code": "var Zone = require('./zone.js');",
    "ctx": {
      "type": "declaration",
      "name": "Zone",
      "value": "require('./zone.js')",
      "string": "Zone"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "string": "{string}",
        "html": "<p>{string}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 75,
    "codeStart": 79,
    "code": "var COMPUTE_BASE_URL = 'https://www.googleapis.com/compute/v1/projects/';",
    "ctx": {
      "type": "declaration",
      "name": "COMPUTE_BASE_URL",
      "value": "'https://www.googleapis.com/compute/v1/projects/'",
      "string": "COMPUTE_BASE_URL"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "string": "{array}",
        "html": "<p>{array}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Required scopes for Google Compute Engine API.</p>",
      "summary": "<p>Required scopes for Google Compute Engine API.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 81,
    "codeStart": 86,
    "code": "var SCOPES = ['https://www.googleapis.com/auth/compute'];",
    "ctx": {
      "type": "declaration",
      "name": "SCOPES",
      "value": "['https://www.googleapis.com/auth/compute']",
      "string": "SCOPES"
    }
  },
  {
    "tags": [
      {
        "type": "alias",
        "string": "module:compute",
        "html": "<p>module:compute</p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{object} options - [Configuration object](#/docs/?method=gcloud).",
        "name": "options",
        "description": "<ul>\n<li><a href=\"#/docs/?method=gcloud\">Configuration object</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar gce = gcloud.compute();",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var gce = gcloud.compute();</p>"
      }
    ],
    "description": {
      "full": "<p>A Compute object allows you to interact with the Google Compute Engine API.<br />Using this object, you can access your instances with {module:compute/vm},<br />disks with {module:compute/disk}, and firewalls with<br />{module:compute/firewall}.</p>",
      "summary": "<p>A Compute object allows you to interact with the Google Compute Engine API.<br />Using this object, you can access your instances with {module:compute/vm},<br />disks with {module:compute/disk}, and firewalls with<br />{module:compute/firewall}.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 88,
    "codeStart": 107,
    "code": "function Compute(options) {\n  if (!(this instanceof Compute)) {\n    options = util.normalizeArguments(this, options);\n    return new Compute(options);\n  }\n\n  var authConfig = {\n    credentials: options.credentials,\n    keyFile: options.keyFilename,\n    scopes: SCOPES,\n    email: options.email\n  };\n\n  // We store the authConfig for use with gceImages in Zone.\n  this.authConfig = authConfig;\n\n  this.makeAuthenticatedRequest_ =\n    util.makeAuthenticatedRequestFactory(authConfig);\n  this.projectId = options.projectId;\n}",
    "ctx": {
      "type": "constructor",
      "name": "Compute",
      "string": "Compute()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Firewalls Overview]{@link https://cloud.google.com/compute/docs/networking#firewalls}",
        "html": "<p>[Firewalls Overview]{@link <a href=\"https://cloud.google.com/compute/docs/networking#firewalls}\">https://cloud.google.com/compute/docs/networking#firewalls}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Firewalls: insert API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/firewalls/insert}",
        "html": "<p>[Firewalls: insert API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/firewalls/insert}\">https://cloud.google.com/compute/docs/reference/v1/firewalls/insert}</a></p>"
      },
      {
        "type": "throws",
        "string": "{Error} if a name is not provided.",
        "types": [
          "Error"
        ],
        "description": "<p>if a name is not provided.</p>"
      },
      {
        "type": "throws",
        "string": "{Error} if a config object is not provided.",
        "types": [
          "Error"
        ],
        "description": "<p>if a config object is not provided.</p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the firewall.",
        "name": "name",
        "description": "<ul>\n<li>Name of the firewall.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} config - See a\n    [Firewall resource](https://cloud.google.com/compute/docs/reference/v1/firewalls#resource).",
        "name": "config",
        "description": "<ul>\n<li>See a     <a href=\"https://cloud.google.com/compute/docs/reference/v1/firewalls#resource\">Firewall resource</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} config.protocols - A map of protocol to port range. The keys\n    of the object refer to a protocol (e.g. `tcp`, `udp`) and the value for\n    the key are the ports/port-ranges that are allowed to make a connection.",
        "name": "config.protocols",
        "description": "<ul>\n<li>A map of protocol to port range. The keys     of the object refer to a protocol (e.g. <code>tcp</code>, <code>udp</code>) and the value for<br />  the key are the ports/port-ranges that are allowed to make a connection.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string[]} config.ranges - The IP address blocks that this rule\n    applies to, expressed in\n    [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)\n    format.",
        "name": "config.ranges",
        "description": "<ul>\n<li>The IP address blocks that this rule     applies to, expressed in<br />  <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">CIDR</a><br />  format.</li>\n</ul>\n",
        "types": [
          "Array.<string>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string[]} config.tags - Instance tags which this rule applies to.",
        "name": "config.tags",
        "description": "<ul>\n<li>Instance tags which this rule applies to.</li>\n</ul>\n",
        "types": [
          "Array.<string>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/firewall} callback.firewall - The created Firewall\n    object.",
        "name": "callback.firewall",
        "description": "<ul>\n<li>The created Firewall     object.</li>\n</ul>\n",
        "types": [
          "module:compute/firewall"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Ffirewall.html\">compute/firewall</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var config = {\n  protocols: {\n    tcp: [3000],\n    udp: [] // An empty array means all ports are allowed.\n  },\n\n  ranges: ['0.0.0.0/0']\n};\n\nfunction callback(err, firewall, operation, apiResponse) {\n  // `firewall` is a Firewall object.\n\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n}\n\ngce.createFirewall('new-firewall-name', config, callback);",
        "html": "<p>var config = {<br />  protocols: {<br />    tcp: [3000],<br />    udp: [] // An empty array means all ports are allowed.<br />  },</p><p>  ranges: [&#39;0.0.0.0/0&#39;]<br />};</p><p>function callback(err, firewall, operation, apiResponse) {<br />  // <code>firewall</code> is a Firewall object.</p><p>  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />}</p><p>gce.createFirewall(&#39;new-firewall-name&#39;, config, callback);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a firewall.</p>",
      "summary": "<p>Create a firewall.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 128,
    "codeStart": 175,
    "code": "Compute.prototype.createFirewall = function(name, config, callback) {\n  var self = this;\n\n  if (!is.string(name)) {\n    throw new Error('A firewall name must be provided.');\n  }\n\n  if (!is.object(config)) {\n    throw new Error('A firewall configuration object must be provided.');\n  }\n\n  var body = extend({}, config, {\n    name: name\n  });\n\n  if (body.protocols) {\n    body.allowed = arrify(body.allowed);\n\n    for (var protocol in body.protocols) {\n      var allowedConfig = {\n        IPProtocol: protocol\n      };\n\n      var ports = arrify(body.protocols[protocol]);\n      if (ports.length > 0) {\n        allowedConfig.ports = ports;\n      }\n\n      body.allowed.push(allowedConfig);\n    }\n\n    delete body.protocols;\n  }\n\n  if (body.ranges) {\n    body.sourceRanges = arrify(body.ranges);\n    delete body.ranges;\n  }\n\n  if (body.tags) {\n    body.sourceTags = arrify(body.tags);\n    delete body.tags;\n  }\n\n  var path = '/global/firewalls';\n\n  this.makeReq_('POST', path, null, body, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var firewall = self.firewall(name);\n\n    var operation = self.operation(resp.name);\n    operation.metadata = resp;\n\n    callback(null, firewall, operation, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "createFirewall",
      "string": "Compute.prototype.createFirewall()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Networks Overview]{@link https://cloud.google.com/compute/docs/networking#networks}",
        "html": "<p>[Networks Overview]{@link <a href=\"https://cloud.google.com/compute/docs/networking#networks}\">https://cloud.google.com/compute/docs/networking#networks}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Networks: insert API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/networks/insert}",
        "html": "<p>[Networks: insert API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/networks/insert}\">https://cloud.google.com/compute/docs/reference/v1/networks/insert}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the network.",
        "name": "name",
        "description": "<ul>\n<li>Name of the network.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} config - See a\n    [Network resource](https://cloud.google.com/compute/docs/reference/v1/networks#resource).",
        "name": "config",
        "description": "<ul>\n<li>See a     <a href=\"https://cloud.google.com/compute/docs/reference/v1/networks#resource\">Network resource</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} config.gateway - A gateway address for default routing to\n    other networks. (Alias for `config.gatewayIPv4`)",
        "name": "config.gateway",
        "description": "<ul>\n<li>A gateway address for default routing to     other networks. (Alias for <code>config.gatewayIPv4</code>)</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} config.range -\n    [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) range\n    of addresses that are legal on this network. (Alias for\n    `config.IPv4Range`)",
        "name": "config.range",
        "description": "<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">CIDR</a> range<br />of addresses that are legal on this network. (Alias for<br /><code>config.IPv4Range</code>)</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/network} callback.network - The created Network\n    object.",
        "name": "callback.network",
        "description": "<ul>\n<li>The created Network     object.</li>\n</ul>\n",
        "types": [
          "module:compute/network"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fnetwork.html\">compute/network</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var config = {\n  range: '10.240.0.0/16'\n};\n\nfunction callback(err, network, operation, apiResponse) {\n  // `network` is a Network object.\n\n  // `operation` is an Operation object and can be used to check the status\n  // of network creation.\n}\n\ngce.createNetwork('new-network', config, callback);",
        "html": "<p>var config = {<br />  range: &#39;10.240.0.0/16&#39;<br />};</p><p>function callback(err, network, operation, apiResponse) {<br />  // <code>network</code> is a Network object.</p><p>  // <code>operation</code> is an Operation object and can be used to check the status<br />  // of network creation.<br />}</p><p>gce.createNetwork(&#39;new-network&#39;, config, callback);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a network.</p>",
      "summary": "<p>Create a network.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 236,
    "codeStart": 273,
    "code": "Compute.prototype.createNetwork = function(name, config, callback) {\n  var self = this;\n\n  var body = extend({}, config, {\n    name: name\n  });\n\n  if (body.range) {\n    body.IPv4Range = body.range;\n    delete body.range;\n  }\n\n  if (body.gateway) {\n    body.gatewayIPv4 = body.gateway;\n    delete body.gateway;\n  }\n\n  this.makeReq_('POST', '/global/networks', null, body, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var network = self.network(name);\n\n    var operation = self.operation(resp.name);\n    operation.metadata = resp;\n\n    callback(null, network, operation, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "createNetwork",
      "string": "Compute.prototype.createNetwork()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Firewalls Overview]{@link https://cloud.google.com/compute/docs/networking#firewalls}",
        "html": "<p>[Firewalls Overview]{@link <a href=\"https://cloud.google.com/compute/docs/networking#firewalls}\">https://cloud.google.com/compute/docs/networking#firewalls}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing firewall.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing firewall.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/firewall}",
        "types": [
          "module:compute/firewall"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Ffirewall.html\">compute/firewall</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/firewall}</p>"
      },
      {
        "type": "example",
        "string": "var firewall = gce.firewall('existing-firewall');",
        "html": "<p>var firewall = gce.firewall(&#39;existing-firewall&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Compute Engine firewall.</p><p>See {module:compute/network#firewall} to get a Firewall object for a specific<br />network.</p>",
      "summary": "<p>Get a reference to a Google Compute Engine firewall.</p>",
      "body": "<p>See {module:compute/network#firewall} to get a Firewall object for a specific<br />network.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 305,
    "codeStart": 319,
    "code": "Compute.prototype.firewall = function(name) {\n  return new Firewall(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "firewall",
      "string": "Compute.prototype.firewall()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances and Networks]{@link https://cloud.google.com/compute/docs/instances-and-network}",
        "html": "<p>[Instances and Networks]{@link <a href=\"https://cloud.google.com/compute/docs/instances-and-network}\">https://cloud.google.com/compute/docs/instances-and-network}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Addresses: aggregatedList API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/addresses/aggregatedList}",
        "html": "<p>[Addresses: aggregatedList API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/addresses/aggregatedList}\">https://cloud.google.com/compute/docs/reference/v1/addresses/aggregatedList}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Address search options.",
        "name": "options",
        "description": "<ul>\n<li>Address search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of addresses to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of addresses to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/address} callback.addresses - Address objects from\n    your project.",
        "name": "callback.addresses",
        "description": "<ul>\n<li>Address objects from     your project.</li>\n</ul>\n",
        "types": [
          "module:compute/address"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Faddress.html\">compute/address</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getAddresses(function(err, addresses) {\n  // addresses is an array of `Address` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, addresses, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getAddresses(nextQuery, callback);\n  }\n}\n\ngce.getAddresses({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the addresses from your project as a readable object stream.\n//-\ngce.getAddresses()\n  .on('error', console.error)\n  .on('data', function(address) {\n    // `address` is an `Address` object.\n  })\n  .on('end', function() {\n    // All addresses retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getAddresses()\n  .on('data', function(address) {\n    this.end();\n  });",
        "html": "<p>gce.getAddresses(function(err, addresses) {<br />  // addresses is an array of <code>Address</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, addresses, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getAddresses(nextQuery, callback);<br />  }<br />}</p><p>gce.getAddresses({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the addresses from your project as a readable object stream.<br />//-<br />gce.getAddresses()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(address) {<br />    // <code>address</code> is an <code>Address</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All addresses retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getAddresses()<br />  .on(&#39;data&#39;, function(address) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of addresses. For a detailed description of method&#39;s options see<br /><a href=\"https://goo.gl/r9XmXJ\">API reference</a>.</p>",
      "summary": "<p>Get a list of addresses. For a detailed description of method&#39;s options see<br /><a href=\"https://goo.gl/r9XmXJ\">API reference</a>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 323,
    "codeStart": 392,
    "code": "Compute.prototype.getAddresses = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  var path = '/aggregated/addresses';\n\n  this.makeReq_('GET', path, options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var regions = resp.items || {};\n\n    var addresses = Object.keys(regions).reduce(function(acc, regionName) {\n      var region = self.region(regionName.replace('regions/', ''));\n      var regionAddresses = regions[regionName].addresses || [];\n\n      regionAddresses.forEach(function(address) {\n        var addressInstance = region.address(address.name);\n        addressInstance.metadata = address;\n        acc.push(addressInstance);\n      });\n\n      return acc;\n    }, []);\n\n    callback(null, addresses, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getAddresses",
      "string": "Compute.prototype.getAddresses()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Disks Overview]{@link https://cloud.google.com/compute/docs/disks}",
        "html": "<p>[Disks Overview]{@link <a href=\"https://cloud.google.com/compute/docs/disks}\">https://cloud.google.com/compute/docs/disks}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Disks: aggregatedList API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/disks/aggregatedList}",
        "html": "<p>[Disks: aggregatedList API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/disks/aggregatedList}\">https://cloud.google.com/compute/docs/reference/v1/disks/aggregatedList}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Disk search options.",
        "name": "options",
        "description": "<ul>\n<li>Disk search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of disks to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of disks to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/disk} callback.disks - Disk objects from your project.",
        "name": "callback.disks",
        "description": "<ul>\n<li>Disk objects from your project.</li>\n</ul>\n",
        "types": [
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getDisks(function(err, disks) {\n  // `disks` is an array of `Disk` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, disks, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getDisks(nextQuery, callback);\n  }\n}\n\ngce.getDisks({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the disks from your project as a readable object stream.\n//-\ngce.getDisks()\n  .on('error', console.error)\n  .on('data', function(disk) {\n    // `disk` is a `Disk` object.\n  })\n  .on('end', function() {\n    // All disks retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getDisks()\n  .on('data', function(disk) {\n    this.end();\n  });",
        "html": "<p>gce.getDisks(function(err, disks) {<br />  // <code>disks</code> is an array of <code>Disk</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, disks, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getDisks(nextQuery, callback);<br />  }<br />}</p><p>gce.getDisks({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the disks from your project as a readable object stream.<br />//-<br />gce.getDisks()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(disk) {<br />    // <code>disk</code> is a <code>Disk</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All disks retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getDisks()<br />  .on(&#39;data&#39;, function(disk) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of disks.</p>",
      "summary": "<p>Get a list of disks.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 437,
    "codeStart": 504,
    "code": "Compute.prototype.getDisks = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  this.makeReq_('GET', '/aggregated/disks', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var zones = resp.items || {};\n\n    var disks = Object.keys(zones).reduce(function(acc, zoneName) {\n      var zone = self.zone(zoneName.replace('zones/', ''));\n      var disks = zones[zoneName].disks || [];\n\n      disks.forEach(function(disk) {\n        var diskInstance = zone.disk(disk.name);\n        diskInstance.metadata = disk;\n        acc.push(diskInstance);\n      });\n\n      return acc;\n    }, []);\n\n    callback(null, disks, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getDisks",
      "string": "Compute.prototype.getDisks()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Firewalls Overview]{@link https://cloud.google.com/compute/docs/networking#firewalls}",
        "html": "<p>[Firewalls Overview]{@link <a href=\"https://cloud.google.com/compute/docs/networking#firewalls}\">https://cloud.google.com/compute/docs/networking#firewalls}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Firewalls: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/firewalls/list}",
        "html": "<p>[Firewalls: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/firewalls/list}\">https://cloud.google.com/compute/docs/reference/v1/firewalls/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Firewall search options.",
        "name": "options",
        "description": "<ul>\n<li>Firewall search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of firewalls to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of firewalls to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/firewall} callback.firewalls - Firewall objects from\n    your project.",
        "name": "callback.firewalls",
        "description": "<ul>\n<li>Firewall objects from     your project.</li>\n</ul>\n",
        "types": [
          "module:compute/firewall"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Ffirewall.html\">compute/firewall</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getFirewalls(function(err, firewalls) {\n  // `firewalls` is an array of `Firewall` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, firewalls, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getFirewalls(nextQuery, callback);\n  }\n}\n\ngce.getFirewalls({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the firewalls from your project as a readable object stream.\n//-\ngce.getFirewalls()\n  .on('error', console.error)\n  .on('data', function(firewall) {\n    // `firewall` is a `Firewall` object.\n  })\n  .on('end', function() {\n    // All firewalls retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getFirewalls()\n  .on('data', function(firewall) {\n    this.end();\n  });",
        "html": "<p>gce.getFirewalls(function(err, firewalls) {<br />  // <code>firewalls</code> is an array of <code>Firewall</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, firewalls, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getFirewalls(nextQuery, callback);<br />  }<br />}</p><p>gce.getFirewalls({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the firewalls from your project as a readable object stream.<br />//-<br />gce.getFirewalls()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(firewall) {<br />    // <code>firewall</code> is a <code>Firewall</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All firewalls retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getFirewalls()<br />  .on(&#39;data&#39;, function(firewall) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of firewalls.</p>",
      "summary": "<p>Get a list of firewalls.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 547,
    "codeStart": 615,
    "code": "Compute.prototype.getFirewalls = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  this.makeReq_('GET', '/global/firewalls', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var firewalls = (resp.items || []).map(function(firewall) {\n      var firewallInstance = self.firewall(firewall.name);\n      firewallInstance.metadata = firewall;\n      return firewallInstance;\n    });\n\n    callback(null, firewalls, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getFirewalls",
      "string": "Compute.prototype.getFirewalls()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Networks Overview]{@link https://cloud.google.com/compute/docs/networking#networks}",
        "html": "<p>[Networks Overview]{@link <a href=\"https://cloud.google.com/compute/docs/networking#networks}\">https://cloud.google.com/compute/docs/networking#networks}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Networks: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/networks/list}",
        "html": "<p>[Networks: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/networks/list}\">https://cloud.google.com/compute/docs/reference/v1/networks/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Network search options.",
        "name": "options",
        "description": "<ul>\n<li>Network search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of networks to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of networks to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/network} callback.networks - Network objects from your\n    project.",
        "name": "callback.networks",
        "description": "<ul>\n<li>Network objects from your     project.</li>\n</ul>\n",
        "types": [
          "module:compute/network"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fnetwork.html\">compute/network</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getNetworks(function(err, networks) {\n  // `networks` is an array of `Network` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, networks, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getNetworks(nextQuery, callback);\n  }\n}\n\ngce.getNetworks({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the networks from your project as a readable object stream.\n//-\ngce.getNetworks()\n  .on('error', console.error)\n  .on('data', function(network) {\n    // `network` is a `Network` object.\n  })\n  .on('end', function() {\n    // All networks retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getNetworks()\n  .on('data', function(network) {\n    this.end();\n  });",
        "html": "<p>gce.getNetworks(function(err, networks) {<br />  // <code>networks</code> is an array of <code>Network</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, networks, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getNetworks(nextQuery, callback);<br />  }<br />}</p><p>gce.getNetworks({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the networks from your project as a readable object stream.<br />//-<br />gce.getNetworks()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(network) {<br />    // <code>network</code> is a <code>Network</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All networks retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getNetworks()<br />  .on(&#39;data&#39;, function(network) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of networks.</p>",
      "summary": "<p>Get a list of networks.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 649,
    "codeStart": 717,
    "code": "Compute.prototype.getNetworks = function(options, callback) {\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  var self = this;\n  this.makeReq_('GET', '/global/networks', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var networks = (resp.items || []).map(function(network) {\n      var networkInstance = self.network(network.name);\n      networkInstance.metadata = network;\n      return networkInstance;\n    });\n\n    callback(null, networks, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getNetworks",
      "string": "Compute.prototype.getNetworks()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Global Operation Overview]{@link https://cloud.google.com/compute/docs/reference/v1/globalOperations}",
        "html": "<p>[Global Operation Overview]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/globalOperations}\">https://cloud.google.com/compute/docs/reference/v1/globalOperations}</a></p>"
      },
      {
        "type": "resource",
        "string": "[GlobalOperations: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/globalOperations/list}",
        "html": "<p>[GlobalOperations: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/globalOperations/list}\">https://cloud.google.com/compute/docs/reference/v1/globalOperations/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Operation search options.",
        "name": "options",
        "description": "<ul>\n<li>Operation search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of operations to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of operations to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operations - Operation objects\n    from your project.",
        "name": "callback.operations",
        "description": "<ul>\n<li>Operation objects     from your project.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getOperations(function(err, operations) {\n  // `operations` is an array of `Operation` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, operations, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getOperations(nextQuery, callback);\n  }\n}\n\ngce.getOperations({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the operations from your project as a readable object stream.\n//-\ngce.getOperations()\n  .on('error', console.error)\n  .on('data', function(operation) {\n    // `operation` is a `Operation` object.\n  })\n  .on('end', function() {\n    // All operations retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getOperations()\n  .on('data', function(operation) {\n    this.end();\n  });",
        "html": "<p>gce.getOperations(function(err, operations) {<br />  // <code>operations</code> is an array of <code>Operation</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, operations, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getOperations(nextQuery, callback);<br />  }<br />}</p><p>gce.getOperations({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the operations from your project as a readable object stream.<br />//-<br />gce.getOperations()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(operation) {<br />    // <code>operation</code> is a <code>Operation</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All operations retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getOperations()<br />  .on(&#39;data&#39;, function(operation) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of global operations.</p>",
      "summary": "<p>Get a list of global operations.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 750,
    "codeStart": 818,
    "code": "Compute.prototype.getOperations = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  var path = '/global/operations';\n\n  this.makeReq_('GET', path, options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var operations = (resp.items || []).map(function(operation) {\n      var operationInstance = self.operation(operation.name);\n      operationInstance.metadata = operation;\n      return operationInstance;\n    });\n\n    callback(null, operations, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getOperations",
      "string": "Compute.prototype.getOperations()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Regions & Zones Overview]{@link https://cloud.google.com/compute/docs/zones}",
        "html": "<p>[Regions &amp; Zones Overview]{@link <a href=\"https://cloud.google.com/compute/docs/zones}\">https://cloud.google.com/compute/docs/zones}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Regions: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/regions/list}",
        "html": "<p>[Regions: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/regions/list}\">https://cloud.google.com/compute/docs/reference/v1/regions/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Instance search options.",
        "name": "options",
        "description": "<ul>\n<li>Instance search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of instances to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of instances to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/region} callback.regions - Region objects that are\n    available to your project.",
        "name": "callback.regions",
        "description": "<ul>\n<li>Region objects that are     available to your project.</li>\n</ul>\n",
        "types": [
          "module:compute/region"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fregion.html\">compute/region</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getRegions(function(err, regions) {\n  // `regions` is an array of `Region` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, regions, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getRegions(nextQuery, callback);\n  }\n}\n\ngce.getRegions({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the regions available to your project as a readable object stream.\n//-\ngce.getRegions()\n  .on('error', console.error)\n  .on('data', function(region) {\n    // `region` is a `Region` object.\n  })\n  .on('end', function() {\n    // All regions retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getRegions()\n  .on('data', function(region) {\n    this.end();\n  });",
        "html": "<p>gce.getRegions(function(err, regions) {<br />  // <code>regions</code> is an array of <code>Region</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, regions, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getRegions(nextQuery, callback);<br />  }<br />}</p><p>gce.getRegions({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the regions available to your project as a readable object stream.<br />//-<br />gce.getRegions()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(region) {<br />    // <code>region</code> is a <code>Region</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All regions retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getRegions()<br />  .on(&#39;data&#39;, function(region) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Return the regions available to your project.</p>",
      "summary": "<p>Return the regions available to your project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 854,
    "codeStart": 922,
    "code": "Compute.prototype.getRegions = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  this.makeReq_('GET', '/regions', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var regions = resp.items.map(function(region) {\n      var regionInstance = self.region(region.name);\n      regionInstance.metadata = region;\n      return regionInstance;\n    });\n\n    callback(null, regions, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getRegions",
      "string": "Compute.prototype.getRegions()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Snapshots Overview]{@link https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}",
        "html": "<p>[Snapshots Overview]{@link <a href=\"https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}\">https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Snapshots: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/snapshots/list}",
        "html": "<p>[Snapshots: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/snapshots/list}\">https://cloud.google.com/compute/docs/reference/v1/snapshots/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Snapshot search options.",
        "name": "options",
        "description": "<ul>\n<li>Snapshot search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of snapshots to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of snapshots to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/snapshot} callback.snapshots - Snapshot objects from\n    your project.",
        "name": "callback.snapshots",
        "description": "<ul>\n<li>Snapshot objects from     your project.</li>\n</ul>\n",
        "types": [
          "module:compute/snapshot"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fsnapshot.html\">compute/snapshot</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getSnapshots(function(err, snapshots) {\n  // `snapshots` is an array of `Snapshot` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, snapshots, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getSnapshots(nextQuery, callback);\n  }\n}\n\ngce.getSnapshots({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the snapshots from your project as a readable object stream.\n//-\ngce.getSnapshots()\n  .on('error', console.error)\n  .on('data', function(snapshot) {\n    // `snapshot` is a `Snapshot` object.\n  })\n  .on('end', function() {\n    // All snapshots retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getSnapshots()\n  .on('data', function(snapshot) {\n    this.end();\n  });",
        "html": "<p>gce.getSnapshots(function(err, snapshots) {<br />  // <code>snapshots</code> is an array of <code>Snapshot</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, snapshots, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getSnapshots(nextQuery, callback);<br />  }<br />}</p><p>gce.getSnapshots({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the snapshots from your project as a readable object stream.<br />//-<br />gce.getSnapshots()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(snapshot) {<br />    // <code>snapshot</code> is a <code>Snapshot</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All snapshots retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getSnapshots()<br />  .on(&#39;data&#39;, function(snapshot) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of snapshots.</p>",
      "summary": "<p>Get a list of snapshots.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 954,
    "codeStart": 1022,
    "code": "Compute.prototype.getSnapshots = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n\n  this.makeReq_('GET', '/global/snapshots', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var snapshots = (resp.items || []).map(function(snapshot) {\n      var snapshotInstance = self.snapshot(snapshot.name);\n      snapshotInstance.metadata = snapshot;\n      return snapshotInstance;\n    });\n\n    callback(null, snapshots, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getSnapshots",
      "string": "Compute.prototype.getSnapshots()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances and Networks]{@link https://cloud.google.com/compute/docs/instances-and-network}",
        "html": "<p>[Instances and Networks]{@link <a href=\"https://cloud.google.com/compute/docs/instances-and-network}\">https://cloud.google.com/compute/docs/instances-and-network}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Instances: aggregatedList API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/aggregatedList}",
        "html": "<p>[Instances: aggregatedList API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/aggregatedList}\">https://cloud.google.com/compute/docs/reference/v1/instances/aggregatedList}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Instance search options.",
        "name": "options",
        "description": "<ul>\n<li>Instance search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of instances to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of instances to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/vm} callback.vms - VM objects from your project.",
        "name": "callback.vms",
        "description": "<ul>\n<li>VM objects from your project.</li>\n</ul>\n",
        "types": [
          "module:compute/vm"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fvm.html\">compute/vm</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getVMs(function(err, vms) {\n  // `vms` is an array of `VM` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, vms, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getVMs(nextQuery, callback);\n  }\n}\n\ngce.getVMs({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the VM instances from your project as a readable object stream.\n//-\ngce.getVMs()\n  .on('error', console.error)\n  .on('data', function(vm) {\n    // `vm` is a `VM` object.\n  })\n  .on('end', function() {\n    // All vms retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getVMs()\n  .on('data', function(vm) {\n    this.end();\n  });",
        "html": "<p>gce.getVMs(function(err, vms) {<br />  // <code>vms</code> is an array of <code>VM</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, vms, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getVMs(nextQuery, callback);<br />  }<br />}</p><p>gce.getVMs({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the VM instances from your project as a readable object stream.<br />//-<br />gce.getVMs()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(vm) {<br />    // <code>vm</code> is a <code>VM</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All vms retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getVMs()<br />  .on(&#39;data&#39;, function(vm) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get a list of virtual machine instances.</p>",
      "summary": "<p>Get a list of virtual machine instances.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1057,
    "codeStart": 1124,
    "code": "Compute.prototype.getVMs = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  var path = '/aggregated/instances';\n\n  this.makeReq_('GET', path, options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var zones = resp.items || {};\n\n    var vms = Object.keys(zones).reduce(function(acc, zoneName) {\n      var zone = self.zone(zoneName.replace('zones/', ''));\n      var instances = zones[zoneName].instances || [];\n\n      instances.forEach(function(instance) {\n        var vmInstance = zone.vm(instance.name);\n        vmInstance.metadata = instance;\n        acc.push(vmInstance);\n      });\n\n      return acc;\n    }, []);\n\n    callback(null, vms, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getVMs",
      "string": "Compute.prototype.getVMs()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Regions & Zones Overview]{@link https://cloud.google.com/compute/docs/zones}",
        "html": "<p>[Regions &amp; Zones Overview]{@link <a href=\"https://cloud.google.com/compute/docs/zones}\">https://cloud.google.com/compute/docs/zones}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Zones: list API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/zones/list}",
        "html": "<p>[Zones: list API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zones/list}\">https://cloud.google.com/compute/docs/reference/v1/zones/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Instance search options.",
        "name": "options",
        "description": "<ul>\n<li>Instance search options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - Search filter in the format of\n    `{name} {comparison} {filterString}`.\n    - **`name`**: the name of the field to compare\n    - **`comparison`**: the comparison operator, `eq` (equal) or `ne`\n      (not equal)\n    - **`filterString`**: the string to filter to. For string fields, this\n      can be a regular expression.",
        "name": "options.filter",
        "description": "<ul>\n<li>Search filter in the format of     <code>{name} {comparison} {filterString}</code>.<ul>\n<li><strong><code>name</code></strong>: the name of the field to compare</li>\n<li><strong><code>comparison</code></strong>: the comparison operator, <code>eq</code> (equal) or <code>ne</code><br />(not equal)</li>\n<li><strong><code>filterString</code></strong>: the string to filter to. For string fields, this<br />can be a regular expression.</li>\n</ul>\n</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of instances to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of instances to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/zone} callback.zones - Zone objects that are available\n    to your project.",
        "name": "callback.zones",
        "description": "<ul>\n<li>Zone objects that are available     to your project.</li>\n</ul>\n",
        "types": [
          "module:compute/zone"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fzone.html\">compute/zone</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "gce.getZones(function(err, zones) {\n  // `zones` is an array of `Zone` objects.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, zones, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    gce.getZones(nextQuery, callback);\n  }\n}\n\ngce.getZones({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the zones available to your project as a readable object stream.\n//-\ngce.getZones()\n  .on('error', console.error)\n  .on('data', function(zone) {\n    // `zone` is a `Zone` object.\n  })\n  .on('end', function() {\n    // All zones retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\ngce.getZones()\n  .on('data', function(zone) {\n    this.end();\n  });",
        "html": "<p>gce.getZones(function(err, zones) {<br />  // <code>zones</code> is an array of <code>Zone</code> objects.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, zones, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    gce.getZones(nextQuery, callback);<br />  }<br />}</p><p>gce.getZones({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the zones available to your project as a readable object stream.<br />//-<br />gce.getZones()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(zone) {<br />    // <code>zone</code> is a <code>Zone</code> object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All zones retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />gce.getZones()<br />  .on(&#39;data&#39;, function(zone) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Return the zones available to your project.</p>",
      "summary": "<p>Return the zones available to your project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1169,
    "codeStart": 1237,
    "code": "Compute.prototype.getZones = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  this.makeReq_('GET', '/zones', options, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var zones = resp.items.map(function(zone) {\n      var zoneInstance = self.zone(zone.name);\n      zoneInstance.metadata = zone;\n      return zoneInstance;\n    });\n\n    callback(null, zones, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "getZones",
      "string": "Compute.prototype.getZones()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Networks Overview]{@link https://cloud.google.com/compute/docs/networking#networks}",
        "html": "<p>[Networks Overview]{@link <a href=\"https://cloud.google.com/compute/docs/networking#networks}\">https://cloud.google.com/compute/docs/networking#networks}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing network.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing network.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/network}",
        "types": [
          "module:compute/network"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fnetwork.html\">compute/network</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/network}</p>"
      },
      {
        "type": "example",
        "string": "var network = gce.network('network-name');",
        "html": "<p>var network = gce.network(&#39;network-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Compute Engine network.</p>",
      "summary": "<p>Get a reference to a Google Compute Engine network.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1269,
    "codeStart": 1280,
    "code": "Compute.prototype.network = function(name) {\n  return new Network(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "network",
      "string": "Compute.prototype.network()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Global Operation Overview]{@link https://cloud.google.com/compute/docs/reference/v1/globalOperations}",
        "html": "<p>[Global Operation Overview]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/globalOperations}\">https://cloud.google.com/compute/docs/reference/v1/globalOperations}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing operation.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing operation.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/operation}",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/operation}</p>"
      },
      {
        "type": "example",
        "string": "var operation = gce.operation('operation-name');",
        "html": "<p>var operation = gce.operation(&#39;operation-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a global Google Compute Engine operation.</p>",
      "summary": "<p>Get a reference to a global Google Compute Engine operation.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1284,
    "codeStart": 1295,
    "code": "Compute.prototype.operation = function(name) {\n  return new Operation(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "operation",
      "string": "Compute.prototype.operation()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Regions & Zones Overview]{@link https://cloud.google.com/compute/docs/zones}",
        "html": "<p>[Regions &amp; Zones Overview]{@link <a href=\"https://cloud.google.com/compute/docs/zones}\">https://cloud.google.com/compute/docs/zones}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the region.",
        "name": "name",
        "description": "<ul>\n<li>Name of the region.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/region}",
        "types": [
          "module:compute/region"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fregion.html\">compute/region</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/region}</p>"
      },
      {
        "type": "example",
        "string": "var region = gce.region('region-name');",
        "html": "<p>var region = gce.region(&#39;region-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Compute Engine region.</p>",
      "summary": "<p>Get a reference to a Google Compute Engine region.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1299,
    "codeStart": 1310,
    "code": "Compute.prototype.region = function(name) {\n  return new Region(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "region",
      "string": "Compute.prototype.region()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Snapshots Overview]{@link https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}",
        "html": "<p>[Snapshots Overview]{@link <a href=\"https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}\">https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing snapshot.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing snapshot.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/snapshot}",
        "types": [
          "module:compute/snapshot"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fsnapshot.html\">compute/snapshot</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/snapshot}</p>"
      },
      {
        "type": "example",
        "string": "var snapshot = gce.snapshot('snapshot-name');",
        "html": "<p>var snapshot = gce.snapshot(&#39;snapshot-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Compute Engine snapshot.</p>",
      "summary": "<p>Get a reference to a Google Compute Engine snapshot.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1314,
    "codeStart": 1325,
    "code": "Compute.prototype.snapshot = function(name) {\n  return new Snapshot(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "snapshot",
      "string": "Compute.prototype.snapshot()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Regions & Zones Overview]{@link https://cloud.google.com/compute/docs/zones}",
        "html": "<p>[Regions &amp; Zones Overview]{@link <a href=\"https://cloud.google.com/compute/docs/zones}\">https://cloud.google.com/compute/docs/zones}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the zone.",
        "name": "name",
        "description": "<ul>\n<li>Name of the zone.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:compute/zone}",
        "types": [
          "module:compute/zone"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fzone.html\">compute/zone</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:compute/zone}</p>"
      },
      {
        "type": "example",
        "string": "var zone = gce.zone('zone-name');",
        "html": "<p>var zone = gce.zone(&#39;zone-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Compute Engine zone.</p>",
      "summary": "<p>Get a reference to a Google Compute Engine zone.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1329,
    "codeStart": 1340,
    "code": "Compute.prototype.zone = function(name) {\n  return new Zone(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "zone",
      "string": "Compute.prototype.zone()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} method - Action.",
        "name": "method",
        "description": "<ul>\n<li>Action.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} path - Request path.",
        "name": "path",
        "description": "<ul>\n<li>Request path.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} query - Request query object.",
        "name": "query",
        "description": "<ul>\n<li>Request query object.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} body - Request body contents.",
        "name": "body",
        "description": "<ul>\n<li>Request body contents.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1344,
    "codeStart": 1356,
    "code": "Compute.prototype.makeReq_ = function(method, path, query, body, callback) {\n  var reqOpts = {\n    method: method,\n    qs: query,\n    uri: COMPUTE_BASE_URL + this.projectId + path\n  };\n\n  if (body) {\n    reqOpts.json = body;\n  }\n\n  this.makeAuthenticatedRequest_(reqOpts, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Compute",
      "cons": "Compute",
      "name": "makeReq_",
      "string": "Compute.prototype.makeReq_()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Developer Documentation</p><p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1370,
    "codeStart": 1375,
    "code": "streamRouter.extend(Compute, [\n  'getAddresses',\n  'getDisks',\n  'getFirewalls',\n  'getNetworks',\n  'getOperations',\n  'getRegions',\n  'getSnapshots',\n  'getVMs',\n  'getZones'\n]);\n\nmodule.exports = Compute;",
    "ctx": false
  }
]