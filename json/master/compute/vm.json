[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "compute/vm",
        "html": "<p>compute/vm</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar createErrorClass = require('create-error-class');\nvar extend = require('extend');\nvar is = require('is');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:compute/disk}",
        "types": [
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:compute/disk}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 31,
    "code": "var Disk = require('./disk.js');",
    "ctx": {
      "type": "declaration",
      "name": "Disk",
      "value": "require('./disk.js')",
      "string": "Disk"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 33,
    "codeStart": 37,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} message - Custom error message.",
        "name": "message",
        "description": "<ul>\n<li>Custom error message.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Error}",
        "types": [
          "Error"
        ],
        "typesDescription": "<code>Error</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Error}</p>"
      }
    ],
    "description": {
      "full": "<p>Custom error type for errors related to detaching a disk.</p>",
      "summary": "<p>Custom error type for errors related to detaching a disk.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 45,
    "code": "var DetachDiskError = createErrorClass('DetachDiskError', function(message) {\n  this.message = message;\n});",
    "ctx": {
      "type": "declaration",
      "name": "DetachDiskError",
      "value": "createErrorClass('DetachDiskError', function(message) {",
      "string": "DetachDiskError"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{module:zone} zone - Zone object this instance belongs to.",
        "name": "zone",
        "description": "<ul>\n<li>Zone object this instance belongs to.</li>\n</ul>\n",
        "types": [
          "module:zone"
        ],
        "typesDescription": "module:<a href=\"module%3Azone.html\">zone</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} name - Name of the instance.",
        "name": "name",
        "description": "<ul>\n<li>Name of the instance.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 49,
    "codeStart": 54
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances and Networks]{@link https://cloud.google.com/compute/docs/instances-and-network}",
        "html": "<p>[Instances and Networks]{@link <a href=\"https://cloud.google.com/compute/docs/instances-and-network}\">https://cloud.google.com/compute/docs/instances-and-network}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Instance Resource]{@link https://cloud.google.com/compute/docs/reference/v1/instances}",
        "html": "<p>[Instance Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances}\">https://cloud.google.com/compute/docs/reference/v1/instances}</a></p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:compute/vm",
        "html": "<p>module:compute/vm</p>"
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar gce = gcloud.compute();\n\nvar zone = gce.zone('zone-name');\n\nvar vm = zone.vm('vm-name');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var gce = gcloud.compute();</p><p>var zone = gce.zone(&#39;zone-name&#39;);</p><p>var vm = zone.vm(&#39;vm-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>An Instance object allows you to interact with a Google Compute Engine<br />instance.</p>",
      "summary": "<p>An Instance object allows you to interact with a Google Compute Engine<br />instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 54,
    "codeStart": 76,
    "code": "function VM(zone, name) {\n  this.zone = zone;\n  this.name = name;\n  this.metadata = {};\n}",
    "ctx": {
      "type": "constructor",
      "name": "VM",
      "string": "VM()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Disks Overview]{@link https://cloud.google.com/compute/docs/disks}",
        "html": "<p>[Disks Overview]{@link <a href=\"https://cloud.google.com/compute/docs/disks}\">https://cloud.google.com/compute/docs/disks}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Disk Resource]{@link https://cloud.google.com/compute/docs/reference/v1/disks}",
        "html": "<p>[Disk Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/disks}\">https://cloud.google.com/compute/docs/reference/v1/disks}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Instance: attachDisk API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/attachDisk}",
        "html": "<p>[Instance: attachDisk API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/attachDisk}\">https://cloud.google.com/compute/docs/reference/v1/instances/attachDisk}</a></p>"
      },
      {
        "type": "throws",
        "string": "{Error} if a {module:compute/disk} is not provided.",
        "types": [
          "Error"
        ],
        "description": "<p>if a {module:compute/disk} is not provided.</p>"
      },
      {
        "type": "param",
        "string": "{module:compute/disk} disk - The disk to attach.",
        "name": "disk",
        "description": "<ul>\n<li>The disk to attach.</li>\n</ul>\n",
        "types": [
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object=} options - See the\n    [Instances: attachDisk](https://cloud.google.com/compute/docs/reference/v1/instances/attachDisk)\n    request body.",
        "name": "options",
        "description": "<ul>\n<li>See the     <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/attachDisk\">Instances: attachDisk</a><br />  request body.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.readOnly - Attach the disk in read-only mode. (Alias\n    for `options.mode = READ_ONLY`)",
        "name": "options.readOnly",
        "description": "<ul>\n<li>Attach the disk in read-only mode. (Alias     for <code>options.mode = READ_ONLY</code>)</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var disk = zone.disk('my-disk');\n\nfunction callback(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n}\n\nvm.attachDisk(disk, callback);\n\n//-\n// Provide an options object to customize the request.\n//-\nvar options = {\n  autoDelete: true,\n  readOnly: true\n};\n\nvm.attachDisk(disk, options, callback);",
        "html": "<p>var disk = zone.disk(&#39;my-disk&#39;);</p><p>function callback(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />}</p><p>vm.attachDisk(disk, callback);</p><p>//-<br />// Provide an options object to customize the request.<br />//-<br />var options = {<br />  autoDelete: true,<br />  readOnly: true<br />};</p><p>vm.attachDisk(disk, options, callback);</p>"
      }
    ],
    "description": {
      "full": "<p>Attach a disk to the instance.</p>",
      "summary": "<p>Attach a disk to the instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 82,
    "codeStart": 123,
    "code": "VM.prototype.attachDisk = function(disk, options, callback) {\n  if (!(disk instanceof Disk)) {\n    throw new Error('A Disk object must be provided.');\n  }\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  var body = extend({}, options, {\n    source: disk.formattedName\n  });\n\n  if (body.readOnly) {\n    body.mode = 'READ_ONLY';\n    delete body.readOnly;\n  }\n\n  this.makeReq_('POST', '/attachDisk', null, body, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "attachDisk",
      "string": "VM.prototype.attachDisk()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instance: delete API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/delete}",
        "html": "<p>[Instance: delete API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/delete}\">https://cloud.google.com/compute/docs/reference/v1/instances/delete}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "vm.delete(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});",
        "html": "<p>vm.delete(function(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Delete the instance.</p>",
      "summary": "<p>Delete the instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 145,
    "codeStart": 162,
    "code": "VM.prototype.delete = function(callback) {\n  this.makeReq_('DELETE', '', null, null, callback || util.noop);\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "delete",
      "string": "VM.prototype.delete()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instance: detachDisk API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/detachDisk}",
        "html": "<p>[Instance: detachDisk API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/detachDisk}\">https://cloud.google.com/compute/docs/reference/v1/instances/detachDisk}</a></p>"
      },
      {
        "type": "throws",
        "string": "{Error} if a {module:compute/disk} is not provided.",
        "types": [
          "Error"
        ],
        "description": "<p>if a {module:compute/disk} is not provided.</p>"
      },
      {
        "type": "param",
        "string": "{module:compute/disk} disk - The disk to detach.",
        "name": "disk",
        "description": "<ul>\n<li>The disk to detach.</li>\n</ul>\n",
        "types": [
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var disk = zone.disk('my-disk');\n\nvm.detachDisk(disk, function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});",
        "html": "<p>var disk = zone.disk(&#39;my-disk&#39;);</p><p>vm.detachDisk(disk, function(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Detach a disk from the instance.</p>",
      "summary": "<p>Detach a disk from the instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 166,
    "codeStart": 188,
    "code": "VM.prototype.detachDisk = function(disk, callback) {\n  var self = this;\n\n  if (!(disk instanceof Disk)) {\n    throw new Error('A Disk object must be provided.');\n  }\n\n  this.getMetadata(function(err, metadata) {\n    if (err) {\n      callback(new DetachDiskError(err.message));\n      return;\n    }\n\n    var deviceName;\n    var baseUrl = 'https://www.googleapis.com/compute/v1/';\n    var disks = metadata.disks || [];\n\n    // Try to find the deviceName by matching the source of the attached disks\n    // to the name of the disk provided by the user.\n    for (var i = 0; !deviceName && i < disks.length; i++) {\n      var attachedDisk = disks[i];\n      var source = attachedDisk.source.replace(baseUrl, '');\n\n      if (source === disk.formattedName) {\n        deviceName = attachedDisk.deviceName;\n      }\n    }\n\n    if (!deviceName) {\n      callback(new DetachDiskError('Device name for this disk was not found.'));\n      return;\n    }\n\n    var query = {\n      deviceName: deviceName\n    };\n\n    self.makeReq_('POST', '/detachDisk', query, null, callback || util.noop);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "detachDisk",
      "string": "VM.prototype.detachDisk()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instance Resource]{@link https://cloud.google.com/compute/docs/reference/v1/instances}",
        "html": "<p>[Instance Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances}\">https://cloud.google.com/compute/docs/reference/v1/instances}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Instance: get API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/get}",
        "html": "<p>[Instance: get API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/get}\">https://cloud.google.com/compute/docs/reference/v1/instances/get}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.metadata - The instance's metadata.",
        "name": "callback.metadata",
        "description": "<ul>\n<li>The instance&#39;s metadata.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "vm.getMetadata(function(err, metadata, apiResponse) {});",
        "html": "<p>vm.getMetadata(function(err, metadata, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the instances&#39;s metadata.</p>",
      "summary": "<p>Get the instances&#39;s metadata.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 229,
    "codeStart": 243,
    "code": "VM.prototype.getMetadata = function(callback) {\n  var self = this;\n\n  callback = callback || util.noop;\n\n  this.makeReq_('GET', '', null, null, function(err, _, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    self.metadata = resp;\n\n    callback(null, self.metadata, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "getMetadata",
      "string": "VM.prototype.getMetadata()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances: getSerialPortOutput API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/getSerialPortOutput}",
        "html": "<p>[Instances: getSerialPortOutput API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/getSerialPortOutput}\">https://cloud.google.com/compute/docs/reference/v1/instances/getSerialPortOutput}</a></p>"
      },
      {
        "type": "param",
        "string": "{number=} port - The port from which the output is retrieved (1-4).\n   Default: `1`.",
        "name": "port",
        "description": "<ul>\n<li>The port from which the output is retrieved (1-4).    Default: <code>1</code>.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.output - The output from the port.",
        "name": "callback.output",
        "description": "<ul>\n<li>The output from the port.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "vm.getSerialPortOutput(function(err, output, apiResponse) {});",
        "html": "<p>vm.getSerialPortOutput(function(err, output, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Returns the serial port output for the instance.</p>",
      "summary": "<p>Returns the serial port output for the instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 260,
    "codeStart": 275,
    "code": "VM.prototype.getSerialPortOutput = function(port, callback) {\n  if (is.fn(port)) {\n    callback = port;\n    port = 1;\n  }\n\n  var query = {\n    port: port\n  };\n\n  this.makeReq_('GET', '/serialPort', query, null, function(err, _, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    callback(null, resp.contents, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "getSerialPortOutput",
      "string": "VM.prototype.getSerialPortOutput()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object[]} callback.tags - Tag objects from this VM.",
        "name": "callback.tags",
        "description": "<ul>\n<li>Tag objects from this VM.</li>\n</ul>\n",
        "types": [
          "Array.<object>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>object</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} callback.fingerprint - The current tag fingerprint.",
        "name": "callback.fingerprint",
        "description": "<ul>\n<li>The current tag fingerprint.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "vm.getTags(function(err, tags, fingerprint, apiResponse) {});",
        "html": "<p>vm.getTags(function(err, tags, fingerprint, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the instance&#39;s tags and their fingerprint.</p><p>This method wraps {module:compute/vm#getMetadata}, returning only the <code>tags</code><br />property.</p>",
      "summary": "<p>Get the instance&#39;s tags and their fingerprint.</p>",
      "body": "<p>This method wraps {module:compute/vm#getMetadata}, returning only the <code>tags</code><br />property.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 295,
    "codeStart": 310,
    "code": "VM.prototype.getTags = function(callback) {\n  this.getMetadata(function(err, metadata, apiResponse) {\n    if (err) {\n      callback(err, null, null, apiResponse);\n      return;\n    }\n\n    callback(null, metadata.tags.items, metadata.tags.fingerprint, apiResponse);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "getTags",
      "string": "VM.prototype.getTags()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances: reset API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/reset}",
        "html": "<p>[Instances: reset API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/reset}\">https://cloud.google.com/compute/docs/reference/v1/instances/reset}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "vm.reset(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});",
        "html": "<p>vm.reset(function(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Reset the instance.</p>",
      "summary": "<p>Reset the instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 321,
    "codeStart": 338,
    "code": "VM.prototype.reset = function(callback) {\n  this.makeReq_('POST', '/reset', null, null, callback || util.noop);\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "reset",
      "string": "VM.prototype.reset()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances: setTags API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/setTags}",
        "html": "<p>[Instances: setTags API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/setTags}\">https://cloud.google.com/compute/docs/reference/v1/instances/setTags}</a></p>"
      },
      {
        "type": "param",
        "string": "{string[]} tags - The new tags for the instance.",
        "name": "tags",
        "description": "<ul>\n<li>The new tags for the instance.</li>\n</ul>\n",
        "types": [
          "Array.<string>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} fingerprint - The current tags fingerprint. An up-to-date\n    fingerprint must be provided.",
        "name": "fingerprint",
        "description": "<ul>\n<li>The current tags fingerprint. An up-to-date     fingerprint must be provided.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "vm.getTags(function(err, tags, fingerprint) {\n  tags.push('new-tag');\n\n vm.setTags(tags, fingerprint, function(err, operation, apiResponse) {\n    // `operation` is an Operation object that can be used to check the\n    //  status of the request.\n  });\n});",
        "html": "<p>vm.getTags(function(err, tags, fingerprint) {<br />  tags.push(&#39;new-tag&#39;);</p><p> vm.setTags(tags, fingerprint, function(err, operation, apiResponse) {<br />    // <code>operation</code> is an Operation object that can be used to check the<br />    //  status of the request.<br />  });<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Set the instance&#39;s tags.</p>",
      "summary": "<p>Set the instance&#39;s tags.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 342,
    "codeStart": 366,
    "code": "VM.prototype.setTags = function(tags, fingerprint, callback) {\n  var body = {\n    items: tags,\n    fingerprint: fingerprint\n  };\n\n  this.makeReq_('POST', '/setTags', null, body, callback || util.noop);\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "setTags",
      "string": "VM.prototype.setTags()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances: start API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/start}",
        "html": "<p>[Instances: start API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/start}\">https://cloud.google.com/compute/docs/reference/v1/instances/start}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "vm.start(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});",
        "html": "<p>vm.start(function(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Start the instance.</p>",
      "summary": "<p>Start the instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 375,
    "codeStart": 392,
    "code": "VM.prototype.start = function(callback) {\n  this.makeReq_('POST', '/start', null, null, callback || util.noop);\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "start",
      "string": "VM.prototype.start()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Instances: stop API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/instances/stop}",
        "html": "<p>[Instances: stop API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/instances/stop}\">https://cloud.google.com/compute/docs/reference/v1/instances/stop}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "vm.stop(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});",
        "html": "<p>vm.stop(function(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Stop the instance.</p>",
      "summary": "<p>Stop the instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 396,
    "codeStart": 413,
    "code": "VM.prototype.stop = function(callback) {\n  this.makeReq_('POST', '/stop', null, null, callback || util.noop);\n};",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "stop",
      "string": "VM.prototype.stop()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} method - Action.",
        "name": "method",
        "description": "<ul>\n<li>Action.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} path - Request path.",
        "name": "path",
        "description": "<ul>\n<li>Request path.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} query - Request query object.",
        "name": "query",
        "description": "<ul>\n<li>Request query object.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} body - Request body contents.",
        "name": "body",
        "description": "<ul>\n<li>Request body contents.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p><p>Most operations on a VM are long-running. This method handles building an<br />operation and returning it to the user&#39;s provided callback. In methods that<br />don&#39;t require an operation, we simply don&#39;t do anything with the <code>Operation</code><br />object.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": "<p>Most operations on a VM are long-running. This method handles building an<br />operation and returning it to the user&#39;s provided callback. In methods that<br />don&#39;t require an operation, we simply don&#39;t do anything with the <code>Operation</code><br />object.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 417,
    "codeStart": 434,
    "code": "VM.prototype.makeReq_ = function(method, path, query, body, callback) {\n  path = '/instances/' + this.name + path;\n\n  var zone = this.zone;\n\n  zone.makeReq_(method, path, query, body, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var operation = zone.operation(resp.name);\n    operation.metadata = resp;\n\n    callback(null, operation, resp);\n  });\n};\n\nmodule.exports = VM;",
    "ctx": {
      "type": "method",
      "constructor": "VM",
      "cons": "VM",
      "name": "makeReq_",
      "string": "VM.prototype.makeReq_()"
    }
  }
]