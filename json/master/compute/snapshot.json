[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "compute/snapshot",
        "html": "<p>compute/snapshot</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar nodeutil = require('util');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/serviceObject}",
        "types": [
          "module:common/serviceObject"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2FserviceObject.html\">common/serviceObject</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/serviceObject}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 29,
    "code": "var ServiceObject = require('../common/service-object.js');",
    "ctx": {
      "type": "declaration",
      "name": "ServiceObject",
      "value": "require('../common/service-object.js')",
      "string": "ServiceObject"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 31,
    "codeStart": 35,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{module:compute|module:compute/disk} scope - The parent scope this\n    snapshot belongs to. If it's a Disk, we expose the `create` methods.",
        "name": "scope",
        "description": "<ul>\n<li>The parent scope this     snapshot belongs to. If it&#39;s a Disk, we expose the <code>create</code> methods.</li>\n</ul>\n",
        "types": [
          "module:compute",
          "module:compute/disk"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute.html\">compute</a>|module:<a href=\"module%3Acompute%2Fdisk.html\">compute/disk</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} name - Snapshot name.",
        "name": "name",
        "description": "<ul>\n<li>Snapshot name.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 37,
    "codeStart": 43
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Snapshots Overview]{@link https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}",
        "html": "<p>[Snapshots Overview]{@link <a href=\"https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}\">https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Snapshot Resource]{@link https://cloud.google.com/compute/docs/reference/v1/snapshots}",
        "html": "<p>[Snapshot Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/snapshots}\">https://cloud.google.com/compute/docs/reference/v1/snapshots}</a></p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:compute/snapshot",
        "html": "<p>module:compute/snapshot</p>"
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar gce = gcloud.compute();\n\nvar snapshot = gce.snapshot('snapshot-name');\n\n//-\n// Or, access through a disk.\n//-\nvar disk = gce.zone('us-central1-a').disk('disk-name');\nvar snapshot = disk.snapshot('disk-snapshot-name');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var gce = gcloud.compute();</p><p>var snapshot = gce.snapshot(&#39;snapshot-name&#39;);</p><p>//-<br />// Or, access through a disk.<br />//-<br />var disk = gce.zone(&#39;us-central1-a&#39;).disk(&#39;disk-name&#39;);<br />var snapshot = disk.snapshot(&#39;disk-snapshot-name&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>A Snapshot object allows you to interact with a Google Compute Engine<br />snapshot.</p>",
      "summary": "<p>A Snapshot object allows you to interact with a Google Compute Engine<br />snapshot.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 43,
    "codeStart": 69,
    "code": "function Snapshot(scope, name) {\n  var isDisk = scope.constructor.name === 'Disk';\n\n  var methods = {",
    "ctx": {
      "type": "constructor",
      "name": "Snapshot",
      "string": "Snapshot()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} callback.exists - Whether the snapshot exists or not.",
        "name": "callback.exists",
        "description": "<ul>\n<li>Whether the snapshot exists or not.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "snapshot.exists(function(err, exists) {});",
        "html": "<p>snapshot.exists(function(err, exists) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Check if the snapshot exists.</p>",
      "summary": "<p>Check if the snapshot exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 73,
    "codeStart": 84,
    "code": "exists: true,",
    "ctx": {
      "type": "property",
      "name": "exists",
      "value": "true,",
      "string": "exists"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{options=} options - Configuration object.",
        "name": "options",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "options"
        ],
        "typesDescription": "<a href=\"options.html\">options</a>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoCreate - Automatically create the object if\n    it does not exist. Default: `false`",
        "name": "options.autoCreate",
        "description": "<ul>\n<li>Automatically create the object if     it does not exist. Default: <code>false</code></li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "snapshot.get(function(err, snapshot, apiResponse) {\n  // `snapshot` is a Snapshot object.\n});",
        "html": "<p>snapshot.get(function(err, snapshot, apiResponse) {<br />  // <code>snapshot</code> is a Snapshot object.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get a snapshot if it exists.</p><p>If you access this snapshot through a Disk object, this can be used as a<br />&quot;get or create&quot; method. Pass an object with <code>autoCreate</code> set to <code>true</code>.<br />Any extra configuration that is normally required for the <code>create</code> method<br />must be contained within this object as well.</p>",
      "summary": "<p>Get a snapshot if it exists.</p>",
      "body": "<p>If you access this snapshot through a Disk object, this can be used as a<br />&quot;get or create&quot; method. Pass an object with <code>autoCreate</code> set to <code>true</code>.<br />Any extra configuration that is normally required for the <code>create</code> method<br />must be contained within this object as well.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 86,
    "codeStart": 103,
    "code": "get: true,",
    "ctx": {
      "type": "property",
      "name": "get",
      "value": "true,",
      "string": "get"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Snapshot Resource]{@link https://cloud.google.com/compute/docs/reference/v1/snapshots}",
        "html": "<p>[Snapshot Resource]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/snapshots}\">https://cloud.google.com/compute/docs/reference/v1/snapshots}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Snapshots: get API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/snapshots/get}",
        "html": "<p>[Snapshots: get API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/snapshots/get}\">https://cloud.google.com/compute/docs/reference/v1/snapshots/get}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.metadata - The snapshot's metadata.",
        "name": "callback.metadata",
        "description": "<ul>\n<li>The snapshot&#39;s metadata.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "snapshot.getMetadata(function(err, metadata, apiResponse) {});",
        "html": "<p>snapshot.getMetadata(function(err, metadata, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the snapshots&#39;s metadata.</p>",
      "summary": "<p>Get the snapshots&#39;s metadata.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 105,
    "codeStart": 120,
    "code": "getMetadata: true\n  };\n\n  var config = {\nparent: scope,\nbaseUrl: '/global/snapshots',\nid: name,\nmethods: methods\n  };\n\n  if (isDisk) {\nconfig.createMethod = scope.createSnapshot.bind(scope);",
    "ctx": {
      "type": "property",
      "name": "getMetadata",
      "value": "true",
      "string": "getMetadata"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{object} config - See {module:compute/disk#createSnapshot}.",
        "name": "config",
        "description": "<ul>\n<li>See {module:compute/disk#createSnapshot}.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "snapshot.create(function(err, snapshot, operation, apiResponse) {\n  // `snapshot` is a Snapshot object.\n\n  // `operation` is an Operation object that can be used to check the\n  // status of the request.\n});",
        "html": "<p>snapshot.create(function(err, snapshot, operation, apiResponse) {<br />  // <code>snapshot</code> is a Snapshot object.</p><p>  // <code>operation</code> is an Operation object that can be used to check the<br />  // status of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Create a snapshot.</p><p><strong>This is only available if you accessed this object through<br />{module:compute/disk#snapshot}.</strong></p>",
      "summary": "<p>Create a snapshot.</p>",
      "body": "<p><strong>This is only available if you accessed this object through<br />{module:compute/disk#snapshot}.</strong></p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 133,
    "codeStart": 149,
    "code": "config.methods.create = true;\n  }\n\n  ServiceObject.call(this, config);\n\n  this.compute = isDisk ? scope.compute : scope;\n  this.name = name;\n}\n\nnodeutil.inherits(Snapshot, ServiceObject);",
    "ctx": {
      "type": "property",
      "receiver": "config.methods",
      "name": "create",
      "value": "true",
      "string": "config.methods.create"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Snapshots: delete API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/snapshots/delete}",
        "html": "<p>[Snapshots: delete API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/snapshots/delete}\">https://cloud.google.com/compute/docs/reference/v1/snapshots/delete}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:compute/operation} callback.operation - An operation object\n    that can be used to check the status of the request.",
        "name": "callback.operation",
        "description": "<ul>\n<li>An operation object     that can be used to check the status of the request.</li>\n</ul>\n",
        "types": [
          "module:compute/operation"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute%2Foperation.html\">compute/operation</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "snapshot.delete(function(err, operation, apiResponse) {\n  // `operation` is an Operation object that can be used to check the status\n  // of the request.\n});",
        "html": "<p>snapshot.delete(function(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object that can be used to check the status<br />  // of the request.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Delete the snapshot.</p>",
      "summary": "<p>Delete the snapshot.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 160,
    "codeStart": 177,
    "code": "Snapshot.prototype.delete = function(callback) {\n  callback = callback || util.noop;\n\n  var compute = this.compute;\n\n  ServiceObject.prototype.delete.call(this, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var operation = compute.operation(resp.name);\n    operation.metadata = resp;\n\n    callback(null, operation, resp);\n  });\n};\n\nmodule.exports = Snapshot;",
    "ctx": {
      "type": "method",
      "constructor": "Snapshot",
      "cons": "Snapshot",
      "name": "delete",
      "string": "Snapshot.prototype.delete()"
    }
  }
]