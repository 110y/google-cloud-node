[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "compute/operation",
        "html": "<p>compute/operation</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar events = require('events');\nvar modelo = require('modelo');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/serviceObject}",
        "types": [
          "module:common/serviceObject"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2FserviceObject.html\">common/serviceObject</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/serviceObject}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 26,
    "codeStart": 30,
    "code": "var ServiceObject = require('../common/service-object.js');",
    "ctx": {
      "type": "declaration",
      "name": "ServiceObject",
      "value": "require('../common/service-object.js')",
      "string": "ServiceObject"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 32,
    "codeStart": 36,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{module:compute} scope - The scope of the operation: a `Compute`,\n    `Zone`, or `Region` object.",
        "name": "scope",
        "description": "<ul>\n<li>The scope of the operation: a <code>Compute</code>,     <code>Zone</code>, or <code>Region</code> object.</li>\n</ul>\n",
        "types": [
          "module:compute"
        ],
        "typesDescription": "module:<a href=\"module%3Acompute.html\">compute</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} name - Operation name.",
        "name": "name",
        "description": "<ul>\n<li>Operation name.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 38,
    "codeStart": 44
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:compute/operation",
        "html": "<p>module:compute/operation</p>"
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar gce = gcloud.compute();\n\n//-\n// Reference a global operation.\n//-\nvar operation = gce.operation('operation-id');\n\n//-\n// Reference a region operation.\n//-\nvar region = gce.region('us-central1');\nvar operation = region.operation('operation-id');\n\n//-\n// Reference a zone operation.\n//-\nvar zone = gce.zone('us-central1-a');\nvar operation = zone.operation('operation-id');\n\n//-\n// All operations are event emitters. The status of each operation is polled\n// continuously, starting only after you register a \"complete\" listener.\n//-\noperation.on('complete', function(metadata) {\n  // The operation is complete.\n});\n\n//-\n// Be sure to register an error handler as well to catch any issues which\n// impeded the operation.\n//-\noperation.on('error', function(err) {\n  // An error occurred during the operation.\n});\n\n//-\n// To force the Operation object to stop polling for updates, simply remove\n// any \"complete\" listeners you've registered.\n//\n// The easiest way to do this is with `removeAllListeners()`.\n//-\noperation.removeAllListeners();",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var gce = gcloud.compute();</p><p>//-<br />// Reference a global operation.<br />//-<br />var operation = gce.operation(&#39;operation-id&#39;);</p><p>//-<br />// Reference a region operation.<br />//-<br />var region = gce.region(&#39;us-central1&#39;);<br />var operation = region.operation(&#39;operation-id&#39;);</p><p>//-<br />// Reference a zone operation.<br />//-<br />var zone = gce.zone(&#39;us-central1-a&#39;);<br />var operation = zone.operation(&#39;operation-id&#39;);</p><p>//-<br />// All operations are event emitters. The status of each operation is polled<br />// continuously, starting only after you register a &quot;complete&quot; listener.<br />//-<br />operation.on(&#39;complete&#39;, function(metadata) {<br />  // The operation is complete.<br />});</p><p>//-<br />// Be sure to register an error handler as well to catch any issues which<br />// impeded the operation.<br />//-<br />operation.on(&#39;error&#39;, function(err) {<br />  // An error occurred during the operation.<br />});</p><p>//-<br />// To force the Operation object to stop polling for updates, simply remove<br />// any &quot;complete&quot; listeners you&#39;ve registered.<br />//<br />// The easiest way to do this is with <code>removeAllListeners()</code>.<br />//-<br />operation.removeAllListeners();</p>"
      }
    ],
    "description": {
      "full": "<p>An Operation object allows you to interact with a Google Compute Engine<br />operation.</p><p>An operation can be a<br /><a href=\"https://cloud.google.com/compute/docs/reference/v1/globalOperations\">GlobalOperation</a>,<br /><a href=\"https://cloud.google.com/compute/docs/reference/v1/regionOperations\">RegionOperation</a>,<br />or<br /><a href=\"https://cloud.google.com/compute/docs/reference/v1/zoneOperations\">ZoneOperation</a>.</p>",
      "summary": "<p>An Operation object allows you to interact with a Google Compute Engine<br />operation.</p>",
      "body": "<p>An operation can be a<br /><a href=\"https://cloud.google.com/compute/docs/reference/v1/globalOperations\">GlobalOperation</a>,<br /><a href=\"https://cloud.google.com/compute/docs/reference/v1/regionOperations\">RegionOperation</a>,<br />or<br /><a href=\"https://cloud.google.com/compute/docs/reference/v1/zoneOperations\">ZoneOperation</a>.</p>"
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 44,
    "codeStart": 106,
    "code": "function Operation(scope, name) {\n  var isCompute = scope.constructor.name === 'Compute';\n\n  var methods = {",
    "ctx": {
      "type": "constructor",
      "name": "Operation",
      "string": "Operation()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[GlobalOperations: delete API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/globalOperations/delete}",
        "html": "<p>[GlobalOperations: delete API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/globalOperations/delete}\">https://cloud.google.com/compute/docs/reference/v1/globalOperations/delete}</a></p>"
      },
      {
        "type": "resource",
        "string": "[RegionOperations: delete API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/regionOperations/delete}",
        "html": "<p>[RegionOperations: delete API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/regionOperations/delete}\">https://cloud.google.com/compute/docs/reference/v1/regionOperations/delete}</a></p>"
      },
      {
        "type": "resource",
        "string": "[ZoneOperations: delete API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/zoneOperations/delete}",
        "html": "<p>[ZoneOperations: delete API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zoneOperations/delete}\">https://cloud.google.com/compute/docs/reference/v1/zoneOperations/delete}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "operation.delete(function(err, apiResponse) {});",
        "html": "<p>operation.delete(function(err, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Delete the operation.</p>",
      "summary": "<p>Delete the operation.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 110,
    "codeStart": 125,
    "code": "delete: true,",
    "ctx": {
      "type": "property",
      "name": "delete",
      "value": "true,",
      "string": "delete"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this\n    request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this     request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} callback.exists - Whether the operation exists or not.",
        "name": "callback.exists",
        "description": "<ul>\n<li>Whether the operation exists or not.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "operation.exists(function(err, exists) {});",
        "html": "<p>operation.exists(function(err, exists) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Check if the operation exists.</p>",
      "summary": "<p>Check if the operation exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 127,
    "codeStart": 138,
    "code": "exists: true,",
    "ctx": {
      "type": "property",
      "name": "exists",
      "value": "true,",
      "string": "exists"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "operation.get(function(err, operation, apiResponse) {\n  // `operation` is an Operation object.\n});",
        "html": "<p>operation.get(function(err, operation, apiResponse) {<br />  // <code>operation</code> is an Operation object.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get an operation if it exists.</p>",
      "summary": "<p>Get an operation if it exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 140,
    "codeStart": 148,
    "code": "get: true\n  };\n\n  ServiceObject.call(this, {\nparent: scope,\nbaseUrl: isCompute ? '/global/operations' : '/operations',\nid: name,\nmethods: methods\n  });\n\n  events.EventEmitter.call(this);\n\n  this.completeListeners = 0;\n  this.hasActiveListeners = false;\n  this.name = name;\n\n  this.listenForEvents_();\n}\n\nmodelo.inherits(Operation, ServiceObject, events.EventEmitter);",
    "ctx": {
      "type": "property",
      "name": "get",
      "value": "true",
      "string": "get"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[GlobalOperations: get API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/globalOperations/get}",
        "html": "<p>[GlobalOperations: get API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/globalOperations/get}\">https://cloud.google.com/compute/docs/reference/v1/globalOperations/get}</a></p>"
      },
      {
        "type": "resource",
        "string": "[RegionOperations: get API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/regionOperations/get}",
        "html": "<p>[RegionOperations: get API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/regionOperations/get}\">https://cloud.google.com/compute/docs/reference/v1/regionOperations/get}</a></p>"
      },
      {
        "type": "resource",
        "string": "[ZoneOperations: get API Documentation]{@link https://cloud.google.com/compute/docs/reference/v1/zoneOperations/get}",
        "html": "<p>[ZoneOperations: get API Documentation]{@link <a href=\"https://cloud.google.com/compute/docs/reference/v1/zoneOperations/get}\">https://cloud.google.com/compute/docs/reference/v1/zoneOperations/get}</a></p>"
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.metadata - The disk's metadata.",
        "name": "callback.metadata",
        "description": "<ul>\n<li>The disk&#39;s metadata.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "operation.getMetadata(function(err, metadata, apiResponse) {\n  // `metadata.error`: Contains errors if the operation failed.\n  // `metadata.warnings`: Contains warnings.\n});",
        "html": "<p>operation.getMetadata(function(err, metadata, apiResponse) {<br />  // <code>metadata.error</code>: Contains errors if the operation failed.<br />  // <code>metadata.warnings</code>: Contains warnings.<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get the operation&#39;s metadata. For a detailed description of metadata see<br /><a href=\"https://goo.gl/sWm1rt\">Operation resource</a>.</p>",
      "summary": "<p>Get the operation&#39;s metadata. For a detailed description of metadata see<br /><a href=\"https://goo.gl/sWm1rt\">Operation resource</a>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 169,
    "codeStart": 188,
    "code": "Operation.prototype.getMetadata = function(callback) {\n  var self = this;\n\n  callback = callback || util.noop;\n\n  ServiceObject.prototype.getMetadata.call(this, function(err, apiResponse) {\n    // An Operation entity contains a property named `error`. This makes\n    // `request` think the operation failed, and will return an ApiError to\n    // this callback. We have to make sure this isn't a false error by seeing if\n    // the response body contains a property that wouldn't exist on a failed API\n    // request (`name`).\n    var requestFailed = err && (!apiResponse || apiResponse.name !== self.name);\n\n    if (requestFailed) {\n      callback(err, null, apiResponse);\n      return;\n    }\n\n    self.metadata = apiResponse;\n\n    callback(null, self.metadata, apiResponse);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Operation",
      "cons": "Operation",
      "name": "getMetadata",
      "string": "Operation.prototype.getMetadata()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Begin listening for events on the operation. This method keeps track of how<br />many &quot;complete&quot; listeners are registered and removed, making sure polling is<br />handled automatically.</p><p>As long as there is one active &quot;complete&quot; listener, the connection is open.<br />When there are no more listeners, the polling stops.</p>",
      "summary": "<p>Begin listening for events on the operation. This method keeps track of how<br />many &quot;complete&quot; listeners are registered and removed, making sure polling is<br />handled automatically.</p>",
      "body": "<p>As long as there is one active &quot;complete&quot; listener, the connection is open.<br />When there are no more listeners, the polling stops.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 212,
    "codeStart": 222,
    "code": "Operation.prototype.listenForEvents_ = function() {\n  var self = this;\n\n  this.on('newListener', function(event) {\n    if (event === 'complete') {\n      self.completeListeners++;\n\n      if (!self.hasActiveListeners) {\n        self.hasActiveListeners = true;\n        self.startPolling_();\n      }\n    }\n  });\n\n  this.on('removeListener', function(event) {\n    if (event === 'complete' && --self.completeListeners === 0) {\n      self.hasActiveListeners = false;\n    }\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Operation",
      "cons": "Operation",
      "name": "listenForEvents_",
      "string": "Operation.prototype.listenForEvents_()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Poll <code>getMetadata</code> to check the operation&#39;s status. This runs a loop to ping<br />the API on an interval.</p><p>Note: This method is automatically called once a &quot;complete&quot; event handler is<br />registered on the operation.</p>",
      "summary": "<p>Poll <code>getMetadata</code> to check the operation&#39;s status. This runs a loop to ping<br />the API on an interval.</p>",
      "body": "<p>Note: This method is automatically called once a &quot;complete&quot; event handler is<br />registered on the operation.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 243,
    "codeStart": 252,
    "code": "Operation.prototype.startPolling_ = function() {\n  var self = this;\n\n  if (!this.hasActiveListeners) {\n    return;\n  }\n\n  this.getMetadata(function(err, metadata, apiResponse) {\n    // Parsing the response body will automatically create an ApiError object if\n    // the operation failed.\n    var parsedHttpRespBody = util.parseHttpRespBody(apiResponse);\n    err = err || parsedHttpRespBody.err;\n\n    if (err) {\n      self.emit('error', err);\n      return;\n    }\n\n    if (metadata.status !== 'DONE') {\n      setTimeout(self.startPolling_.bind(self), 500);\n      return;\n    }\n\n    self.emit('complete', metadata);\n  });\n};\n\nmodule.exports = Operation;",
    "ctx": {
      "type": "method",
      "constructor": "Operation",
      "cons": "Operation",
      "name": "startPolling_",
      "string": "Operation.prototype.startPolling_()"
    }
  }
]