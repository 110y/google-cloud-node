[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "ignore": true
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@module storage</p>",
      "summary": "<p>@module storage</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": true,
    "code": "'use strict';\n\nvar extend = require('extend');"
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:storage/bucket</p>",
      "summary": "<p>@type module:storage/bucket</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var Bucket = require('./bucket.js');",
    "ctx": {
      "type": "declaration",
      "name": "Bucket",
      "value": "require('./bucket.js')",
      "string": "Bucket"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@type module:common/util</p>",
      "summary": "<p>@type module:common/util</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "string": "{array}"
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Required scopes for Google Cloud Storage API.</p>",
      "summary": "<p>Required scopes for Google Cloud Storage API.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var SCOPES = ['https://www.googleapis.com/auth/devstorage.full_control'];",
    "ctx": {
      "type": "declaration",
      "name": "SCOPES",
      "value": "['https://www.googleapis.com/auth/devstorage.full_control']",
      "string": "SCOPES"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>@const {string}</p>",
      "summary": "<p>@const {string}</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var STORAGE_BASE_URL = 'https://www.googleapis.com/storage/v1/b';",
    "ctx": {
      "type": "declaration",
      "name": "STORAGE_BASE_URL",
      "value": "'https://www.googleapis.com/storage/v1/b'",
      "string": "STORAGE_BASE_URL"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object"
        ],
        "name": "config",
        "description": "- Configuration object."
      }
    ],
    "description": {
      "full": "<p>Developer Documentation</p><p>Invoke this method to create a new Storage object bound with pre-determined<br />configuration options. For each object that can be created (e.g., a bucket),<br />there is an equivalent static and instance method. While they are classes,<br />they can be instantiated without use of the <code>new</code> keyword.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>Invoke this method to create a new Storage object bound with pre-determined<br />configuration options. For each object that can be created (e.g., a bucket),<br />there is an equivalent static and instance method. While they are classes,<br />they can be instantiated without use of the <code>new</code> keyword.</p>"
    },
    "isPrivate": false,
    "ignore": true
  },
  {
    "tags": [
      {
        "type": "alias",
        "string": "module:storage"
      },
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud');\n\n//-\n// From Google Compute Engine and Google App Engine.\n//-\n\n// Access `storage` through the `gcloud` module directly.\nvar musicBucket = gcloud.storage().bucket('music');\n\n//-\n// Elsewhere.\n//-\n\n// Provide configuration details up-front.\nvar myProject = gcloud({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\nvar albums = myProject.storage().bucket('albums');\nvar photos = myProject.storage().bucket('photos');\n\n\n// Override default configuration details.\nvar storage = myProject.storage({\n  keyFilename: '/path/to/another/keyfile.json'\n});\nvar records = storage.bucket('records');"
      }
    ],
    "description": {
      "full": "<p>To access your Cloud Storage buckets, you will use the <code>bucket</code> function<br />returned from this <code>storage</code> object.</p><p>The example below will demonstrate the different usage patterns your app may<br />need to connect to <code>gcloud</code> and access your bucket.</p>",
      "summary": "<p>To access your Cloud Storage buckets, you will use the <code>bucket</code> function<br />returned from this <code>storage</code> object.</p>",
      "body": "<p>The example below will demonstrate the different usage patterns your app may<br />need to connect to <code>gcloud</code> and access your bucket.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function Storage(config) {\n  if (!(this instanceof Storage)) {\n    return new Storage(config);\n  }\n\n  this.makeAuthorizedRequest_ = util.makeAuthorizedRequest({\n    credentials: config.credentials,\n    keyFile: config.keyFilename,\n    scopes: SCOPES\n  });\n\n  this.projectId = config.projectId;\n}",
    "ctx": {
      "type": "function",
      "name": "Storage",
      "string": "Storage()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object",
          "string"
        ],
        "name": "name",
        "description": "- Name of the existing bucket."
      },
      {
        "type": "return",
        "types": [
          "module:storage",
          "bucket"
        ],
        "description": ""
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar albums = gcloud.storage().bucket('albums');\nvar photos = gcloud.storage().bucket('photos');"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Google Cloud Storage bucket.</p>",
      "summary": "<p>Get a reference to a Google Cloud Storage bucket.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Storage.prototype.bucket = function(name) {\n  return new Bucket(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Storage",
      "cons": "Storage",
      "name": "bucket",
      "string": "Storage.prototype.bucket()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If a name is not provided. "
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "name",
        "description": "- Name of the bucket to create."
      },
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "metadata",
        "description": "- Metadata to set for the bucket."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "storage.createBucket('new-bucket', function(err, bucket) {\n  // `bucket` is a Bucket object.\n});\n\n// Specifying metadata.\nvar metadata = {\n  mainPageSuffix: '/unknown/',\n  maxAgeSeconds: 90\n};\nstorage.createBucket('new-bucket', metadata, function(err, bucket) {\n  // `bucket` is a Bucket object.\n});"
      }
    ],
    "description": {
      "full": "<p>Create a bucket.</p>",
      "summary": "<p>Create a bucket.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Storage.prototype.createBucket = function(name, metadata, callback) {\n  if (!name) {\n    throw new Error('A name is required to create a bucket.');\n  }\n  if (!callback) {\n    callback = metadata;\n    metadata = {};\n  }\n  var query = {\n    project: this.projectId\n  };\n  var body = extend(metadata, {\n    name: name\n  });\n  this.makeReq_('POST', '', query, body, function(err, resp) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    var bucket = this.bucket(name);\n    bucket.metadata = resp;\n    callback(null, bucket);\n  }.bind(this));\n};",
    "ctx": {
      "type": "method",
      "constructor": "Storage",
      "cons": "Storage",
      "name": "createBucket",
      "string": "Storage.prototype.createBucket()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "object="
        ],
        "name": "query",
        "description": "- Query object."
      },
      {
        "type": "param",
        "types": [
          "number"
        ],
        "name": "query.maxResults",
        "description": "- Maximum number of items plus prefixes to     return."
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "query.pageToken",
        "description": "- A previously-returned page token     representing part of the larger set of results to view."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function. "
      },
      {
        "type": "example",
        "string": "storage.getBuckets(function(err, buckets, nextQuery) {\n  if (nextQuery) {\n    // nextQuery will be non-null if there are more results.\n    storage.getBuckets(nextQuery, function(err, buckets, nextQuery) {});\n  }\n\n  // The `metadata` property is populated for you with the metadata at the\n  // time of fetching.\n  buckets[0].metadata;\n\n  // However, in cases where you are concerned the metadata could have\n  // changed, use the `getMetadata` method.\n  buckets[0].getMetadata(function(err, metadata) {});\n});\n\n//-\n// Fetch using a query.\n//-\nstorage.getBuckets({\n  maxResults: 5\n}, function(err, buckets, nextQuery) {});"
      }
    ],
    "description": {
      "full": "<p>Get Bucket objects for all of the buckets in your project.</p>",
      "summary": "<p>Get Bucket objects for all of the buckets in your project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Storage.prototype.getBuckets = function(query, callback) {\n  var that = this;\n  if (!callback) {\n    callback = query;\n    query = {};\n  }\n  query.project = query.project || this.projectId;\n  this.makeReq_('GET', '', query, null, function(err, resp) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    var buckets = (resp.items || []).map(function(item) {\n      var bucket = that.bucket(item.id);\n      bucket.metadata = item;\n      return bucket;\n    });\n    var nextQuery = null;\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, query, { pageToken: resp.nextPageToken });\n    }\n    callback(null, buckets, nextQuery);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Storage",
      "cons": "Storage",
      "name": "getBuckets",
      "string": "Storage.prototype.getBuckets()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "visibility": "private"
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "method",
        "description": "- Action."
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "name": "path",
        "description": "- Request path."
      },
      {
        "type": "param",
        "types": [
          "*"
        ],
        "name": "query",
        "description": "- Request query object."
      },
      {
        "type": "param",
        "types": [
          "*"
        ],
        "name": "body",
        "description": "- Request body contents."
      },
      {
        "type": "param",
        "types": [
          "function"
        ],
        "name": "callback",
        "description": "- The callback function."
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Storage.prototype.makeReq_ = function(method, path, query, body, callback) {\n  var reqOpts = {\n    method: method,\n    qs: query,\n    uri: STORAGE_BASE_URL + path\n  };\n\n  if (body) {\n    reqOpts.json = body;\n  }\n\n  this.makeAuthorizedRequest_(reqOpts, callback);\n};\n\nmodule.exports = Storage;",
    "ctx": {
      "type": "method",
      "constructor": "Storage",
      "cons": "Storage",
      "name": "makeReq_",
      "string": "Storage.prototype.makeReq_()"
    }
  }
]