[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "translate",
        "html": "<p>translate</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar arrify = require('arrify');\nvar extend = require('extend');\nvar is = require('is');\nvar prop = require('propprop');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 28,
    "codeStart": 32,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:translate",
        "html": "<p>module:translate</p>"
      },
      {
        "type": "resource",
        "string": "[Getting Started]{@link https://cloud.google.com/translate/v2/getting_started}",
        "html": "<p>[Getting Started]{@link <a href=\"https://cloud.google.com/translate/v2/getting_started}\">https://cloud.google.com/translate/v2/getting_started}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Identifying your application to Google]{@link https://cloud.google.com/translate/v2/using_rest#auth}",
        "html": "<p>[Identifying your application to Google]{@link <a href=\"https://cloud.google.com/translate/v2/using_rest#auth}\">https://cloud.google.com/translate/v2/using_rest#auth}</a></p>"
      },
      {
        "type": "throws",
        "string": "{Error} If an API key is not provided.",
        "types": [
          "Error"
        ],
        "description": "<p>If an API key is not provided.</p>"
      },
      {
        "type": "param",
        "string": "{object} options - [Configuration object](#/docs/?method=gcloud).",
        "name": "options",
        "description": "<ul>\n<li><a href=\"#/docs/?method=gcloud\">Configuration object</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.key - An API key.",
        "name": "options.key",
        "description": "<ul>\n<li>An API key.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar translate = gcloud.translate({\n  key: 'API Key'\n});",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var translate = gcloud.translate({<br />  key: &#39;API Key&#39;<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>With <a href=\"https://cloud.google.com/translate\">Google Translate</a>, you can<br />dynamically translate text between thousands of language pairs.</p><p>The Google Translate API lets websites and programs integrate with Google<br />Translate programmatically.</p><p>Google Translate API is available as a paid service. See the<br /><a href=\"https://cloud.google.com/translate/v2/pricing.html\">Pricing</a> and<br /><a href=\"https://cloud.google.com/translate/v2/faq.html\">FAQ</a> pages for details.</p><p><strong>An API key is required for Translate.</strong> See<br /><a href=\"https://cloud.google.com/translate/v2/using_rest#auth\">Identifying your application to Google</a>.</p>",
      "summary": "<p>With <a href=\"https://cloud.google.com/translate\">Google Translate</a>, you can<br />dynamically translate text between thousands of language pairs.</p>",
      "body": "<p>The Google Translate API lets websites and programs integrate with Google<br />Translate programmatically.</p><p>Google Translate API is available as a paid service. See the<br /><a href=\"https://cloud.google.com/translate/v2/pricing.html\">Pricing</a> and<br /><a href=\"https://cloud.google.com/translate/v2/faq.html\">FAQ</a> pages for details.</p><p><strong>An API key is required for Translate.</strong> See<br /><a href=\"https://cloud.google.com/translate/v2/using_rest#auth\">Identifying your application to Google</a>.</p>"
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 34,
    "codeStart": 69,
    "code": "function Translate(options) {\n  if (!(this instanceof Translate)) {\n    options = util.normalizeArguments(this, options, {\n      projectIdRequired: false\n    });\n    return new Translate(options);\n  }\n\n  if (!options.key) {\n    throw new Error('An API key is required to use the Translate API.');\n  }\n\n  this.options = options;\n  this.key = options.key;\n}",
    "ctx": {
      "type": "constructor",
      "name": "Translate",
      "string": "Translate()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Detect Language]{@link https://cloud.google.com/translate/v2/using_rest#detect-language}",
        "html": "<p>[Detect Language]{@link <a href=\"https://cloud.google.com/translate/v2/using_rest#detect-language}\">https://cloud.google.com/translate/v2/using_rest#detect-language}</a></p>"
      },
      {
        "type": "param",
        "string": "{string|string[]} input - The source string input.",
        "name": "input",
        "description": "<ul>\n<li>The source string input.</li>\n</ul>\n",
        "types": [
          "string",
          "Array.<string>"
        ],
        "typesDescription": "<code>string</code>|<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object|object[]} callback.results - If a single string input was\n    given, a single result object is given. Otherwise, it is an array of\n    result objects.",
        "name": "callback.results",
        "description": "<ul>\n<li>If a single string input was     given, a single result object is given. Otherwise, it is an array of<br />  result objects.</li>\n</ul>\n",
        "types": [
          "object",
          "Array.<object>"
        ],
        "typesDescription": "<code>object</code>|<code>Array</code>.&lt;<code>object</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} callback.results[].language - The language code matched from\n    the input.",
        "name": "callback.results[].language",
        "description": "<ul>\n<li>The language code matched from     the input.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number=} callback.results[].confidence - A float 0 - 1. The higher\n    the number, the higher the confidence in language detection. Note, this\n    is not always returned from the API.",
        "name": "callback.results[].confidence",
        "description": "<ul>\n<li>A float 0 - 1. The higher     the number, the higher the confidence in language detection. Note, this<br />  is not always returned from the API.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} callback.input - The original input that this was result was\n    based on.",
        "name": "callback.input",
        "description": "<ul>\n<li>The original input that this was result was     based on.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - Raw API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>Raw API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "//-\n// Detect the language from a single string input.\n//-\ntranslate.detect('Hello', function(err, results) {\n  if (!err) {\n    // results = {\n    //   language: 'en',\n    //   confidence: 1,\n    //   input: 'Hello'\n    // }\n  }\n});\n\n//-\n// Detect the languages used in multiple strings. Note that the results are\n// now provied as an array.\n//-\ntranslate.detect([\n  'Hello',\n  'Hola'\n], function(err, results) {\n  if (!err) {\n    // results = [\n    //   {\n    //     language: 'en',\n    //     confidence: 1,\n    //     input: 'Hello'\n    //   },\n    //   {\n    //     language: 'es',\n    //     confidence: 1,\n    //     input: 'Hola'\n    //   }\n    // ]\n  }\n});",
        "html": "<p>//-<br />// Detect the language from a single string input.<br />//-<br />translate.detect(&#39;Hello&#39;, function(err, results) {<br />  if (!err) {<br />    // results = {<br />    //   language: &#39;en&#39;,<br />    //   confidence: 1,<br />    //   input: &#39;Hello&#39;<br />    // }<br />  }<br />});</p><p>//-<br />// Detect the languages used in multiple strings. Note that the results are<br />// now provied as an array.<br />//-<br />translate.detect([<br />  &#39;Hello&#39;,<br />  &#39;Hola&#39;<br />], function(err, results) {<br />  if (!err) {<br />    // results = [<br />    //   {<br />    //     language: &#39;en&#39;,<br />    //     confidence: 1,<br />    //     input: &#39;Hello&#39;<br />    //   },<br />    //   {<br />    //     language: &#39;es&#39;,<br />    //     confidence: 1,<br />    //     input: &#39;Hola&#39;<br />    //   }<br />    // ]<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Detect the language used in a string or multiple strings.</p>",
      "summary": "<p>Detect the language used in a string or multiple strings.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 85,
    "codeStart": 143,
    "code": "Translate.prototype.detect = function(input, callback) {\n  input = arrify(input);\n\n  this.request({\n    uri: '/detect',\n    useQuerystring: true,\n    qs: {\n      q: input\n    }\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var results = resp.data.detections.map(function(detection, index) {\n      var result = extend({}, detection[0], {\n        input: input[index]\n      });\n\n      // Deprecated.\n      delete result.isReliable;\n\n      return result;\n    });\n\n    if (input.length === 1) {\n      results = results[0];\n    }\n\n    callback(null, results, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Translate",
      "cons": "Translate",
      "name": "detect",
      "string": "Translate.prototype.detect()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Discover Supported Languages]{@link https://cloud.google.com/translate/v2/using_rest#supported-languages}",
        "html": "<p>[Discover Supported Languages]{@link <a href=\"https://cloud.google.com/translate/v2/using_rest#supported-languages}\">https://cloud.google.com/translate/v2/using_rest#supported-languages}</a></p>"
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string[]} callback.languages - The supported ISO 639-1 language\n    codes.",
        "name": "callback.languages",
        "description": "<ul>\n<li>The supported ISO 639-1 language     codes.</li>\n</ul>\n",
        "types": [
          "Array.<string>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - Raw API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>Raw API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "translate.getLanguages(function(err, languages) {\n  if (!err) {\n    // languages = [\n    //   'af',\n    //   'ar',\n    //   'az',\n    //   ...\n    // ]\n  }\n});",
        "html": "<p>translate.getLanguages(function(err, languages) {<br />  if (!err) {<br />    // languages = [<br />    //   &#39;af&#39;,<br />    //   &#39;ar&#39;,<br />    //   &#39;az&#39;,<br />    //   ...<br />    // ]<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Get an array of all supported languages.</p>",
      "summary": "<p>Get an array of all supported languages.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 177,
    "codeStart": 200,
    "code": "Translate.prototype.getLanguages = function(callback) {\n  this.request({\n    uri: '/languages'\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var languages = resp.data.languages.map(prop('language'));\n    callback(null, languages, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Translate",
      "cons": "Translate",
      "name": "getLanguages",
      "string": "Translate.prototype.getLanguages()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Translate Text](https://cloud.google.com/translate/v2/using_rest#Translate)",
        "html": "<p><a href=\"https://cloud.google.com/translate/v2/using_rest#Translate\">Translate Text</a></p>"
      },
      {
        "type": "throws",
        "string": "{Error} If `options` is provided as an object without a `to`\n    property.",
        "types": [
          "Error"
        ],
        "description": "<p>If <code>options</code> is provided as an object without a <code>to</code>     property.</p>"
      },
      {
        "type": "param",
        "string": "{string|string[]} input - The source string input.",
        "name": "input",
        "description": "<ul>\n<li>The source string input.</li>\n</ul>\n",
        "types": [
          "string",
          "Array.<string>"
        ],
        "typesDescription": "<code>string</code>|<code>Array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|object=} options - If a string, it is interpreted as the\n    target ISO 639-1 language code to translate the source input to. (e.g.\n    `en` for English). If an object, you may also specify the source\n    language.",
        "name": "options",
        "description": "<ul>\n<li>If a string, it is interpreted as the     target ISO 639-1 language code to translate the source input to. (e.g.<br />  <code>en</code> for English). If an object, you may also specify the source<br />  language.</li>\n</ul>\n",
        "types": [
          "string",
          "object"
        ],
        "typesDescription": "<code>string</code>|<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.from - The ISO 639-1 language code the source input\n    is written in.",
        "name": "options.from",
        "description": "<ul>\n<li>The ISO 639-1 language code the source input     is written in.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.to - The ISO 639-1 language code to translate the\n    input to.",
        "name": "options.to",
        "description": "<ul>\n<li>The ISO 639-1 language code to translate the     input to.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object|object[]} callback.translations - If a single string input was\n    given, a single translation is given. Otherwise, it is an array of\n    translations.",
        "name": "callback.translations",
        "description": "<ul>\n<li>If a single string input was     given, a single translation is given. Otherwise, it is an array of<br />  translations.</li>\n</ul>\n",
        "types": [
          "object",
          "Array.<object>"
        ],
        "typesDescription": "<code>object</code>|<code>Array</code>.&lt;<code>object</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - Raw API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>Raw API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "//-\n// Pass a string and a language code to get the translation.\n//-\ntranslate.translate('Hello', 'es', function(err, translation) {\n  if (!err) {\n    // translation = 'Hola'\n  }\n});\n\n//-\n// The source language is auto-detected by default. To manually set it,\n// provide an object.\n//-\nvar options = {\n  from: 'en',\n  to: 'es'\n};\n\ntranslate.translate('Hello', options, function(err, translation) {\n  if (!err) {\n    // translation = 'Hola'\n  }\n});\n\n//-\n// Translate multiple strings of input. Note that the results are\n// now provied as an array.\n//-\nvar input = [\n  'Hello',\n  'How are you today?'\n];\n\ntranslate.translate(input, 'es', function(err, translations) {\n  if (!err) {\n    // translations = [\n    //   'Hola',\n    //   'Como estas hoy?'\n    // ]\n  }\n});",
        "html": "<p>//-<br />// Pass a string and a language code to get the translation.<br />//-<br />translate.translate(&#39;Hello&#39;, &#39;es&#39;, function(err, translation) {<br />  if (!err) {<br />    // translation = &#39;Hola&#39;<br />  }<br />});</p><p>//-<br />// The source language is auto-detected by default. To manually set it,<br />// provide an object.<br />//-<br />var options = {<br />  from: &#39;en&#39;,<br />  to: &#39;es&#39;<br />};</p><p>translate.translate(&#39;Hello&#39;, options, function(err, translation) {<br />  if (!err) {<br />    // translation = &#39;Hola&#39;<br />  }<br />});</p><p>//-<br />// Translate multiple strings of input. Note that the results are<br />// now provied as an array.<br />//-<br />var input = [<br />  &#39;Hello&#39;,<br />  &#39;How are you today?&#39;<br />];</p><p>translate.translate(input, &#39;es&#39;, function(err, translations) {<br />  if (!err) {<br />    // translations = [<br />    //   &#39;Hola&#39;,<br />    //   &#39;Como estas hoy?&#39;<br />    // ]<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Translate a string or multiple strings into another language.</p>",
      "summary": "<p>Translate a string or multiple strings into another language.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 214,
    "codeStart": 281,
    "code": "Translate.prototype.translate = function(input, options, callback) {\n  var query = {\n    q: arrify(input)\n  };\n\n  if (is.string(options)) {\n    query.target = options;\n  } else {\n    if (options.from) {\n      query.source = options.from;\n    }\n\n    if (options.to) {\n      query.target = options.to;\n    }\n  }\n\n  if (!query.target) {\n    throw new Error('A target language is required to perform a translation.');\n  }\n\n  this.request({\n    uri: '',\n    useQuerystring: true,\n    qs: query\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var translations = resp.data.translations.map(prop('translatedText'));\n\n    if (query.q.length === 1) {\n      translations = translations[0];\n    }\n\n    callback(err, translations, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Translate",
      "cons": "Translate",
      "name": "translate",
      "string": "Translate.prototype.translate()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      },
      {
        "type": "param",
        "string": "{object} reqOpts - Request options that are passed to `request`.",
        "name": "reqOpts",
        "description": "<ul>\n<li>Request options that are passed to <code>request</code>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function passed to `request`.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function passed to <code>request</code>.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>A custom request implementation. Requests to this API use an API key for an<br />application, not a bearer token from a service account. This means we skip<br />the <code>makeAuthenticatedRequest</code> portion of the typical request lifecycle, and<br />manually authenticate the request here.</p>",
      "summary": "<p>A custom request implementation. Requests to this API use an API key for an<br />application, not a bearer token from a service account. This means we skip<br />the <code>makeAuthenticatedRequest</code> portion of the typical request lifecycle, and<br />manually authenticate the request here.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 322,
    "codeStart": 333,
    "code": "Translate.prototype.request = function(reqOpts, callback) {\n  var BASE_URL = 'https://www.googleapis.com/language/translate/v2';\n\n  reqOpts.uri = BASE_URL + reqOpts.uri;\n\n  reqOpts = extend(true, {}, reqOpts, {\n    qs: {\n      key: this.key\n    }\n  });\n\n  util.makeRequest(reqOpts, this.options, callback);\n};\n\nmodule.exports = Translate;",
    "ctx": {
      "type": "method",
      "constructor": "Translate",
      "cons": "Translate",
      "name": "request",
      "string": "Translate.prototype.request()"
    }
  }
]