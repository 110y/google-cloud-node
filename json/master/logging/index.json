[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "logging",
        "html": "<p>logging</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar arrify = require('arrify');\nvar extend = require('extend');\nvar format = require('string-format-obj');\nvar is = require('is');\nvar nodeutil = require('util');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:storage/bucket}",
        "types": [
          "module:storage/bucket"
        ],
        "typesDescription": "module:<a href=\"module%3Astorage%2Fbucket.html\">storage/bucket</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:storage/bucket}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 29,
    "codeStart": 33,
    "code": "var Bucket = require('../storage/bucket.js');",
    "ctx": {
      "type": "declaration",
      "name": "Bucket",
      "value": "require('../storage/bucket.js')",
      "string": "Bucket"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:bigquery/dataset}",
        "types": [
          "module:bigquery/dataset"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Fdataset.html\">bigquery/dataset</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:bigquery/dataset}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 35,
    "codeStart": 39,
    "code": "var Dataset = require('../bigquery/dataset.js');",
    "ctx": {
      "type": "declaration",
      "name": "Dataset",
      "value": "require('../bigquery/dataset.js')",
      "string": "Dataset"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:logging/entry}",
        "types": [
          "module:logging/entry"
        ],
        "typesDescription": "module:<a href=\"module%3Alogging%2Fentry.html\">logging/entry</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:logging/entry}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 41,
    "codeStart": 45,
    "code": "var Entry = require('./entry.js');",
    "ctx": {
      "type": "declaration",
      "name": "Entry",
      "value": "require('./entry.js')",
      "string": "Entry"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:logging/log}",
        "types": [
          "module:logging/log"
        ],
        "typesDescription": "module:<a href=\"module%3Alogging%2Flog.html\">logging/log</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:logging/log}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 47,
    "codeStart": 51,
    "code": "var Log = require('./log.js');",
    "ctx": {
      "type": "declaration",
      "name": "Log",
      "value": "require('./log.js')",
      "string": "Log"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/service}",
        "types": [
          "module:common/service"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fservice.html\">common/service</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/service}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 53,
    "codeStart": 57,
    "code": "var Service = require('../common/service.js');",
    "ctx": {
      "type": "declaration",
      "name": "Service",
      "value": "require('../common/service.js')",
      "string": "Service"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:logging/sink}",
        "types": [
          "module:logging/sink"
        ],
        "typesDescription": "module:<a href=\"module%3Alogging%2Fsink.html\">logging/sink</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:logging/sink}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 59,
    "codeStart": 63,
    "code": "var Sink = require('./sink.js');",
    "ctx": {
      "type": "declaration",
      "name": "Sink",
      "value": "require('./sink.js')",
      "string": "Sink"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/streamrouter}",
        "types": [
          "module:common/streamrouter"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fstreamrouter.html\">common/streamrouter</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/streamrouter}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 65,
    "codeStart": 69,
    "code": "var streamRouter = require('../common/stream-router.js');",
    "ctx": {
      "type": "declaration",
      "name": "streamRouter",
      "value": "require('../common/stream-router.js')",
      "string": "streamRouter"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:pubsub/topic}",
        "types": [
          "module:pubsub/topic"
        ],
        "typesDescription": "module:<a href=\"module%3Apubsub%2Ftopic.html\">pubsub/topic</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:pubsub/topic}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 71,
    "codeStart": 75,
    "code": "var Topic = require('../pubsub/topic.js');",
    "ctx": {
      "type": "declaration",
      "name": "Topic",
      "value": "require('../pubsub/topic.js')",
      "string": "Topic"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 77,
    "codeStart": 81,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "alias",
        "string": "module:logging",
        "html": "<p>module:logging</p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "resource",
        "string": "[What is Google Cloud Logging?]{@link https://cloud.google.com/logging/docs}",
        "html": "<p>[What is Google Cloud Logging?]{@link <a href=\"https://cloud.google.com/logging/docs}\">https://cloud.google.com/logging/docs}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Introduction to the Cloud Logging API]{@link https://cloud.google.com/logging/docs/api}",
        "html": "<p>[Introduction to the Cloud Logging API]{@link <a href=\"https://cloud.google.com/logging/docs/api}\">https://cloud.google.com/logging/docs/api}</a></p>"
      },
      {
        "type": "param",
        "string": "{object} options - [Configuration object](#/docs/?method=gcloud).",
        "name": "options",
        "description": "<ul>\n<li><a href=\"#/docs/?method=gcloud\">Configuration object</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar logging = gcloud.logging();",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var logging = gcloud.logging();</p>"
      }
    ],
    "description": {
      "full": "<p><a href=\"https://cloud.google.com/logging/docs\">Google Cloud Logging</a> collects and<br />stores logs from applications and services on the Google Cloud Platform:</p><ul>\n<li>Export your logs to Google Cloud Storage, Google BigQuery, or Google<br />Cloud Pub/Sub.</li>\n<li>Integrate third-party logs from your virtual machine instances by<br />installing the logging agent, <code>google-fluentd</code>.</li>\n</ul>\n",
      "summary": "<p><a href=\"https://cloud.google.com/logging/docs\">Google Cloud Logging</a> collects and<br />stores logs from applications and services on the Google Cloud Platform:</p>",
      "body": "<ul>\n<li>Export your logs to Google Cloud Storage, Google BigQuery, or Google<br />Cloud Pub/Sub.</li>\n<li>Integrate third-party logs from your virtual machine instances by<br />installing the logging agent, <code>google-fluentd</code>.</li>\n</ul>\n"
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 83,
    "codeStart": 108,
    "code": "function Logging(options) {\n  if (!(this instanceof Logging)) {\n    options = util.normalizeArguments(this, options);\n    return new Logging(options);\n  }\n\n  var config = {\n    baseUrl: 'https://logging.googleapis.com/v2beta1',\n    scopes: [\n      'https://www.googleapis.com/auth/cloud-platform'\n    ]\n  };\n\n  Service.call(this, config, options);\n\n  // API requests to `entries` shouldn't contain a project ID in the URI, as it\n  // is passed in the JSON body when used to list or in the logName when used to\n  // write entries.\n  this.interceptors.push({\n    request: function(reqOpts) {\n      if (reqOpts.uri.indexOf('/entries:') > -1) {\n        reqOpts.uri = reqOpts.uri.replace(/projects\\/[^\\/]*\\//, '');\n      }\n\n      return reqOpts;\n    }\n  });\n}\n\nnodeutil.inherits(Logging, Service);\n\n// jscs:disable maximumLineLength",
    "ctx": {
      "type": "constructor",
      "name": "Logging",
      "string": "Logging()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Sink Overview]{@link https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks}",
        "html": "<p>[Sink Overview]{@link <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks}\">https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Advanced Logs Filters]{@link https://cloud.google.com/logging/docs/view/advanced_filters}",
        "html": "<p>[Advanced Logs Filters]{@link <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters}\">https://cloud.google.com/logging/docs/view/advanced_filters}</a></p>"
      },
      {
        "type": "resource",
        "string": "[projects.sinks.create API Documentation]{@link https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks/create}",
        "html": "<p>[projects.sinks.create API Documentation]{@link <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks/create}\">https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks/create}</a></p>"
      },
      {
        "type": "throws",
        "string": "{Error} if a name is not provided.",
        "types": [
          "Error"
        ],
        "description": "<p>if a name is not provided.</p>"
      },
      {
        "type": "throws",
        "string": "{Error} if a config object is not provided.",
        "types": [
          "Error"
        ],
        "description": "<p>if a config object is not provided.</p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the sink.",
        "name": "name",
        "description": "<ul>\n<li>Name of the sink.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} config - See a\n    [Sink resource](https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks#LogSink).",
        "name": "config",
        "description": "<ul>\n<li>See a     <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks#LogSink\">Sink resource</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:storage/bucket|module:bigquery/dataset|module:pubsub/topic} config.destination -\n    The destination. The proper ACL scopes will be granted to the provided\n    destination.",
        "name": "config.destination",
        "description": "<ul>\n<li>The destination. The proper ACL scopes will be granted to the provided<br />destination.</li>\n</ul>\n",
        "types": [
          "module:storage/bucket",
          "module:bigquery/dataset",
          "module:pubsub/topic"
        ],
        "typesDescription": "module:<a href=\"module%3Astorage%2Fbucket.html\">storage/bucket</a>|module:<a href=\"module%3Abigquery%2Fdataset.html\">bigquery/dataset</a>|module:<a href=\"module%3Apubsub%2Ftopic.html\">pubsub/topic</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string=} config.filter - An advanced logs filter. Only log entries\n    matching the filter are written.",
        "name": "config.filter",
        "description": "<ul>\n<li>An advanced logs filter. Only log entries     matching the filter are written.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:logging/sink} callback.sink - The created Sink object.",
        "name": "callback.sink",
        "description": "<ul>\n<li>The created Sink object.</li>\n</ul>\n",
        "types": [
          "module:logging/sink"
        ],
        "typesDescription": "module:<a href=\"module%3Alogging%2Fsink.html\">logging/sink</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var gcs = gcloud.storage();\n\nvar config = {\n  destination: gcs.bucket('logging-bucket'),\n  filter: 'severity = ALERT'\n};\n\nfunction callback(err, sink, apiResponse) {\n  // `sink` is a Sink object.\n}\n\nlogging.createSink('new-sink-name', config, callback);",
        "html": "<p>var gcs = gcloud.storage();</p><p>var config = {<br />  destination: gcs.bucket(&#39;logging-bucket&#39;),<br />  filter: &#39;severity = ALERT&#39;<br />};</p><p>function callback(err, sink, apiResponse) {<br />  // <code>sink</code> is a Sink object.<br />}</p><p>logging.createSink(&#39;new-sink-name&#39;, config, callback);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a sink.</p><p><strong>This method only works if you are authenticated as yourself, e.g. using the<br />gcloud SDK.</strong></p>",
      "summary": "<p>Create a sink.</p>",
      "body": "<p><strong>This method only works if you are authenticated as yourself, e.g. using the<br />gcloud SDK.</strong></p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 140,
    "codeStart": 180,
    "code": "Logging.prototype.createSink = function(name, config, callback) {\n  // jscs:enable maximumLineLength\n  var self = this;\n\n  if (!is.string(name)) {\n    throw new Error('A sink name must be provided.');\n  }\n\n  if (!is.object(config)) {\n    throw new Error('A sink configuration object must be provided.');\n  }\n\n  if (config.destination instanceof Bucket) {\n    this.setAclForBucket_(name, config, callback);\n    return;\n  }\n\n  if (config.destination instanceof Dataset) {\n    this.setAclForDataset_(name, config, callback);\n    return;\n  }\n\n  if (config.destination instanceof Topic) {\n    this.setAclForTopic_(name, config, callback);\n    return;\n  }\n\n  this.request({\n    method: 'POST',\n    uri: '/sinks',\n    json: extend({}, config, {\n      name: name\n    })\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var sink = self.sink(resp.name);\n    sink.metadata = resp;\n\n    callback(null, sink, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "createSink",
      "string": "Logging.prototype.createSink()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[LogEntry JSON representation]{@link https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/LogEntry}",
        "html": "<p>[LogEntry JSON representation]{@link <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/LogEntry}\">https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/LogEntry}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=|string=} resource - See a\n    [Monitored Resource]{@link https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/MonitoredResource}.",
        "name": "resource",
        "description": "<ul>\n<li>See a     [Monitored Resource]{@link <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/MonitoredResource}\">https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/MonitoredResource}</a>.</li>\n</ul>\n",
        "types": [
          "object",
          "string"
        ],
        "typesDescription": "<code>object</code>|<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object|string} data - The data to use as the value for this log\n    entry.",
        "name": "data",
        "description": "<ul>\n<li>The data to use as the value for this log     entry.</li>\n</ul>\n",
        "types": [
          "object",
          "string"
        ],
        "typesDescription": "<code>object</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:logging/entry}",
        "types": [
          "module:logging/entry"
        ],
        "typesDescription": "module:<a href=\"module%3Alogging%2Fentry.html\">logging/entry</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:logging/entry}</p>"
      },
      {
        "type": "example",
        "string": "var resource = {\n  type: 'gce_instance',\n  labels: {\n    zone: 'global',\n    instance_id: 3\n  }\n};\n\nvar entry = logging.entry(resource, {\n  delegate: process.env.USER\n});\n\nentry.toJSON();\n// {\n//   resource: {\n//     type: 'gce_instance',\n//     labels: {\n//       zone: 'global',\n//       instance_id: 3\n//     }\n//   },\n//   jsonPayload: {\n//     delegate: process.env.USER\n//   }\n// }",
        "html": "<p>var resource = {<br />  type: &#39;gce_instance&#39;,<br />  labels: {<br />    zone: &#39;global&#39;,<br />    instance_id: 3<br />  }<br />};</p><p>var entry = logging.entry(resource, {<br />  delegate: process.env.USER<br />});</p><p>entry.toJSON();<br />// {<br />//   resource: {<br />//     type: &#39;gce_instance&#39;,<br />//     labels: {<br />//       zone: &#39;global&#39;,<br />//       instance_id: 3<br />//     }<br />//   },<br />//   jsonPayload: {<br />//     delegate: process.env.USER<br />//   }<br />// }</p>"
      }
    ],
    "description": {
      "full": "<p>Create an entry object.</p><p>Note that using this method will not itself make any API requests. You will<br />use the object returned in other API calls, such as<br />{module:logging/log#write}.</p>",
      "summary": "<p>Create an entry object.</p>",
      "body": "<p>Note that using this method will not itself make any API requests. You will<br />use the object returned in other API calls, such as<br />{module:logging/log#write}.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 226,
    "codeStart": 268,
    "code": "Logging.prototype.entry = function(resource, data) {\n  return new Entry(resource, data);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "entry",
      "string": "Logging.prototype.entry()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[entries.list API Documentation]{@link https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/entries/list}",
        "html": "<p>[entries.list API Documentation]{@link <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/entries/list}\">https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/entries/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Filtering options.",
        "name": "options",
        "description": "<ul>\n<li>Filtering options.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.filter - An\n    [advanced logs filter](https://cloud.google.com/logging/docs/view/advanced_filters).\n    An empty filter matches all log entries.",
        "name": "options.filter",
        "description": "<ul>\n<li>An     <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs filter</a>.<br />  An empty filter matches all log entries.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.orderBy - How the results should be sorted,\n    `timestamp` (oldest first) and `timestamp desc` (newest first,\n    **default**).",
        "name": "options.orderBy",
        "description": "<ul>\n<li>How the results should be sorted,     <code>timestamp</code> (oldest first) and <code>timestamp desc</code> (newest first,<br />  <strong>default</strong>).</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.pageSize - Maximum number of logs to return.",
        "name": "options.pageSize",
        "description": "<ul>\n<li>Maximum number of logs to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:logging/entry[]} callback.entries - Entries from your logs.",
        "name": "callback.entries",
        "description": "<ul>\n<li>Entries from your logs.</li>\n</ul>\n",
        "types": [
          "Array.<module:logging/entry>"
        ],
        "typesDescription": "<code>Array</code>.&lt;module:<a href=\"module%3Alogging%2Fentry.html\">logging/entry</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "logging.getEntries(function(err, entries) {\n  // `entries` is an array of Cloud Logging entry objects.\n  // See the `data` property to read the data from the entry.\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction callback(err, entries, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    logging.getEntries(nextQuery, callback);\n  }\n}\n\nlogging.getEntries({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the entries from your project as a readable object stream.\n//-\nlogging.getEntries()\n  .on('error', console.error)\n  .on('data', function(entry) {\n    // `entry` is a Cloud Logging entry object.\n    // See the `data` property to read the data from the entry.\n  })\n  .on('end', function() {\n    // All entries retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\nlogging.getEntries()\n  .on('data', function(entry) {\n    this.end();\n  });",
        "html": "<p>logging.getEntries(function(err, entries) {<br />  // <code>entries</code> is an array of Cloud Logging entry objects.<br />  // See the <code>data</code> property to read the data from the entry.<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function callback(err, entries, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    logging.getEntries(nextQuery, callback);<br />  }<br />}</p><p>logging.getEntries({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the entries from your project as a readable object stream.<br />//-<br />logging.getEntries()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(entry) {<br />    // <code>entry</code> is a Cloud Logging entry object.<br />    // See the <code>data</code> property to read the data from the entry.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All entries retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />logging.getEntries()<br />  .on(&#39;data&#39;, function(entry) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>List the entries in your logs.</p>",
      "summary": "<p>List the entries in your logs.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 272,
    "codeStart": 339,
    "code": "Logging.prototype.getEntries = function(options, callback) {\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  var body = extend({\n    orderBy: 'timestamp desc'\n  }, options);\n  body.projectIds = arrify(body.projectIds);\n  body.projectIds.push(this.projectId);\n\n  this.request({\n    method: 'POST',\n    uri: '/entries:list',\n    json: body\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, body, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var entries = arrify(resp.entries).map(Entry.fromApiResponse_);\n\n    callback(null, entries, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "getEntries",
      "string": "Logging.prototype.getEntries()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[projects.sinks.list API Documentation]{@link https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks/list}",
        "html": "<p>[projects.sinks.list API Documentation]{@link <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks/list}\">https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:logging/sink[]} callback.sinks - Sink objects.",
        "name": "callback.sinks",
        "description": "<ul>\n<li>Sink objects.</li>\n</ul>\n",
        "types": [
          "Array.<module:logging/sink>"
        ],
        "typesDescription": "<code>Array</code>.&lt;module:<a href=\"module%3Alogging%2Fsink.html\">logging/sink</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "logging.getSinks(function(err, sinks) {\n  // sinks is an array of Sink objects.\n});\n\n//-\n// Get the sinks from your project as a readable object stream.\n//-\nlogging.getSinks()\n  .on('error', console.error)\n  .on('data', function(sink) {\n    // `sink` is a Sink object.\n  })\n  .on('end', function() {\n    // All sinks retrieved.\n  });",
        "html": "<p>logging.getSinks(function(err, sinks) {<br />  // sinks is an array of Sink objects.<br />});</p><p>//-<br />// Get the sinks from your project as a readable object stream.<br />//-<br />logging.getSinks()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(sink) {<br />    // <code>sink</code> is a Sink object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All sinks retrieved.<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get the sinks associated with this project.</p>",
      "summary": "<p>Get the sinks associated with this project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 375,
    "codeStart": 402,
    "code": "Logging.prototype.getSinks = function(options, callback) {\n  var self = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  this.request({\n    uri: '/sinks'\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var sinks = arrify(resp.sinks).map(function(sink) {\n      var sinkInstance = self.sink(sink.name);\n      sinkInstance.metadata = sink;\n      return sinkInstance;\n    });\n\n    callback(null, sinks, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "getSinks",
      "string": "Logging.prototype.getSinks()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Log Overview]{@link https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.logs}",
        "html": "<p>[Log Overview]{@link <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.logs}\">https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.logs}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing log.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing log.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:logging/log}",
        "types": [
          "module:logging/log"
        ],
        "typesDescription": "module:<a href=\"module%3Alogging%2Flog.html\">logging/log</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:logging/log}</p>"
      },
      {
        "type": "example",
        "string": "var log = logging.log('my-log');",
        "html": "<p>var log = logging.log(&#39;my-log&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Cloud Logging log.</p>",
      "summary": "<p>Get a reference to a Cloud Logging log.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 436,
    "codeStart": 447,
    "code": "Logging.prototype.log = function(name) {\n  return new Log(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "log",
      "string": "Logging.prototype.log()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Sink Overview]{@link https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks}",
        "html": "<p>[Sink Overview]{@link <a href=\"https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks}\">https://cloud.google.com/logging/docs/api/ref_v2beta1/rest/v2beta1/projects.sinks}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} name - Name of the existing sink.",
        "name": "name",
        "description": "<ul>\n<li>Name of the existing sink.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:logging/sink}",
        "types": [
          "module:logging/sink"
        ],
        "typesDescription": "module:<a href=\"module%3Alogging%2Fsink.html\">logging/sink</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:logging/sink}</p>"
      },
      {
        "type": "example",
        "string": "var sink = logging.sink('my-sink');",
        "html": "<p>var sink = logging.sink(&#39;my-sink&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Get a reference to a Cloud Logging sink.</p>",
      "summary": "<p>Get a reference to a Cloud Logging sink.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 451,
    "codeStart": 462,
    "code": "Logging.prototype.sink = function(name) {\n  return new Sink(this, name);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "sink",
      "string": "Logging.prototype.sink()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>This method is called when creating a sink with a Bucket destination. The<br />bucket must first grant proper ACL access to the Cloud Logging account.</p><p>The parameters are the same as what {module:logging#createSink} accepts.</p>",
      "summary": "<p>This method is called when creating a sink with a Bucket destination. The<br />bucket must first grant proper ACL access to the Cloud Logging account.</p>",
      "body": "<p>The parameters are the same as what {module:logging#createSink} accepts.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 466,
    "codeStart": 474,
    "code": "Logging.prototype.setAclForBucket_ = function(name, config, callback) {\n  var self = this;\n  var bucket = config.destination;\n\n  bucket.acl.owners.addGroup('cloud-logs@google.com', function(err, apiResp) {\n    if (err) {\n      callback(err, null, apiResp);\n      return;\n    }\n\n    config.destination = 'storage.googleapis.com/' + bucket.name;\n\n    self.createSink(name, config, callback);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "setAclForBucket_",
      "string": "Logging.prototype.setAclForBucket_()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>This method is called when creating a sink with a Dataset destination. The<br />dataset must first grant proper ACL access to the Cloud Logging account.</p><p>The parameters are the same as what {module:logging#createSink} accepts.</p>",
      "summary": "<p>This method is called when creating a sink with a Dataset destination. The<br />dataset must first grant proper ACL access to the Cloud Logging account.</p>",
      "body": "<p>The parameters are the same as what {module:logging#createSink} accepts.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 490,
    "codeStart": 498,
    "code": "Logging.prototype.setAclForDataset_ = function(name, config, callback) {\n  var self = this;\n  var dataset = config.destination;\n\n  dataset.getMetadata(function(err, metadata, apiResp) {\n    if (err) {\n      callback(err, null, apiResp);\n      return;\n    }\n\n    var access = [].slice.call(arrify(metadata.access));\n\n    access.push({\n      role: 'WRITER',\n      groupByEmail: 'cloud-logs@google.com'\n    });\n\n    dataset.setMetadata({\n      access: access\n    }, function(err, apiResp) {\n      if (err) {\n        callback(err, null, apiResp);\n        return;\n      }\n\n      config.destination = format('{baseUrl}/projects/{pId}/datasets/{dId}', {\n        baseUrl: 'bigquery.googleapis.com',\n        pId: dataset.parent.projectId,\n        dId: dataset.id\n      });\n\n      self.createSink(name, config, callback);\n    });\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "setAclForDataset_",
      "string": "Logging.prototype.setAclForDataset_()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>This method is called when creating a sink with a Topic destination. The<br />topic must first grant proper ACL access to the Cloud Logging account.</p><p>The parameters are the same as what {module:logging#createSink} accepts.</p>",
      "summary": "<p>This method is called when creating a sink with a Topic destination. The<br />topic must first grant proper ACL access to the Cloud Logging account.</p>",
      "body": "<p>The parameters are the same as what {module:logging#createSink} accepts.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 534,
    "codeStart": 542,
    "code": "Logging.prototype.setAclForTopic_ = function(name, config, callback) {\n  var self = this;\n  var topic = config.destination;\n\n  topic.iam.getPolicy(function(err, policy, apiResp) {\n    if (err) {\n      callback(err, null, apiResp);\n      return;\n    }\n\n    policy.bindings = arrify(policy.bindings);\n\n    policy.bindings.push({\n      role: 'roles/pubsub.publisher',\n      members: [\n        'serviceAccount:cloud-logs@system.gserviceaccount.com'\n      ]\n    });\n\n    topic.iam.setPolicy(policy, function(err, policy, apiResp) {\n      if (err) {\n        callback(err, null, apiResp);\n        return;\n      }\n\n      config.destination = format('{baseUrl}/{topicName}', {\n        baseUrl: 'pubsub.googleapis.com',\n        topicName: topic.name\n      });\n\n      self.createSink(name, config, callback);\n    });\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Logging",
      "cons": "Logging",
      "name": "setAclForTopic_",
      "string": "Logging.prototype.setAclForTopic_()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Developer Documentation</p><p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 577,
    "codeStart": 582,
    "code": "streamRouter.extend(Logging, ['getEntries', 'getSinks']);\n\nmodule.exports = Logging;",
    "ctx": false
  }
]