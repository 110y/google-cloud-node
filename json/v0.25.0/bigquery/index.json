[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2014 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "bigquery",
        "html": "<p>bigquery</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar extend = require('extend');\nvar is = require('is');\nvar nodeutil = require('util');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:bigquery/dataset}",
        "types": [
          "module:bigquery/dataset"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Fdataset.html\">bigquery/dataset</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:bigquery/dataset}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 27,
    "codeStart": 31,
    "code": "var Dataset = require('./dataset.js');",
    "ctx": {
      "type": "declaration",
      "name": "Dataset",
      "value": "require('./dataset.js')",
      "string": "Dataset"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:bigquery/job}",
        "types": [
          "module:bigquery/job"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Fjob.html\">bigquery/job</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:bigquery/job}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 33,
    "codeStart": 37,
    "code": "var Job = require('./job.js');",
    "ctx": {
      "type": "declaration",
      "name": "Job",
      "value": "require('./job.js')",
      "string": "Job"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/service}",
        "types": [
          "module:common/service"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fservice.html\">common/service</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/service}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 43,
    "code": "var Service = require('../common/service.js');",
    "ctx": {
      "type": "declaration",
      "name": "Service",
      "value": "require('../common/service.js')",
      "string": "Service"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/streamrouter}",
        "types": [
          "module:common/streamrouter"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fstreamrouter.html\">common/streamrouter</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/streamrouter}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 45,
    "codeStart": 49,
    "code": "var streamRouter = require('../common/stream-router.js');",
    "ctx": {
      "type": "declaration",
      "name": "streamRouter",
      "value": "require('../common/stream-router.js')",
      "string": "streamRouter"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:bigquery/table}",
        "types": [
          "module:bigquery/table"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Ftable.html\">bigquery/table</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:bigquery/table}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 51,
    "codeStart": 55,
    "code": "var Table = require('./table.js');",
    "ctx": {
      "type": "declaration",
      "name": "Table",
      "value": "require('./table.js')",
      "string": "Table"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 57,
    "codeStart": 61,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "alias",
        "string": "module:bigquery",
        "html": "<p>module:bigquery</p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "param",
        "string": "{object} options - [Configuration object](#/docs/?method=gcloud).",
        "name": "options",
        "description": "<ul>\n<li><a href=\"#/docs/?method=gcloud\">Configuration object</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'my-project'\n});\n\nvar bigquery = gcloud.bigquery();\n\n//-\n// In the following examples from this page and the other modules (Dataset,\n// Table, etc.), we are going to be using a dataset from\n// <a href=\"http://goo.gl/f2SXcb\">data.gov</a> of higher education\n// institutions.\n//\n// We will create a table with the correct schema, import the public CSV file\n// into that table, and query it for data.\n//-",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;my-project&#39;<br />});</p><p>var bigquery = gcloud.bigquery();</p><p>//-<br />// In the following examples from this page and the other modules (Dataset,<br />// Table, etc.), we are going to be using a dataset from<br />// <a href=\"http://goo.gl/f2SXcb\">data.gov</a> of higher education<br />// institutions.<br />//<br />// We will create a table with the correct schema, import the public CSV file<br />// into that table, and query it for data.<br />//-</p>"
      }
    ],
    "description": {
      "full": "<p>The examples below will demonstrate the different usage patterns your app may<br />need to support to retrieve a BigQuery object.</p>",
      "summary": "<p>The examples below will demonstrate the different usage patterns your app may<br />need to support to retrieve a BigQuery object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 63,
    "codeStart": 90,
    "code": "function BigQuery(options) {\n  if (!(this instanceof BigQuery)) {\n    options = util.normalizeArguments(this, options);\n    return new BigQuery(options);\n  }\n\n  var config = {\n    baseUrl: 'https://www.googleapis.com/bigquery/v2',\n    scopes: ['https://www.googleapis.com/auth/bigquery']\n  };\n\n  Service.call(this, config, options);\n}\n\nnodeutil.inherits(BigQuery, Service);",
    "ctx": {
      "type": "constructor",
      "name": "BigQuery",
      "string": "BigQuery()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datasets: insert API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/datasets/insert}",
        "html": "<p>[Datasets: insert API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets/insert}\">https://cloud.google.com/bigquery/docs/reference/v2/datasets/insert}</a></p>"
      },
      {
        "type": "param",
        "string": "{string} id - ID of the dataset to create.",
        "name": "id",
        "description": "<ul>\n<li>ID of the dataset to create.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object=} options - See a\n    [Dataset resource](https://cloud.google.com/bigquery/docs/reference/v2/datasets#resource).",
        "name": "options",
        "description": "<ul>\n<li>See a     <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#resource\">Dataset resource</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback  - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:bigquery/dataset} callback.dataset - The newly created dataset",
        "name": "callback.dataset",
        "description": "<ul>\n<li>The newly created dataset</li>\n</ul>\n",
        "types": [
          "module:bigquery/dataset"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Fdataset.html\">bigquery/dataset</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "bigquery.createDataset('my-dataset', function(err, dataset, apiResponse) {});",
        "html": "<p>bigquery.createDataset(&#39;my-dataset&#39;, function(err, dataset, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Create a dataset.</p>",
      "summary": "<p>Create a dataset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 106,
    "codeStart": 122,
    "code": "BigQuery.prototype.createDataset = function(id, options, callback) {\n  var that = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  this.request({\n    method: 'POST',\n    uri: '/datasets',\n    json: extend(true, {}, options, {\n      datasetReference: {\n        datasetId: id\n      }\n    })\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var dataset = that.dataset(id);\n    dataset.metadata = resp;\n\n    callback(null, dataset, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "createDataset",
      "string": "BigQuery.prototype.createDataset()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} id - ID of the dataset.",
        "name": "id",
        "description": "<ul>\n<li>ID of the dataset.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:bigquery/dataset}",
        "types": [
          "module:bigquery/dataset"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Fdataset.html\">bigquery/dataset</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:bigquery/dataset}</p>"
      },
      {
        "type": "example",
        "string": "var dataset = bigquery.dataset('higher_education');",
        "html": "<p>var dataset = bigquery.dataset(&#39;higher_education&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a reference to a dataset.</p>",
      "summary": "<p>Create a reference to a dataset.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 151,
    "codeStart": 160,
    "code": "BigQuery.prototype.dataset = function(id) {\n  return new Dataset(this, id);\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "dataset",
      "string": "BigQuery.prototype.dataset()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Datasets: list API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/datasets/list}",
        "html": "<p>[Datasets: list API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets/list}\">https://cloud.google.com/bigquery/docs/reference/v2/datasets/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} query - Configuration object.",
        "name": "query",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} query.all - List all datasets, including hidden ones.",
        "name": "query.all",
        "description": "<ul>\n<li>List all datasets, including hidden ones.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} query.autoPaginate - Have pagination handled automatically.\n    Default: true.",
        "name": "query.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled automatically.     Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} query.maxResults - Maximum number of results to return.",
        "name": "query.maxResults",
        "description": "<ul>\n<li>Maximum number of results to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.pageToken - Token returned from a previous call, to\n    request the next page of results.",
        "name": "query.pageToken",
        "description": "<ul>\n<li>Token returned from a previous call, to     request the next page of results.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:bigquery/dataset[]} callback.datasets - The list of datasets\n    in your project.",
        "name": "callback.datasets",
        "description": "<ul>\n<li>The list of datasets     in your project.</li>\n</ul>\n",
        "types": [
          "Array.<module:bigquery/dataset>"
        ],
        "typesDescription": "<code>Array</code>.&lt;module:<a href=\"module%3Abigquery%2Fdataset.html\">bigquery/dataset</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "bigquery.getDatasets(function(err, datasets) {\n  if (!err) {\n    // datasets is an array of Dataset objects.\n  }\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nvar callback = function(err, datasets, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    bigquery.getDatasets(nextQuery, callback);\n  }\n};\n\nbigquery.getDatasets({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the datasets from your project as a readable object stream.\n//-\nbigquery.getDatasets()\n  .on('error', console.error)\n  .on('data', function(dataset) {\n    // dataset is a Dataset object.\n  })\n  .on('end', function() {\n    // All datasets retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\nbigquery.getDatasets()\n  .on('data', function(dataset) {\n    this.end();\n  });",
        "html": "<p>bigquery.getDatasets(function(err, datasets) {<br />  if (!err) {<br />    // datasets is an array of Dataset objects.<br />  }<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />var callback = function(err, datasets, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    bigquery.getDatasets(nextQuery, callback);<br />  }<br />};</p><p>bigquery.getDatasets({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the datasets from your project as a readable object stream.<br />//-<br />bigquery.getDatasets()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(dataset) {<br />    // dataset is a Dataset object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All datasets retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />bigquery.getDatasets()<br />  .on(&#39;data&#39;, function(dataset) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>List all or some of the datasets in your project.</p>",
      "summary": "<p>List all or some of the datasets in your project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 164,
    "codeStart": 227,
    "code": "BigQuery.prototype.getDatasets = function(query, callback) {\n  var that = this;\n\n  if (is.fn(query)) {\n    callback = query;\n    query = {};\n  }\n\n  query = query || {};\n\n  this.request({\n    uri: '/datasets',\n    qs: query\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, query, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var datasets = (resp.datasets || []).map(function(dataset) {\n      var ds = that.dataset(dataset.datasetReference.datasetId);\n      ds.metadata = dataset;\n      return ds;\n    });\n\n    callback(null, datasets, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "getDatasets",
      "string": "BigQuery.prototype.getDatasets()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Jobs: list API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/jobs/list}",
        "html": "<p>[Jobs: list API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/jobs/list}\">https://cloud.google.com/bigquery/docs/reference/v2/jobs/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} options - Configuration object.",
        "name": "options",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean=} options.allUsers - Display jobs owned by all users in the\n    project.",
        "name": "options.allUsers",
        "description": "<ul>\n<li>Display jobs owned by all users in the     project.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number=} options.maxResults - Maximum number of results to return.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of results to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string=} options.pageToken - Token returned from a previous call, to\n    request the next page of results.",
        "name": "options.pageToken",
        "description": "<ul>\n<li>Token returned from a previous call, to     request the next page of results.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string=} options.projection - Restrict information returned to a set\n    of selected fields. Acceptable values are \"full\", for all job data, and\n    \"minimal\", to not include the job configuration.",
        "name": "options.projection",
        "description": "<ul>\n<li>Restrict information returned to a set     of selected fields. Acceptable values are &quot;full&quot;, for all job data, and<br />  &quot;minimal&quot;, to not include the job configuration.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string=} options.stateFilter - Filter for job state. Acceptable\n    values are \"done\", \"pending\", and \"running\".",
        "name": "options.stateFilter",
        "description": "<ul>\n<li>Filter for job state. Acceptable     values are &quot;done&quot;, &quot;pending&quot;, and &quot;running&quot;.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:bigquery/job[]} callback.jobs - The list of jobs in your\n    project.",
        "name": "callback.jobs",
        "description": "<ul>\n<li>The list of jobs in your     project.</li>\n</ul>\n",
        "types": [
          "Array.<module:bigquery/job>"
        ],
        "typesDescription": "<code>Array</code>.&lt;module:<a href=\"module%3Abigquery%2Fjob.html\">bigquery/job</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "bigquery.getJobs(function(err, jobs) {\n  if (!err) {\n    // jobs is an array of Job objects.\n  }\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nvar callback = function(err, jobs, nextQuery, apiRespose) {\n  if (nextQuery) {\n    // More results exist.\n    bigquery.getJobs(nextQuery, callback);\n  }\n};\n\nbigquery.getJobs({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the jobs from your project as a readable object stream.\n//-\nbigquery.getJobs()\n  .on('error', console.error)\n  .on('data', function(job) {\n    // job is a Job object.\n  })\n  .on('end', function() {\n    // All jobs retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\nbigquery.getJobs()\n  .on('data', function(job) {\n    this.end();\n  });",
        "html": "<p>bigquery.getJobs(function(err, jobs) {<br />  if (!err) {<br />    // jobs is an array of Job objects.<br />  }<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />var callback = function(err, jobs, nextQuery, apiRespose) {<br />  if (nextQuery) {<br />    // More results exist.<br />    bigquery.getJobs(nextQuery, callback);<br />  }<br />};</p><p>bigquery.getJobs({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the jobs from your project as a readable object stream.<br />//-<br />bigquery.getJobs()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(job) {<br />    // job is a Job object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All jobs retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />bigquery.getJobs()<br />  .on(&#39;data&#39;, function(job) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get all of the jobs from your project.</p>",
      "summary": "<p>Get all of the jobs from your project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 264,
    "codeStart": 333,
    "code": "BigQuery.prototype.getJobs = function(options, callback) {\n  var that = this;\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  this.request({\n    uri: '/jobs',\n    qs: options\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, options, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var jobs = (resp.jobs || []).map(function(jobObject) {\n      var job = that.job(jobObject.id);\n      job.metadata = jobObject;\n      return job;\n    });\n\n    callback(null, jobs, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "getJobs",
      "string": "BigQuery.prototype.getJobs()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} id - ID of the job.",
        "name": "id",
        "description": "<ul>\n<li>ID of the job.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:bigquery/job}",
        "types": [
          "module:bigquery/job"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Fjob.html\">bigquery/job</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:bigquery/job}</p>"
      },
      {
        "type": "example",
        "string": "var myExistingJob = bigquery.job('job-id');",
        "html": "<p>var myExistingJob = bigquery.job(&#39;job-id&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a reference to an existing job.</p>",
      "summary": "<p>Create a reference to an existing job.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 370,
    "codeStart": 379,
    "code": "BigQuery.prototype.job = function(id) {\n  return new Job(this, id);\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "job",
      "string": "BigQuery.prototype.job()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Jobs: query API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/jobs/query}",
        "html": "<p>[Jobs: query API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/jobs/query}\">https://cloud.google.com/bigquery/docs/reference/v2/jobs/query}</a></p>"
      },
      {
        "type": "param",
        "string": "{string|object} options - A string SQL query or configuration object.",
        "name": "options",
        "description": "<ul>\n<li>A string SQL query or configuration object.</li>\n</ul>\n",
        "types": [
          "string",
          "object"
        ],
        "typesDescription": "<code>string</code>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.maxResults - Maximum number of results to read.",
        "name": "options.maxResults",
        "description": "<ul>\n<li>Maximum number of results to read.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.query - A query string, following the BigQuery query\n    syntax, of the query to execute.",
        "name": "options.query",
        "description": "<ul>\n<li>A query string, following the BigQuery query     syntax, of the query to execute.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} options.timeoutMs - How long to wait for the query to\n    complete, in milliseconds, before returning. Default is to return\n    immediately. If the timeout passes before the job completes, the request\n    will fail with a `TIMEOUT` error.",
        "name": "options.timeoutMs",
        "description": "<ul>\n<li>How long to wait for the query to     complete, in milliseconds, before returning. Default is to return<br />  immediately. If the timeout passes before the job completes, the request<br />  will fail with a <code>TIMEOUT</code> error.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function=} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{array} callback.rows - The list of results from your query.",
        "name": "callback.rows",
        "description": "<ul>\n<li>The list of results from your query.</li>\n</ul>\n",
        "types": [
          "array"
        ],
        "typesDescription": "<code>array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var query = 'SELECT url FROM [publicdata:samples.github_nested] LIMIT 100';\n\nbigquery.query(query, function(err, rows) {\n  if (!err) {\n    // Handle results here.\n  }\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nvar callback = function(err, rows, nextQuery, apiResponse) {\n  if (nextQuery) {\n    bigquery.query(nextQuery, callback);\n  }\n};\n\nbigquery.query({\n  query: query,\n  autoPaginate: false\n}, callback);\n\n//-\n// You can also use the `query` method as a readable object stream by\n// omitting the callback.\n//-\nbigquery.query(query)\n  .on('error', console.error)\n  .on('data', function(row) {\n    // row is a result from your query.\n  })\n  .on('end', function() {\n    // All rows retrieved.\n  });",
        "html": "<p>var query = &#39;SELECT url FROM [publicdata:samples.github_nested] LIMIT 100&#39;;</p><p>bigquery.query(query, function(err, rows) {<br />  if (!err) {<br />    // Handle results here.<br />  }<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />var callback = function(err, rows, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    bigquery.query(nextQuery, callback);<br />  }<br />};</p><p>bigquery.query({<br />  query: query,<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// You can also use the <code>query</code> method as a readable object stream by<br />// omitting the callback.<br />//-<br />bigquery.query(query)<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(row) {<br />    // row is a result from your query.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All rows retrieved.<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Run a query scoped to your project.</p><p>If you provide a callback, this method returns the results from your query to<br />it. When querying large sets of data, it is possible your results won&#39;t be<br />returned all at once. In those cases, you will receive a third argument to<br />your callback that can be passed back to this method to return more results.</p><p>See the examples below for such a workflow.</p><p>This method also runs as a readable stream if you do not provide a callback.<br />In cases where more results exist, this will automatically run the subsequent<br />queries for you, pushing each row to the stream.</p>",
      "summary": "<p>Run a query scoped to your project.</p>",
      "body": "<p>If you provide a callback, this method returns the results from your query to<br />it. When querying large sets of data, it is possible your results won&#39;t be<br />returned all at once. In those cases, you will receive a third argument to<br />your callback that can be passed back to this method to return more results.</p><p>See the examples below for such a workflow.</p><p>This method also runs as a readable stream if you do not provide a callback.<br />In cases where more results exist, this will automatically run the subsequent<br />queries for you, pushing each row to the stream.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 383,
    "codeStart": 453,
    "code": "BigQuery.prototype.query = function(options, callback) {\n  var that = this;\n\n  if (is.string(options)) {\n    options = {\n      query: options\n    };\n  }\n\n  options = options || {};\n\n  var job = options.job;\n\n  var requestQuery = extend({}, options);\n  delete requestQuery.job;\n\n  if (job) {\n    // Get results of the query.\n    that.request({\n      uri: '/queries/' + job.id,\n      qs: requestQuery\n    }, responseHandler);\n  } else {\n    // Create a job.\n    that.request({\n      method: 'POST',\n      uri: '/queries',\n      json: options\n    }, responseHandler);\n  }\n\n  function responseHandler(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var rows = [];\n    if (resp.schema && resp.rows) {\n      rows = Table.mergeSchemaWithRows_(resp.schema, resp.rows);\n    }\n\n    var nextQuery = null;\n    if (resp.jobComplete === false) {\n      // Query is still running.\n      nextQuery = extend({}, options);\n    } else if (resp.pageToken) {\n      // More results exist.\n      nextQuery = extend({}, options, {\n        pageToken: resp.pageToken\n      });\n    }\n    if (nextQuery && !nextQuery.job && resp.jobReference.jobId) {\n      // Create a prepared Job to continue the query.\n      nextQuery.job = that.job(resp.jobReference.jobId);\n    }\n\n    callback(null, rows, nextQuery, resp);\n  }\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "query",
      "string": "BigQuery.prototype.query()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Jobs: insert API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert}",
        "html": "<p>[Jobs: insert API Documentation]{@link <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert}\">https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert}</a></p>"
      },
      {
        "type": "param",
        "string": "{object|string} options - The configuration object. This must be in\n    the format of the [`configuration.query`](http://goo.gl/wRpHvR) property\n    of a Jobs resource. If a string is provided, this is used as the query\n    string, and all other options are defaulted.",
        "name": "options",
        "description": "<ul>\n<li>The configuration object. This must be in     the format of the <a href=\"http://goo.gl/wRpHvR\"><code>configuration.query</code></a> property<br />  of a Jobs resource. If a string is provided, this is used as the query<br />  string, and all other options are defaulted.</li>\n</ul>\n",
        "types": [
          "object",
          "string"
        ],
        "typesDescription": "<code>object</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:bigquery/table=} options.destination - The table to save the\n    query's results to. If omitted, a new table will be created.",
        "name": "options.destination",
        "description": "<ul>\n<li>The table to save the     query&#39;s results to. If omitted, a new table will be created.</li>\n</ul>\n",
        "types": [
          "module:bigquery/table"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Ftable.html\">bigquery/table</a>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.query - A query string, following the BigQuery query\n    syntax, of the query to execute.",
        "name": "options.query",
        "description": "<ul>\n<li>A query string, following the BigQuery query     syntax, of the query to execute.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request.",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:bigquery/job} callback.job - The newly created job for your\n       query.",
        "name": "callback.job",
        "description": "<ul>\n<li>The newly created job for your        query.</li>\n</ul>\n",
        "types": [
          "module:bigquery/job"
        ],
        "typesDescription": "module:<a href=\"module%3Abigquery%2Fjob.html\">bigquery/job</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "throws",
        "string": "{Error} If a query is not specified.",
        "types": [
          "Error"
        ],
        "description": "<p>If a query is not specified.</p>"
      },
      {
        "type": "throws",
        "string": "{Error} If a Table is not provided as a destination.",
        "types": [
          "Error"
        ],
        "description": "<p>If a Table is not provided as a destination.</p>"
      },
      {
        "type": "example",
        "string": "var query = 'SELECT url FROM [publicdata:samples.github_nested] LIMIT 100';\n\n//-\n// You may pass only a query string, having a new table created to store the\n// results of the query.\n//-\nbigquery.startQuery(query, function(err, job) {});\n\n//-\n// You can also control the destination table by providing a\n// {module:bigquery/table} object.\n//-\nbigquery.startQuery({\n  destination: bigquery.dataset('higher_education').table('institutions'),\n  query: query\n}, function(err, job) {});\n\n//-\n// After you have run `startQuery`, your query will execute in a job. Your\n// callback is executed with a {module:bigquery/job} object so that you may\n// check for the results.\n//-\nbigquery.startQuery(query, function(err, job) {\n  if (!err) {\n    job.getQueryResults(function(err, rows, apiResponse) {});\n  }\n});",
        "html": "<p>var query = &#39;SELECT url FROM [publicdata:samples.github_nested] LIMIT 100&#39;;</p><p>//-<br />// You may pass only a query string, having a new table created to store the<br />// results of the query.<br />//-<br />bigquery.startQuery(query, function(err, job) {});</p><p>//-<br />// You can also control the destination table by providing a<br />// {module:bigquery/table} object.<br />//-<br />bigquery.startQuery({<br />  destination: bigquery.dataset(&#39;higher_education&#39;).table(&#39;institutions&#39;),<br />  query: query<br />}, function(err, job) {});</p><p>//-<br />// After you have run <code>startQuery</code>, your query will execute in a job. Your<br />// callback is executed with a {module:bigquery/job} object so that you may<br />// check for the results.<br />//-<br />bigquery.startQuery(query, function(err, job) {<br />  if (!err) {<br />    job.getQueryResults(function(err, rows, apiResponse) {});<br />  }<br />});</p>"
      }
    ],
    "description": {
      "full": "<p>Run a query as a job. No results are immediately returned. Instead, your<br />callback will be executed with a {module:bigquery/job} object that you must<br />ping for the results. See the Job documentation for explanations of how to<br />check on the status of the job.</p>",
      "summary": "<p>Run a query as a job. No results are immediately returned. Instead, your<br />callback will be executed with a {module:bigquery/job} object that you must<br />ping for the results. See the Job documentation for explanations of how to<br />check on the status of the job.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 514,
    "codeStart": 568,
    "code": "BigQuery.prototype.startQuery = function(options, callback) {\n  var that = this;\n\n  if (is.string(options)) {\n    options = {\n      query: options\n    };\n  }\n\n  options = options || {};\n\n  if (!options.query) {\n    throw new Error('A SQL query string is required.');\n  }\n\n  var defaults = {};\n\n  if (options.destination) {\n    if (!(options.destination instanceof Table)) {\n      throw new Error('Destination must be a Table object.');\n    }\n    defaults.destinationTable = {\n      datasetId: options.destination.dataset.id,\n      projectId: options.destination.dataset.bigQuery.projectId,\n      tableId: options.destination.id\n    };\n    delete options.destination;\n  }\n\n  var body = {\n    configuration: {\n      query: extend(true, defaults, options)\n    }\n  };\n\n  this.request({\n    method: 'POST',\n    uri: '/jobs',\n    json: body\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var job = that.job(resp.jobReference.jobId);\n    job.metadata = resp;\n\n    callback(null, job, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "BigQuery",
      "cons": "BigQuery",
      "name": "startQuery",
      "string": "BigQuery.prototype.startQuery()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Developer Documentation</p><p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 620,
    "codeStart": 625,
    "code": "streamRouter.extend(BigQuery, ['getDatasets', 'getJobs', 'query']);\n\nmodule.exports = BigQuery;",
    "ctx": false
  }
]