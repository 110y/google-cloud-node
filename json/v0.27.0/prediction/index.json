[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "prediction",
        "html": "<p>prediction</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar arrify = require('arrify');\nvar extend = require('extend');\nvar format = require('string-format-obj');\nvar is = require('is');\nvar nodeutil = require('util');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:prediction/model}",
        "types": [
          "module:prediction/model"
        ],
        "typesDescription": "module:<a href=\"module%3Aprediction%2Fmodel.html\">prediction/model</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:prediction/model}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 29,
    "codeStart": 33,
    "code": "var Model = require('./model.js');",
    "ctx": {
      "type": "declaration",
      "name": "Model",
      "value": "require('./model.js')",
      "string": "Model"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/service}",
        "types": [
          "module:common/service"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fservice.html\">common/service</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/service}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 35,
    "codeStart": 39,
    "code": "var Service = require('../common/service.js');",
    "ctx": {
      "type": "declaration",
      "name": "Service",
      "value": "require('../common/service.js')",
      "string": "Service"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/streamrouter}",
        "types": [
          "module:common/streamrouter"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fstreamrouter.html\">common/streamrouter</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/streamrouter}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 41,
    "codeStart": 45,
    "code": "var streamRouter = require('../common/stream-router.js');",
    "ctx": {
      "type": "declaration",
      "name": "streamRouter",
      "value": "require('../common/stream-router.js')",
      "string": "streamRouter"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 47,
    "codeStart": 51,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Hello Prediction! Example]{@link https://cloud.google.com/prediction/docs/hello_world}",
        "html": "<p>[Hello Prediction! Example]{@link <a href=\"https://cloud.google.com/prediction/docs/hello_world}\">https://cloud.google.com/prediction/docs/hello_world}</a></p>"
      },
      {
        "type": "resource",
        "string": "[What is the Google Prediction API?]{@link https://cloud.google.com/prediction/docs/getting-started}",
        "html": "<p>[What is the Google Prediction API?]{@link <a href=\"https://cloud.google.com/prediction/docs/getting-started}\">https://cloud.google.com/prediction/docs/getting-started}</a></p>"
      },
      {
        "type": "resource",
        "string": "[Developers Guide]{@link https://cloud.google.com/prediction/docs/developer-guide}",
        "html": "<p>[Developers Guide]{@link <a href=\"https://cloud.google.com/prediction/docs/developer-guide}\">https://cloud.google.com/prediction/docs/developer-guide}</a></p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:prediction",
        "html": "<p>module:prediction</p>"
      },
      {
        "type": "param",
        "string": "{object} options - [Configuration object](#/docs/?method=gcloud).",
        "name": "options",
        "description": "<ul>\n<li><a href=\"#/docs/?method=gcloud\">Configuration object</a>.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud')({\n  keyFilename: '/path/to/keyfile.json',\n  projectId: 'grape-spaceship-123'\n});\n\nvar prediction = gcloud.prediction();",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;)({<br />  keyFilename: &#39;/path/to/keyfile.json&#39;,<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var prediction = gcloud.prediction();</p>"
      }
    ],
    "description": {
      "full": "<p>The <a href=\"https://cloud.google.com/prediction/docs/getting-started\">Google Prediction API</a><br />provides pattern-matching and machine learning capabilities. Given a set of<br />data examples to train against, you can create applications that can perform<br />the following tasks:</p><ul>\n<li>Given a user&#39;s past viewing habits, predict what other movies or products<br />a user might like.</li>\n<li>Categorize emails as spam or non-spam.</li>\n<li>Analyze posted comments about your product to determine whether they have<br />a positive or negative tone.</li>\n<li>Guess how much a user might spend on a given day, given his spending<br />history.</li>\n</ul>\n",
      "summary": "<p>The <a href=\"https://cloud.google.com/prediction/docs/getting-started\">Google Prediction API</a><br />provides pattern-matching and machine learning capabilities. Given a set of<br />data examples to train against, you can create applications that can perform<br />the following tasks:</p>",
      "body": "<ul>\n<li>Given a user&#39;s past viewing habits, predict what other movies or products<br />a user might like.</li>\n<li>Categorize emails as spam or non-spam.</li>\n<li>Analyze posted comments about your product to determine whether they have<br />a positive or negative tone.</li>\n<li>Guess how much a user might spend on a given day, given his spending<br />history.</li>\n</ul>\n"
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 53,
    "codeStart": 84,
    "code": "function Prediction(options) {\n  if (!(this instanceof Prediction)) {\n    options = util.normalizeArguments(this, options);\n    return new Prediction(options);\n  }\n\n  var config = {\n    baseUrl: 'https://www.googleapis.com/prediction/v1.6',\n    scopes: [\n      'https://www.googleapis.com/auth/prediction',\n      'https://www.googleapis.com/auth/devstorage.read_only'\n    ]\n  };\n\n  Service.call(this, config, options);\n}\n\nnodeutil.inherits(Prediction, Service);",
    "ctx": {
      "type": "constructor",
      "name": "Prediction",
      "string": "Prediction()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Trainedmodels: insert API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/insert}",
        "html": "<p>[Trainedmodels: insert API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/insert}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/insert}</a></p>"
      },
      {
        "type": "throws",
        "string": "{error} If a model ID is not provided.",
        "types": [
          "error"
        ],
        "description": "<p>If a model ID is not provided.</p>"
      },
      {
        "type": "param",
        "string": "{string} id - Unique name for the model. E.g. \"my-model\"",
        "name": "id",
        "description": "<ul>\n<li>Unique name for the model. E.g. &quot;my-model&quot;</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object=} options - See the\n    [Trainedmodels: insert API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/insert}\n    request body.",
        "name": "options",
        "description": "<ul>\n<li>See the     [Trainedmodels: insert API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/insert}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/insert}</a><br />  request body.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{module:storage/file} options.data - A CSV file to use as training\n    data.",
        "name": "options.data",
        "description": "<ul>\n<li>A CSV file to use as training     data.</li>\n</ul>\n",
        "types": [
          "module:storage/file"
        ],
        "typesDescription": "module:<a href=\"module%3Astorage%2Ffile.html\">storage/file</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.type - The type of model, `classification`\n    (categorical, text labels) or `regression` (numeric labels). Learn more\n    about these options in the [Developers Guide](https://cloud.google.com/prediction/docs/developer-guide#examples).",
        "name": "options.type",
        "description": "<ul>\n<li>The type of model, <code>classification</code>     (categorical, text labels) or <code>regression</code> (numeric labels). Learn more<br />  about these options in the <a href=\"https://cloud.google.com/prediction/docs/developer-guide#examples\">Developers Guide</a>.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An API error.",
        "name": "callback.err",
        "description": "<ul>\n<li>An API error.</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?module:prediction/model} callback.model - A new\n    {module:prediction/model} object.",
        "name": "callback.model",
        "description": "<ul>\n<li>A new     {module:prediction/model} object.</li>\n</ul>\n",
        "types": [
          "module:prediction/model"
        ],
        "typesDescription": "module:<a href=\"module%3Aprediction%2Fmodel.html\">prediction/model</a>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - Raw API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>Raw API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "prediction.createModel('my-model', function(err, model, apiResponse) {\n  // `model` is a Model object.\n});\n\n//-\n// Create a model, using an existing CSV file in a Google Cloud Storage\n// bucket as training data.\n//-\nvar gcs = gcloud.storage();\nvar bucket = gcs.bucket('my-bucket');\nvar modelDataCsv = bucket.file('my-model.csv');\n\nprediction.createModel('my-model', {\n  data: modelDataCsv\n}, function(err, model, apiResponse) {});",
        "html": "<p>prediction.createModel(&#39;my-model&#39;, function(err, model, apiResponse) {<br />  // <code>model</code> is a Model object.<br />});</p><p>//-<br />// Create a model, using an existing CSV file in a Google Cloud Storage<br />// bucket as training data.<br />//-<br />var gcs = gcloud.storage();<br />var bucket = gcs.bucket(&#39;my-bucket&#39;);<br />var modelDataCsv = bucket.file(&#39;my-model.csv&#39;);</p><p>prediction.createModel(&#39;my-model&#39;, {<br />  data: modelDataCsv<br />}, function(err, model, apiResponse) {});</p>"
      }
    ],
    "description": {
      "full": "<p>Create a trained model.</p><p>You may optionally provide a {module:storage/file} as a data source to train<br />the new model. If you have a CSV file, but haven&#39;t put it in a bucket yet,<br />you will need to reference a bucket with {module:storage/bucket}, a file with<br />{module:storage/file}, and upload it with {module:storage/file#upload}.</p>",
      "summary": "<p>Create a trained model.</p>",
      "body": "<p>You may optionally provide a {module:storage/file} as a data source to train<br />the new model. If you have a CSV file, but haven&#39;t put it in a bucket yet,<br />you will need to reference a bucket with {module:storage/bucket}, a file with<br />{module:storage/file}, and upload it with {module:storage/file#upload}.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 103,
    "codeStart": 147,
    "code": "Prediction.prototype.createModel = function(id, options, callback) {\n  var self = this;\n\n  if (!id) {\n    throw new Error('A model ID is required.');\n  }\n\n  if (is.fn(options)) {\n    callback = options;\n    options = {};\n  }\n\n  var body = extend({}, options, {\n    id: id\n  });\n\n  if (body.data) {\n    var file = body.data;\n\n    body.storageDataLocation = format('{bucket}/{fileName}', {\n      bucket: file.parent.name,\n      fileName: file.name\n    });\n\n    delete body.data;\n  }\n\n  if (body.type) {\n    body.modelType = body.type.toUpperCase();\n    delete body.type;\n  }\n\n  this.request({\n    method: 'POST',\n    uri: '/trainedmodels',\n    json: body\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    var model = self.model(resp.id);\n    model.metadata = resp;\n\n    callback(null, model, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Prediction",
      "cons": "Prediction",
      "name": "createModel",
      "string": "Prediction.prototype.createModel()"
    }
  },
  {
    "tags": [
      {
        "type": "resource",
        "string": "[Trainedmodels: list API Documentation]{@link https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/list}",
        "html": "<p>[Trainedmodels: list API Documentation]{@link <a href=\"https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/list}\">https://cloud.google.com/prediction/docs/reference/v1.6/trainedmodels/list}</a></p>"
      },
      {
        "type": "param",
        "string": "{object=} query - Query object.",
        "name": "query",
        "description": "<ul>\n<li>Query object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} query.maxResults - Maximum number of results to return.",
        "name": "query.maxResults",
        "description": "<ul>\n<li>Maximum number of results to return.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.pageToken - Page token.",
        "name": "query.pageToken",
        "description": "<ul>\n<li>Page token.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?error} callback.err - An error returned while making this request",
        "name": "callback.err",
        "description": "<ul>\n<li>An error returned while making this request</li>\n</ul>\n",
        "types": [
          "error"
        ],
        "typesDescription": "<code>error</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?module:prediction/model[]} callback.models - An array of\n    {module:prediction/model} objects.",
        "name": "callback.models",
        "description": "<ul>\n<li>An array of     {module:prediction/model} objects.</li>\n</ul>\n",
        "types": [
          "Array.<module:prediction/model>"
        ],
        "typesDescription": "<code>Array</code>.&lt;module:<a href=\"module%3Aprediction%2Fmodel.html\">prediction/model</a>&gt;|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{?object} callback.nextQuery - If present, query with this object to\n    check for more results.",
        "name": "callback.nextQuery",
        "description": "<ul>\n<li>If present, query with this object to     check for more results.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} callback.apiResponse - The full API response.",
        "name": "callback.apiResponse",
        "description": "<ul>\n<li>The full API response.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "prediction.getModels(function(err, models) {\n  if (!err) {\n    // models is an array of Model objects.\n  }\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nvar callback = function(err, models, nextQuery, apiResponse) {\n  if (nextQuery) {\n    // More results exist.\n    prediction.getModels(nextQuery, callback);\n  }\n\n  // The `metadata` property is populated for you with the metadata at the\n  // time of fetching.\n  models[0].metadata;\n\n  // However, in cases where you are concerned the metadata could have\n  // changed, use the `getMetadata` method.\n  models[0].getMetadata(function(err, metadata) {});\n};\n\nprediction.getModels({\n  autoPaginate: false\n}, callback);\n\n//-\n// Get the models from your project as a readable object stream.\n//-\nprediction.getModels()\n  .on('error', console.error)\n  .on('data', function(model) {\n    // model is a Model object.\n  })\n  .on('end', function() {\n    // All models retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\nprediction.getModels()\n  .on('data', function(model) {\n    this.end();\n  });",
        "html": "<p>prediction.getModels(function(err, models) {<br />  if (!err) {<br />    // models is an array of Model objects.<br />  }<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />var callback = function(err, models, nextQuery, apiResponse) {<br />  if (nextQuery) {<br />    // More results exist.<br />    prediction.getModels(nextQuery, callback);<br />  }</p><p>  // The <code>metadata</code> property is populated for you with the metadata at the<br />  // time of fetching.<br />  models[0].metadata;</p><p>  // However, in cases where you are concerned the metadata could have<br />  // changed, use the <code>getMetadata</code> method.<br />  models[0].getMetadata(function(err, metadata) {});<br />};</p><p>prediction.getModels({<br />  autoPaginate: false<br />}, callback);</p><p>//-<br />// Get the models from your project as a readable object stream.<br />//-<br />prediction.getModels()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(model) {<br />    // model is a Model object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All models retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />prediction.getModels()<br />  .on(&#39;data&#39;, function(model) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Gets a list of trained models for the project.</p>",
      "summary": "<p>Gets a list of trained models for the project.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 196,
    "codeStart": 263,
    "code": "Prediction.prototype.getModels = function(query, callback) {\n  var self = this;\n\n  if (is.fn(query)) {\n    callback = query;\n    query = {};\n  }\n\n  this.request({\n    uri: '/trainedmodels/list',\n    qs: query\n  }, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var models = arrify(resp.items).map(function(model) {\n      var modelInstance = self.model(model.id);\n      modelInstance.metadata = model;\n      return modelInstance;\n    });\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, query, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    callback(null, models, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Prediction",
      "cons": "Prediction",
      "name": "getModels",
      "string": "Prediction.prototype.getModels()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "string": "{error} If a model ID is not provided.",
        "types": [
          "error"
        ],
        "description": "<p>If a model ID is not provided.</p>"
      },
      {
        "type": "param",
        "string": "{string} id - The unique ID of the trained model.",
        "name": "id",
        "description": "<ul>\n<li>The unique ID of the trained model.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:prediction/model}",
        "types": [
          "module:prediction/model"
        ],
        "typesDescription": "module:<a href=\"module%3Aprediction%2Fmodel.html\">prediction/model</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:prediction/model}</p>"
      },
      {
        "type": "example",
        "string": "var model = prediction.model('my-model');",
        "html": "<p>var model = prediction.model(&#39;my-model&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a model object representing a trained model.</p>",
      "summary": "<p>Create a model object representing a trained model.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 298,
    "codeStart": 309,
    "code": "Prediction.prototype.model = function(id) {\n  if (!id) {\n    throw new Error('A model ID is required.');\n  }\n\n  return new Model(this, id);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Prediction",
      "cons": "Prediction",
      "name": "model",
      "string": "Prediction.prototype.model()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Developer Documentation</p><p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>These methods can be used with either a callback or as a readable object<br />stream. <code>streamRouter</code> is used to add this dual behavior.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 317,
    "codeStart": 322,
    "code": "streamRouter.extend(Prediction, 'getModels');\n\nmodule.exports = Prediction;",
    "ctx": false
  }
]